{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>IntelMQ is a solution for IT security teams (CERTs &amp; CSIRTs, SOCs abuse departments, etc.) for collecting and processing security feeds (such as log files) using a message queuing protocol. It's a community driven initiative called IHAP<sup>1</sup> (Incident Handling Automation Project) which was conceptually designed by European CERTs/CSIRTs during several InfoSec events. Its main goal is to give to incident responders an easy way to collect &amp; process threat intelligence thus improving the incident handling processes of CERTs.</p> <p>IntelMQ is frequently used for:</p> <ul> <li>automated incident handling</li> <li>situational awareness</li> <li>automated notifications</li> <li>as data collector for other tools</li> <li>and more!</li> </ul> <p>The design was influenced by AbuseHelper however it was re-written from scratch and aims at:</p> <ul> <li>Reducing the complexity of system administration</li> <li>Reducing the complexity of writing new bots for new data feeds</li> <li>Reducing the probability of events lost in all process with persistence functionality (even system crash)</li> <li>Use and improve the existing Data Harmonization Ontology</li> <li>Use JSON format for all messages</li> <li>Provide easy way to store data into databases and log collectors such as PostgreSQL, Elasticsearch and Splunk</li> <li>Provide easy way to create your own black-lists</li> <li>Provide easy communication with other systems via HTTP RESTful API</li> </ul> <p>It follows the following basic meta-guidelines:</p> <ul> <li>Don't break simplicity - KISS</li> <li>Keep it open source - forever</li> <li>Strive for perfection while keeping a deadline</li> <li>Reduce complexity/avoid feature bloat</li> <li>Embrace unit testing</li> <li>Code readability: test with inexperienced programmers</li> <li>Communicate clearly</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<ul> <li>Subscribe to the IntelMQ Developers mailing list and engage in discussions</li> <li>Report any errors and suggest improvements via issues</li> <li>Read the Developer Guide and open a pull request</li> </ul> <ol> <li> <p>Incident Handling Automation Project, mailing list: ihap@lists.trusted-introducer.org\u00a0\u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"CHANGELOG","text":""},{"location":"changelog/#331-unreleased","title":"3.3.1 (unreleased)","text":""},{"location":"changelog/#configuration","title":"Configuration","text":""},{"location":"changelog/#core","title":"Core","text":""},{"location":"changelog/#development","title":"Development","text":""},{"location":"changelog/#data-format","title":"Data Format","text":""},{"location":"changelog/#bots","title":"Bots","text":""},{"location":"changelog/#collectors","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.shadowserver.collector_reports_api.py</code>:</li> <li>Added support for the types parameter to be either a string or a list.</li> <li>Refactored to utilize the type field returned by the API to match the requested types instead of a sub-string match on the filename.</li> <li><code>intelmq.bots.collectors.shodan.collector_stream</code> (PR#2492 by Mikk Margus M\u00f6ll):</li> <li>Add <code>alert</code> parameter to Shodan stream collector to allow fetching streams by configured alert ID</li> </ul>"},{"location":"changelog/#parsers","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Fetch schema before first run (PR#2482 by elsif2, fixes #2480).</li> <li><code>intelmq.bots.parsers.dataplane.parser</code>: Use <code>|</code> as field delimiter, fix parsing of AS names including <code>|</code> (PR#2488 by DigitalTrustCenter).</li> </ul>"},{"location":"changelog/#experts","title":"Experts","text":""},{"location":"changelog/#outputs","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.misp.output_feed</code>: Handle failures if saved current event wasn't saved or is incorrect (PR by Kamil Mankowski).</li> <li><code>intelmq.bots.outputs.smtp_batch.output</code>: Documentation on multiple recipients added (PR#2501 by Edvard Rejthar).</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":""},{"location":"changelog/#packaging","title":"Packaging","text":""},{"location":"changelog/#tests","title":"Tests","text":""},{"location":"changelog/#tools","title":"Tools","text":""},{"location":"changelog/#contrib","title":"Contrib","text":""},{"location":"changelog/#known-issues","title":"Known issues","text":""},{"location":"changelog/#330-2024-03-01","title":"3.3.0 (2024-03-01)","text":""},{"location":"changelog/#configuration_1","title":"Configuration","text":"<ul> <li>Add new optional configuration parameters for <code>intelmq.bots.collectors.stomp.collector</code>   and <code>intelmq.bots.outputs.stomp.output</code> (PR#2408 by Jan Kaliszewski):</li> <li><code>auth_by_ssl_client_certificate</code> (Boolean, default: true; if false then     <code>ssl_client_certificate</code> and <code>ssl_client_certificate_key</code> will be ignored);</li> <li><code>username</code> (STOMP authentication login, default: \"guest\"; to be used only     if <code>auth_by_ssl_client_certificate</code> is false);</li> <li><code>password</code> (STOMP authentication passcode, default: \"guest\"; to be used only     if <code>auth_by_ssl_client_certificate</code> is false).</li> <li>Add the possibility to set the <code>ssl_ca_certificate</code> configuration parameter for   <code>intelmq.bots.collectors.stomp.collector</code> and/or <code>intelmq.bots.outputs.stomp.output</code>   to an empty string - which means that the SSL machinery used for STOMP communication   will attempt to load the system\u2019s default CA certificates (PR#2414 by Jan Kaliszewski).</li> </ul>"},{"location":"changelog/#core_1","title":"Core","text":"<ul> <li><code>intelmq.lib.message</code>: For invalid message keys, add a hint on the failure to the exception: not allowed by configuration or not matching regular expression (PR#2398 by Sebastian Wagner).</li> <li><code>intelmq.lib.exceptions.InvalidKey</code>: Add optional parameter <code>additional_text</code> (PR#2398 by Sebastian Wagner).</li> <li>Change the way we discover bots to allow easy extending based on the entry point name. (PR#2413 by Kamil Mankowski)</li> <li><code>intelmq.lib.mixins</code>: Add a new class, <code>StompMixin</code> (defined in a new submodule: <code>stomp</code>),   which provides certain common STOMP-bot-specific operations, factored out from   <code>intelmq.bots.collectors.stomp.collector</code> and <code>intelmq.bots.outputs.stomp.output</code>   (PR#2408 and PR#2414 by Jan Kaliszewski).</li> <li><code>intelmq.lib.upgrades</code>: Replace deprecated instances of <code>url2fqdn</code> experts by the new <code>url</code> expert in runtime configuration (PR#2432 by Sebastian Wagner).</li> <li><code>intelmq.lib.bot</code>: Ensure closing log files on reloading (PR#2435 by Kamil Mankowski).</li> <li>AMQP Pipeline: fix SSL context to pointing to create a client-side connection that verifies the server (PR by Kamil Mankowski).</li> <li>Only load the config once when starting intelmqctl (which makes IntelMQ API calls take less time) (PR#2444 by DigitalTrustCenter).</li> </ul>"},{"location":"changelog/#development_1","title":"Development","text":"<ul> <li>Makefile: Add codespell and test commands (PR#2425 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#data-format_1","title":"Data Format","text":""},{"location":"changelog/#bots_1","title":"Bots","text":""},{"location":"changelog/#collectors_1","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.stomp.collector</code> (PR#2408 and PR#2414 by Jan Kaliszewski):</li> <li>Drop support for versions of <code>stomp.py</code> older than <code>4.1.12</code>.</li> <li>Update the code to support new versions of <code>stomp.py</code>, including the latest (<code>8.1.0</code>);     fixes #2342.</li> <li>Add support for authentication based on STOMP login and passcode, introducing three     new configuration parameters (see above: Configuration).</li> <li>Add support for loading the system\u2019s default CA certificates, as an alternative to     specifying the CA certificate(s) file path explicitly (see above: Configuration).</li> <li>Fix (by carefully targeted monkey patching) certain security problems caused by     SSL-related weaknesses that some versions of <code>stomp.py</code> suffer from.</li> <li>Fix the reconnection behavior: do not attempt to reconnect after <code>shutdown</code>. Also,     never attempt to reconnect if the version of <code>stomp.py</code> is older than <code>4.1.21</code> (it     did not work properly anyway).</li> <li>Add coercion of the <code>port</code> config parameter to <code>int</code>.</li> <li>Add implementation of the <code>check</code> hook (verifying, in particular, accessibility     of necessary file(s)).</li> <li>Remove undocumented and unused attributes of <code>StompCollectorBot</code> instances:     <code>ssl_ca_cert</code>, <code>ssl_cl_cert</code>, <code>ssl_cl_cert_key</code>.</li> <li>Minor fixes/improvements and some refactoring (see also above: Core...).</li> <li><code>intelmq.bots.collectors.amqp</code>: fix SSL context to pointing to create a client-side connection that verifies the server (PR by Kamil Mankowski).</li> <li><code>intelmq.bots.collectors.shadowserver.collector_reports_api</code>:</li> <li>The 'json' option is no longer supported as the 'csv' option provides better performance (PR#2372 by elsif2).</li> <li><code>intelmq.bots.collectors.alienvault_otx.collector</code> (PR#2449 by qux-bbb):</li> <li>Fix modified_pulses_only is always False.</li> </ul>"},{"location":"changelog/#parsers_1","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.netlab_360.parser</code>: Removed as the feed is discontinued. (#2442 by Filip Pokorn\u00fd)</li> <li><code>intelmq.bots.parsers.webinspektor.parser</code>: Removed as the feed is discontinued. (#2442 by Filip Pokorn\u00fd)</li> <li><code>intelmq.bots.parsers.sucuri.parser</code>: Removed as the feed is discontinued. (#2442 by Filip Pokorn\u00fd)</li> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Switch to dynamic configuration to decouple report schema changes from IntelMQ releases by regularly downloading them from the Shadowserver server (PR#2372 by elsif2).</li> <li><code>intelmq.bots.parsers.cymru</code>: Save current line. (PR by Kamil Mankowski)</li> </ul>"},{"location":"changelog/#experts_1","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.jinja</code> (PR#2417 by Mikk Margus M\u00f6ll):</li> <li>Add optional <code>socket_perms</code> and <code>socket_group</code> parameters to change     file permissions on socket file, if it is in use.</li> <li><code>intelmq.bots.experts.ripe</code> (PR#2461 by Mikk Margus M\u00f6ll):</li> <li>Handle \"No abuse contact found for\" messages for non-ASN resources</li> </ul>"},{"location":"changelog/#outputs_1","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.stomp.output</code> (PR#2408 and PR#2414 by Jan Kaliszewski):</li> <li>Drop support for versions of <code>stomp.py</code> older than <code>4.1.12</code>.</li> <li>Update the code to support new versions of <code>stomp.py</code>, including the latest (<code>8.1.0</code>).</li> <li>Add support for authentication based on STOMP login and passcode, introducing three     new configuration parameters (see above: Configuration).</li> <li>Add support for loading the system\u2019s default CA certificates, as an alternative to     specifying the CA certificate(s) file path explicitly (see above: Configuration).</li> <li>Fix (by carefully targeted monkey patching) certain security problems caused by     SSL-related weaknesses that some versions of <code>stomp.py</code> suffer from.</li> <li>Fix <code>AttributeError</code> caused by attempts to get unset attributes of <code>StompOutputBot</code>     (<code>ssl_ca_cert</code> et consortes).</li> <li>Add coercion of the <code>port</code> config parameter to <code>int</code>.</li> <li>Add implementation of the <code>check</code> hook (verifying, in particular, accessibility     of necessary file(s)).</li> <li>Add <code>stomp.py</code> version check (raise <code>MissingDependencyError</code> if not <code>&gt;=4.1.12</code>).</li> <li>Minor fixes/improvements and some refactoring (see also above: Core...).</li> <li><code>intelmq.bots.outputs.stomp.output</code> (PR#2423 by Kamil Mankowski):</li> <li>Try to reconnect on <code>NotConnectedException</code>.</li> <li><code>intelmq.bots.outputs.smtp_batch.output</code> (PR #2439 by Edvard Rejthar):</li> <li>Fix ability to send with the default <code>bcc</code></li> <li><code>intelmq.bots.outputs.amqp</code>: fix SSL context to pointing to create a client-side connection that verifies the server (PR by Kamil Mankowski).</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Add a readthedocs configuration file to fix the build fail (PR#2403 by Sebastian Wagner).</li> <li>Add a guide of developing extensions packages (PR#2413 by Kamil Mankowski)</li> <li>Update/fix/improve the stuff related to the STOMP bots and integration with the n6's   Stream API (PR#2408 and PR#2414 by Jan Kaliszewski).</li> <li>Complete documentation overhaul. Change to markdown format. Uses the mkdocs-material (PR#2419 by Filip Pokorn\u00fd).</li> <li>Adds warning banner if not browsing the latest version of the docs (PR#2445 by Filip Pokorn\u00fd).</li> <li>Fix logo path in index.md when building the docs (PR#2445 by Filip Pokorn\u00fd).</li> </ul>"},{"location":"changelog/#packaging_1","title":"Packaging","text":"<ul> <li>Add <code>pendulum</code> to suggested packages, as it is required for the sieve bot (PR#2424 by Sebastian Wagner).</li> <li><code>debian/control</code>: in <code>Suggests</code> field, replace <code>python3-stomp.py (&gt;= 4.1.9)</code> with   <code>python3-stomp (&gt;= 4.1.12)</code>, i.e., fix the package name by removing the <code>.py</code>   suffix and bump the minimum version to <code>4.1.12</code> (PR#2414 by Jan Kaliszewski).</li> </ul>"},{"location":"changelog/#tests_1","title":"Tests","text":""},{"location":"changelog/#tools_1","title":"Tools","text":"<ul> <li><code>intelmq_psql_initdb</code>:</li> <li>got support for providing custom harmonization file, generating view for storing <code>raw</code> fields separately, and adding <code>IF NOT EXISTS</code>/<code>OR REPLACE</code> clauses (PR#2404 by Kamil Mankowski).</li> <li>got support for generating JSONB fields for PostgreSQL schema (PR#2436 by Kamil Mankowski).</li> </ul>"},{"location":"changelog/#contrib_1","title":"Contrib","text":""},{"location":"changelog/#known-issues_1","title":"Known issues","text":""},{"location":"changelog/#321-2023-08-28","title":"3.2.1 (2023-08-28)","text":""},{"location":"changelog/#core_2","title":"Core","text":"<ul> <li>Fixed issue preventing bots from stopping after reloading (PR by Kamil Mankowski).</li> </ul>"},{"location":"changelog/#bots_2","title":"Bots","text":""},{"location":"changelog/#experts_2","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.reverse_dns.expert</code>:</li> <li>Fix the cache key to not cache results for /24 (IPv4) and /128 (IPv6) networks but for single IP-Adresses (PR#2395 by Sebastian Wagner, fixes #2394).</li> </ul>"},{"location":"changelog/#320-2023-07-18","title":"3.2.0 (2023-07-18)","text":""},{"location":"changelog/#core_3","title":"Core","text":"<ul> <li><code>intelmq.lib.utils</code>:</li> <li><code>resolve_dns</code>: Deprecate dnspython versions pre-2.0.0 and disable search domains (PR#2352)</li> <li>Fixed not resetting destination path statistics in the stats cache after restarting bot (Fixes #2331)</li> <li>Force flushing statistics if bot will sleep longer than flushing delay (Fixes #2336)</li> <li><code>intelmq.lib.upgrages</code>: Fix a bug in the upgrade function for version 3.1.0 which caused an exception if a generic csv parser instance had no parameter <code>type</code> (PR#2319 by Filip Pokorn\u00fd).</li> <li><code>intelmq.lib.datatypes</code>: Adds <code>TimeFormat</code> class to be used for the <code>time_format</code> bot parameter (PR#2329 by Filip Pokorn\u00fd).</li> <li><code>intelmq.lib.exceptions</code>: Fixes a bug in <code>InvalidArgument</code> exception (PR#2329 by Filip Pokorn\u00fd).</li> <li><code>intelmq.lib.harmonization</code>:</li> <li>Changes signature and names of <code>DateTime</code> conversion functions for consistency, backwards compatible (PR#2329 by Filip Pokorn\u00fd).</li> <li>Ensure rejecting URLs with leading whitespaces after changes in CPython (fixes #2377)</li> <li><code>intelmq.lib.bot.Bot</code>: Allow setting the parameters via parameter on bot initialization.</li> </ul>"},{"location":"changelog/#development_2","title":"Development","text":"<ul> <li>CI: pin the Codespell version to omit troubles caused by its new releases (PR #2379).</li> <li>CI: Updated the versions of the github actions in the CI workflows. (PR#2392 by Sebastian Kufner)</li> </ul>"},{"location":"changelog/#bots_3","title":"Bots","text":""},{"location":"changelog/#collectors_2","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collector.rt</code>:</li> <li>restrict <code>python-rt</code> to be below version 3.0 due to introduced breaking changes,</li> <li>added support for <code>Subject NOT LIKE</code> queries,</li> <li>added support for multiple values in ticket subject queries.</li> <li><code>intelmq.bots.collectors.rsync</code>: Support for optional private key, relative time parsing for the source path, extra rsync parameters and strict host key checking (PR#2241 by Mateo Durante).</li> </ul>"},{"location":"changelog/#parsers_2","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Reset detected <code>feedname</code> at shutdown to re-detect the feedname on reloads (PR#2361 by @elsif2, fixes #2360).</li> <li>Switch to dynamic configuration to decouple report schema changes from IntelMQ releases.</li> <li>Added 'IPv6-Vulnerable-Exchange' alias and 'Accessible-WS-Discovery-Service' report. (PR#2338)</li> <li>Removed unused <code>p0f_genre</code> and <code>p0f_detail</code> from the 'DNS-Open-Resolvers' report. (PR#2338)</li> <li>Added 'Accessible-SIP' report. (PR#2348)</li> <li>Added 'IPv6-Open-HTTP-Proxy' and 'IPv6-Accessible-HTTP-Proxy' aliases. (PR#2348)</li> <li>Removed  duplicate mappings from the 'Spam-URL' report. (PR#2348)</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>: Changes <code>time_format</code> parameter to use new <code>TimeFormat</code> class (PR#2329 by Filip Pokorn\u00fd).</li> <li><code>intelmq.bots.parsers.html_table.parser</code>: Changes <code>time_format</code> parameter to use new <code>TimeFormat</code> class (PR#2329 by Filip Pokorn\u00fd).</li> <li><code>intelmq.bots.parsers.turris.parser.py</code> Updated to the latest data format (issue #2167). (PR#2373 by Filip Pokorn\u00fd).</li> </ul>"},{"location":"changelog/#experts_3","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.sieve</code>:</li> <li>Allow empty lists in sieve rule files (PR#2341 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.bots.experts.cymru_whois</code>:</li> <li>Ignore AS names with unexpected unicode characters (PR#2352, fixes #2132)</li> <li>Avoid extraneous search domain-based queries on NXDOMAIN result (PR#2352)</li> <li><code>intelmq.bots.experts.sieve</code>:</li> <li>Added :before and :after keywords (PR#2374)</li> </ul>"},{"location":"changelog/#outputs_2","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.cif3.output</code>: Added (PR#2244 by Michael Davis).</li> <li><code>intelmq.bots.outputs.sql.output</code>: New parameter <code>fail_on_errors</code> (PR#2362 by Sebastian Wagner).</li> <li><code>intelmq.bots.outputs.smtp_batch.output</code>: Added a bot to gathering the events and sending them by e-mails at a stroke as CSV files (PR#2253 by Edvard Rejthar)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>API: update API installation to be aligned with the rewritten API, and clarify some missing steps.</li> </ul>"},{"location":"changelog/#tests_2","title":"Tests","text":"<ul> <li>New decorator <code>skip_installation</code> and environment variable <code>INTELMQ_TEST_INSTALLATION</code> to skip tests requiring an IntelMQ installation on the test host by default (PR#2370 by Sebastian Wagner, fixes #2369)</li> </ul>"},{"location":"changelog/#tools_2","title":"Tools","text":"<ul> <li><code>intelmqsetup</code>:</li> <li>SECURITY: fixed a low-risk bug causing the tool to change owner of <code>/</code> if run with the <code>INTELMQ_PATHS_NO_OPT</code> environment variable set. This affects only the PIP package as the DEB/RPM packages don't contain this tool. (PR#2355 by Kamil Ma\u0144kowski, fixes #2354)</li> <li><code>contrib.eventdb.separate-raws-table.sql</code>: Added the missing commas to complete the sql syntax. (PR#2386, fixes #2125 by Sebastian Kufner)</li> <li><code>intelmq_psql_initdb</code>:</li> <li>Added parameter <code>-o</code> to set the output file destination. (by Sebastian Kufner)</li> <li><code>intelmqctl</code>:</li> <li>Increased the performance through removing unnecessary reads. (by Sebastian Kufner)</li> </ul>"},{"location":"changelog/#known-issues_2","title":"Known Issues","text":"<p>This is short list of the most important known issues. The full list can be retrieved from GitHub. - <code>intelmq.parsers.html_table</code> may not process invalid URLs in patched Python version due to changes in <code>urllib</code> (#2382). - Breaking changes in 'rt' library (#2367). - Stomp collector failed (#2342). - Type error with SQL output bot's <code>prepare_values</code> returning list instead of tuple (#2255). - <code>intelmq_psql_initdb</code> does not work for SQLite (#2202). - intelmqsetup: should install a default state file (#2175). - Misp Expert - Crash if misp event already exist (#2170). - Turris greylist has been updated (#2167). - Spamhaus CERT parser uses wrong field (#2165). - Custom headers ignored in HTTPCollectorBot (#2150). - intelmqctl log: parsing syslog does not work (#2097). - Bash completion scripts depend on old JSON-based configuration files (#2094). - Bot configuration examples use JSON instead of YAML (#2066). - Bots started with IntelMQ-API/Manager stop when the webserver is restarted (#952). - Corrupt dump files when interrupted during writing (#870).</p>"},{"location":"changelog/#310-2023-02-10","title":"3.1.0 (2023-02-10)","text":"<ul> <li>Upgraded syntax to Python 3.6 (mostly Format-Strings) using pyuprade (PR#2136 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#core_4","title":"Core","text":"<ul> <li><code>intelmq.lib.upgrades</code>:</li> <li>Refactor upgrade functions global configuration handling removing the old-style defaults configuration (PR#2058 by Sebastian Wagner).</li> <li>Pass version history as parameter to upgrade functions (PR#2058 by Sebastian Wagner).</li> <li><code>intelmq.lib.message</code>:</li> <li>Fix and pre-compile the regular expression for harmonization key names and also check keys in the <code>extra.</code> namespace (PR#2059 by Sebastian Wagner, fixes #1807).</li> <li><code>intelmq.lib.bot.SQLBot</code> was replaced by an SQLMixin in <code>intelmq.lib.mixins.SQLMixin</code>. The Generic DB Lookup Expert bot and the SQLOutput bot were updated accordingly.</li> <li>Added support for MSSQL (PR#2171 by Karl-Johan Karlsson).</li> <li>Added optional reconnect delay parameter (PR#2171 by Karl-Johan Karlsson).</li> <li>Added an ExpertBot class - it should be used by all expert bots as a parent class</li> <li>Introduced a module for IntelMQ related datatypes <code>intelmq.lib.datatypes</code> which for now only contains an Enum listing the four bot types</li> <li>Added a <code>bottype</code> attribute to CollectorBot, ParserBot, ExpertBot, OutputBot</li> <li>Introduces a module for IntelMQ processmanagers. The processmanagers were up until now part of the intelmqct script.   They now reside in <code>intelmq.lib.processmanager</code> which also contains an interface definition the processmanager implementations must adhere to.   Both the processmanagers and the <code>intelmqctl</code> script were cleaned up a bit.   The <code>LogLevel</code> and <code>ReturnType</code> Enums were added to <code>intelmq.lib.datatypes</code>.</li> <li><code>intelmq.lib.bot</code>:</li> <li>Enhance behaviour if an unconfigured bot is started (PR#2054 by Sebastian Wagner).</li> <li>Fix line recovery and message dumping of the <code>ParserBot</code> (PR#2192 by Sebastian Wagner).<ul> <li>Previously the dumped message was always the last message of a report if the report contained multiple lines leading to data-loss.</li> </ul> </li> <li>Fix crashing at start in multithreaded bots (PR#2236 by DigitalTrustCenter).</li> <li>Added <code>default_fields</code> parameter to <code>ParserBot</code> (PR#2293 by Filip Pokorn\u00fd)</li> <li><code>intelmq.lib.pipeline</code>:</li> <li>Changed <code>BRPOPLPUSH</code> to <code>BLMOVE</code>, because <code>BRPOPLPUSH</code> has been marked as deprecated by redis in favor of <code>BLMOVE</code> (PR#2149 and PR#2240 by Sebastian Waldbauer and Sebastian Wagner, fixes #1827, #2233).</li> <li><code>intelmq.lib.utils</code>:</li> <li>Added wrapper <code>resolve_dns</code> for querying DNS, with the support for recommended methods from <code>dnspython</code> package in versions 1 and 2.</li> <li>Moved line filtering inside <code>RewindableFileHandle</code> for easier handling and limiting number of temporary objects.</li> <li><code>intelmq.lib.harmonization</code>:</li> <li>Fixed DateTime handling of naive time strings (previously assumed local timezone, now assumes UTC) (PR#2279 by Filip Pokorn\u00fd, fixes #2278)</li> <li>Removes <code>tzone</code> argument from <code>DateTime.from_timestamp</code> and <code>DateTime.from_epoch_millis</code></li> <li><code>DateTime.from_timstamp</code> now also allows string argument</li> <li>Removes <code>pytz</code> global dependency</li> <li>Removed support for Python 3.6, including removing conditional dependencies and updating syntax to use features from newest versions. (fixes #2272)</li> </ul>"},{"location":"changelog/#development_3","title":"Development","text":"<ul> <li>Removed Python 3.6 from CI.</li> <li>Enabled tests against Python 3.11.</li> </ul>"},{"location":"changelog/#bots_4","title":"Bots","text":"<ul> <li>Set the parent class of all bots to the correct bot class</li> </ul>"},{"location":"changelog/#collectors_3","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.mail._lib</code>:</li> <li>Add support for unverified SSL/STARTTLS connections (PR#2055 by Sebastian Wagner).</li> <li>Fix exception handling for aborted IMAP connections (PR#2187 by Sebastian Wagner).</li> <li><code>intelmq.bots.collectors.blueliv</code>: Fix Blueliv collector requirements (PR#2161 by Gethvi).</li> <li><code>intelmq.bots.collectors.github_api._collector_github_api</code>: Added personal access token support (PR#2145 by Sebastian Waldbauer, fixes #1549).</li> <li><code>intelmq.bots.collectors.file.collector_file</code>: Added file lock support, no more race conditions (PR#2147 by Sebastian Waldbauer, fixes #2128)</li> <li><code>intelmq.bots.collectors.shadowserver.collector_reports_api.py</code>: Added file_format option to download reports in CSV format for better performance (PR#2246 by elsif2)</li> </ul>"},{"location":"changelog/#parsers_3","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.alienvault.parser_otx</code>: Save CVE data in <code>extra.cve</code> instead of <code>extra.CVE</code> due to the field name restriction on lower-case characters  (PR#2059 by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.anubisnetworks.parser</code>: Changed field name format from <code>extra.communication.http.x_forwarded_for_#1</code> to <code>extra.communication.http.x_forwarded_for_1</code> due to the field name restriction on alphanumeric characters (PR#2059 by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.dataplane.parser</code>:</li> <li>Add support for additional feeds (PR#2102 by Mikk Margus M\u00f6ll).<ul> <li>DNS Recursion Desired</li> <li>DNS Recursion Desired ANY</li> <li>DNS Version</li> <li>Protocol 41</li> <li>SMTP Greet</li> <li>SMTP Data</li> <li>Telnet Login</li> <li>VNC/RFB Login</li> </ul> </li> <li>Fix event object creation (PR#2298 by DigitalTrustCenter).</li> <li>Removed <code>intelmq.bots.parsers.malc0de</code>: this bot was marked as deprecated and removed from feed due to offline status (PR#2184 by Tamas Gutsohn, fixes #2178).</li> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>:</li> <li>New parameter <code>overwrite</code> (PR#2112 by Sebastian Wagner, fixes #2022).</li> <li>Fix handling of field <code>Payload.domain</code> if it contains the same IP address as <code>Payload.serverIp</code> (PR#2144 by Mikk Margus M\u00f6ll and Sebastian Wagner).</li> <li>Handle Payload field with non-base64-encoded JSON content and numbered dictionaries (PR#2193 by Sebastian Wagner)</li> <li><code>intelmq.bots.parsers.shodan.parser</code> (PR#2117 by Mikk Margus M\u00f6ll):</li> <li>Instead of keeping track of <code>extra.ftp.&lt;something&gt;.parameters</code>, FTP parameters are collected together into <code>extra.ftp.features</code> as a list of said features, reducing field count.</li> <li>Shodan field <code>rsync.modules</code> is collected.</li> <li>Conversion functions can raise <code>NoValueException</code> with a string argument to signify that the conversion would not succeed, such as in the case of a single IP address being given in hostnames, which would then be passed into <code>source.reverse_dns and</code> fail to validate as a FQDN.</li> <li>Variable <code>_common_keys</code> is moved out of the class.</li> <li><code>_dict_dict_to_obj_list</code> is introduced, for converting a string-to-dict mapping into a list of dicts with the previous key as an attribute of the dict; this can be useful for preventing issues where, when feeding the data into aggregating tools, you'd end up with many more fields than necessary, e.g <code>vulns.CVE-2010-0001.cvss</code>, <code>CVE-2010-0002.cvss</code> etc.</li> <li><code>_get_first</code> to get the first item from a list, with <code>NoValueException</code> raised on empty lists.</li> <li><code>_get_first_hostname</code> to handle the first valid FQDN from a list of hostnames for hostnames in the Shodan banner, if there is one, and gives <code>NoValueException</code> otherwise.</li> <li><code>ssl.cert.serial</code> and <code>ssl.dhparams.generator</code>, which may return both integers and strings, are converted to strings.</li> <li>Changes to method <code>apply_mapping</code>, such as reducing needless loop iterations, removing a big try-except, and adding the <code>NoValueException</code> handling described above.</li> <li>Stops falsy values (False, 0) besides None from being filtered out.</li> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Added support for <code>Accessible AMQP</code>, <code>Device Identification Report</code> (IPv4 and IPv6) (PR#2134 by Mateo Durante).</li> <li>Added file name mapping for <code>SSL-POODLE-Vulnerable-Servers IPv6</code> (file name <code>scan6_ssl_poodle</code>) (PR#2134 by Mateo Durante).</li> <li>Added <code>Malware-URL</code>, <code>Sandbox-Connection</code>, <code>Sandbox-DNS</code>, <code>Accessible-AMQP</code>, <code>Open-AnonymouIs-MQTT</code>, <code>Accessible-QUIC</code>, <code>Accessible-SSH</code>, <code>SYNful-Knock</code>, and <code>Special</code> (PR#2227 by elsif2)</li> <li>Removed legacy reports <code>Amplification-DDoS-Victim</code>, <code>CAIDA-IP-Spoofer</code>, <code>Darknet</code>, <code>Drone</code>, <code>Drone-Brute-Force</code>, <code>IPv6-Sinkhole-HTTP-Drone</code>, <code>Microsoft-Sinkhole</code>, and <code>Sinkhole-HTTP-Drone</code> (PR#2227 by elsif2).</li> <li>Users storing events in a database should be aware that field names and types have been updated (PR#2227 by elsif2).</li> <li>Corrected \"Accessible-AMQP\" message_length type (int) and added \"STUN\" support (PR#2235 by elsif2).</li> <li>Added amplification factor to UDP scan reports (PR#2238 by elsif2).</li> <li>Added version and build_date to \"Vulnerable-HTTP\" report (PR#2238 by elsif2).</li> <li>The following field types have been standardized across all Shadowserver reports (PR#2246 by elsif2):       destination.fqdn (validate_fqdn)       destination.url (convert_http_host_and_url)       extra.browser_trusted (convert_bool)       extra.duration (convert_int)       extra.end_time (convert_date_utc)       extra.freak_vulnerable (convert_bool)       extra.ok (convert_bool)       extra.password (validate_to_none)       extra.ssl_poodle (convert_bool)       extra.status (convert_int)       extra.uptime (convert_int)       extra.version (convert_to_none)       source.network (validate_network)</li> <li>The following report field names have changed to better represent their values:       scan_rsync:extra.password renamed to extra.has_password       scan_elasticsearch:status renamed to http_code</li> <li>Added <code>Accessible-HTTP-proxy</code> and <code>Open-HTTP-proxy</code> (PR#2246 by elsif2).</li> <li>Added http_agent to the <code>Honeypot-DDoS</code> report and added the <code>DDoS-Participant</code> report (PR#2303 by elsif2)</li> <li>Added <code>Accessible-SLP</code>, <code>IPv6 Accesssible-SLP</code>, <code>IPv6-DNS-Open-Resolvers</code>, and <code>IPv6-Open-LDAP-TCP</code> reports (PR#2311 by elsif2)</li> <li> <p>Standardized response_length to response_size in <code>Accessible-ICS</code> and <code>Open-MSSQL</code> (PR#2311 by elsif2)</p> </li> <li> <p><code>intelmq.bots.parsers.cymru.parser_cap_program</code>: The parser mapped the hostname into <code>source.fqdn</code> which is not allowed by the IntelMQ Data Format. Added a check (PR#2215 by Sebastian Waldbauer, fixes #2169)</p> </li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>:</li> <li>Use RewindableFileHandle to use the original current line for line recovery (PR#2192 by Sebastian Wagner).</li> <li>Recovering CSV lines preserves the original line ending (PR#2280 by Kamil Mankowski, fixes #1597)</li> <li><code>intelmq.bots.parsers.autoshun.parser</code>: Removed, as the feed is discontinued (PR#2214 by Sebastian Waldbauer, fixes #2162).</li> <li><code>intelmq.bots.parsers.openphish.parser_commercial</code>: Refactored complete code (PR#2160 by Filip Pokorn\u00fd).</li> <li>Fixes wrong mapping of <code>host</code> field to <code>source.fqdn</code> when the content was an IP address.</li> <li>Adds newly added fields in the feed.</li> <li><code>intelmq.bots.parsers.phishtank.parser</code>: Refactored code (PR#2270 by Filip Pokorn\u00fd)</li> <li>Changes feed URL to JSON format (contains more information). The URL needs to by manually updated in the configuration!</li> <li>Adds fields from the JSON feed.</li> <li><code>intelmq.bots.parsers.dshield.parser_domain</code>: Has been removed, due to the feed is discontinued. (PR#2276 by Sebastian Waldbauer)</li> <li><code>intelmq.bots.parsers.abusech.parser_ip</code>: Removed (PR#2268 by Filip Pokorn\u00fd).</li> <li><code>intelmq.bots.parsers.abusech.parser_domain</code>: Removed (PR#2268 by Filip Pokorn\u00fd).</li> <li><code>intelmq.bots.parsers.abusech.parser_feodotracker</code>: Added new parser bot (PR#2268 by Filip Pokorn\u00fd)</li> <li>Changes feed URL to JSON format (contains more information).</li> <li>Adds fields from the JSON feed.</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>: Parameter <code>type</code> is deprecated, <code>default_fields</code> should be used. (PR#2293 by Filip Pokorn\u00fd)</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>: Parameter <code>skip_header</code> now allows also integer as a fixed number of lines to skip. (PR#2313 by Filip Pokorn\u00fd)</li> <li><code>intelmq.bots.parsers.taichung.parser</code>: Removed (PR#2266 by Filip Pokorn\u00fd)</li> </ul>"},{"location":"changelog/#experts_4","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.domain_valid</code>: New bot for checking domain's validity (PR#1966 by Marius Karotkis).</li> <li><code>intelmq.bots.experts.truncate_by_delimiter.expert</code>: Cut string if its length is higher than a maximum length (PR#1967 by Marius Karotkis).</li> <li><code>intelmq.bots.experts.remove_affix</code>: Remove prefix or postfix strings from a field (PR#1965 by Marius Karotkis).</li> <li><code>intelmq.bots.experts.asn_lookup.expert</code>: Fixes update-database script on the last few days of a month (PR#2121 by Filip Pokorn\u00fd, fixes #2088).</li> <li><code>intelmq.bots.experts.threshold.expert</code>: Correctly use the standard parameter <code>redis_cache_ttl</code> instead of the previously used parameter <code>timeout</code> (PR#2155 by Karl-Johan Karlsson).</li> <li><code>intelmq.bots.experts.jinja2.expert</code>: Lift restriction on requirement jinja2 &lt; 3 (PR#2158 by Sebastian Wagner).</li> <li><code>intelmq.bots.experts.asn_lookup.expert</code>, <code>intelmq.bots.experts.domain_suffix.expert</code>, <code>intelmq.bots.experts.maxmind_geoip.expert</code>, <code>intelmq.bots.experts.recordedfuture_iprisk.expert</code>, <code>intelmq.bots.experts.tor_nodes.expert</code>: New parameter <code>autoupdate_cached_database</code> to disable automatic updates (downloads) of cached databases (PR#2180 by Sebastian Wagner).</li> <li><code>intelmq.bots.experts.url.expert</code>: New bot for extracting additional information from <code>source.url</code> and/or <code>destination.url</code> (PR#2315 by Filip Pokorn\u00fd).</li> </ul>"},{"location":"changelog/#outputs_3","title":"Outputs","text":"<ul> <li>Removed <code>intelmq.bots.outputs.postgresql</code>: this bot was marked as deprecated in 2019 announced to be removed in version 3 of IntelMQ (PR#2045 by Birger Schacht).</li> <li>Added <code>intelmq.bots.outputs.rpz_file.output</code> to create RPZ files (PR#1962 by Marius Karotkis).</li> <li>Added <code>intelmq.bots.outputs.bro_file.output</code> to create Bro intel formatted files (PR#1963 by Marius Karotkis).</li> <li><code>intelmq.bots.outputs.templated_smtp.output</code>:</li> <li>Add new function <code>from_json()</code> (which just calls <code>json.loads()</code> in the standard Python environment), meaning the Templated SMTP output bot can take strings containing JSON documents and do the formatting itself (PR#2120 by Karl-Johan Karlsson).</li> <li>Lift restriction on requirement jinja2 &lt; 3 (PR#2158 by Sebastian Wagner).</li> <li><code>intelmq.bots.outputs.sql</code>:</li> <li>For PostgreSQL, escape Nullbytes in text to prevent \"unsupported Unicode escape sequence\" issues (PR#2223 by Sebastian Wagner, fixes #2203).</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>Feeds: Add documentation for newly supported dataplane feeds, see above (PR#2102 by Mikk Margus M\u00f6ll).</li> <li>Installation: Restructured the whole document to make it clearer and straight-forward (PR#2113 by Sebastian Wagner).</li> <li>Add workaround for https://github.com/sphinx-doc/sphinx/issues/10701 (PR#2225 by Sebastian Wagner, kudos @yarikoptic, fixes #2224).</li> <li>Fix wrong operator for list-contains-value operation in sieve expert documentation (PR#2256 by Filip Pokorn\u00fd).</li> <li>Added documentation on <code>default_fields</code> parameter (PR#2293 by Filip Pokorn\u00fd).</li> <li>Updated documentation on <code>skip_header</code> parameter (PR#2313 by Filip Pokorn\u00fd).</li> <li>Viriback Unsafe Sites feed replaced with Viriback C2 Tracker. (PR#2266 by Filip Pokorn\u00fd)</li> <li>Netlab 360 Mirai Scanner feed removed as it is discontinued. (PR#2266 by Filip Pokorn\u00fd)</li> <li>Benkow Malware Panels Tracker feed changed parser configuration. (PR#2266 by Filip Pokorn\u00fd)</li> <li>Taichung feed removed as it is discontinued. (PR#2266 by Filip Pokorn\u00fd)</li> <li>Added new URL Expert bot. (PR#2315 by Filip Pokorn\u00fd)</li> </ul>"},{"location":"changelog/#packaging_2","title":"Packaging","text":"<ul> <li>Remove deleted <code>intelmq.bots.experts.sieve.validator</code> from executables in <code>setup.py</code> (PR#2256 by Filip Pokorn\u00fd).</li> <li>Run the geoip database cron-job twice a week (PR#2285 by Filip Pokorn\u00fd).</li> </ul>"},{"location":"changelog/#tests_3","title":"Tests","text":"<ul> <li>Add GitHub Action to run regexploit on all Python, JSON and YAML files (PR#2059 by Sebastian Wagner).</li> <li><code>intelmq.lib.test</code>:</li> <li>Decorator <code>skip_ci</code> also detects <code>dpkg-buildpackage</code> environments by checking the environment variable <code>DEB_BUILD_ARCH</code> (PR#2123 by Sebastian Wagner).</li> <li>Fixing regex to catchall after python version and process ID, add tests for it (PR#2216 by Sebastian Waldbauer and Sebastian Wagner, fixes #2185)</li> <li>Also test on Python 3.10 (PR#2140 by Sebastian Wagner).</li> <li>Switch from nosetests to pytest, as the former does not support Python 3.10 (PR#2140 by Sebastian Wagner).</li> <li>CodeQL Github Actions <code>exponential backtracking on strings</code> fixed. (PR#2148 by Sebastian Waldbauer, fixes #2138)</li> <li>Reverse DNS expert tests: remove outdated failing test <code>test_invalid_ptr</code> (PR#2208 by Sebastian Wagner, fixes #2206).</li> <li>Add test dependency <code>requests_mock</code> to the <code>development</code> extra requirements in <code>setup.py</code> (PR#2210 by Sebastian Wagner).</li> <li>Threshold Expert tests: Use environment variable <code>INTELMQ_PIPELINE_HOST</code> as redis host, analogous to other tests (PR#2209 by Sebastian Wagner, fixes #2207).</li> <li>Remove codecov action as it failed regularly (PR#2237 by Sebastian Wagner, fixes #2229).</li> <li><code>intelmq.lib.test.BotTestCase</code>: Adds <code>skip_checks</code> variable to not fail on non-empty messages from calling <code>check</code> function (PR#2315 by Filip Pokorn\u00fd).</li> </ul>"},{"location":"changelog/#tools_3","title":"Tools","text":"<ul> <li><code>intelmqctl</code>:</li> <li>fix process manager initialization if run non-interactively, as intelmqdump does it (PR#2189 by Sebastian Wagner, fixes 2188).</li> <li><code>check</code>: handle <code>SyntaxError</code> in bot modules and report it without breaking execution (fixes #2177)</li> <li>Privilege drop before logfile creation (PR#2277 by Sebastian Waldbauer, fixes 2176)</li> <li><code>intelmqsetup</code>: Revised installation of manager by building the static files at setup, not build time, making it behave more meaningful. Requires intelmq-manager &gt;= 3.1.0 (PR#2198 by Sebastian Wagner, fixes #2197).</li> <li><code>intelmqdump</code>: Respected global and per-bot custom settings of <code>logging_path</code> (fix #1605).</li> </ul>"},{"location":"changelog/#contrib_2","title":"Contrib","text":"<ul> <li>logrotate: Move compress and ownership rules to the IntelMQ-blocks to prevent that they apply to other files (PR#2111 by Sebastian Wagner, fixes #2110).</li> </ul>"},{"location":"changelog/#known-issues_3","title":"Known issues","text":"<p>This is short list of the most important known issues. The full list can be retrieved from GitHub. - intelmq_psql_initdb does not work for SQLite (#2202). - intelmqsetup: should install a default state file (#2175). - Misp Expert - Crash if misp event already exist (#2170). - Turris greylist has been updated (#2167). - Spamhaus CERT parser uses wrong field (#2165). - Custom headers ignored in HTTPCollectorBot (#2150). - Missing commas in SQL query for separate Events table (#2125). - intelmqctl log: parsing syslog does not work (#2097). - Bash completion scripts depend on old JSON-based configuration files (#2094). - Bot configuration examples use JSON instead of YAML (#2066). - Bots started with IntelMQ-API/Manager stop when the webserver is restarted (#952). - Corrupt dump files when interrupted during writing (#870).</p>"},{"location":"changelog/#302-2021-09-10","title":"3.0.2 (2021-09-10)","text":""},{"location":"changelog/#core_5","title":"Core","text":"<ul> <li><code>intelmq.lib.bot.CollectorBot</code>: Fixed an issue with within the <code>new_report</code> function, which re-loads the harmonization file after a new incoming dataset, which leads to CPU drain and decreased performance (PR#2106 by Sebastian Waldbauer, fixes #2098).</li> <li><code>intelmq.lib.bot.Bot</code>: Make private members <code>__is_multithreadable</code> and <code>__collector_empty_process</code> protected members <code>_is_multithreadable</code> and <code>_collector_empty_process</code> to make them easily modifiable by Bot classes (PR#2109 by Sebastian Wagner, fixes #2108).   Also affected and adapted bots by this change are:</li> <li><code>intelmq.bots.collectors.api.collector_api</code></li> <li><code>intelmq.bots.collectors.stomp.collector</code></li> <li><code>intelmq.bots.experts.splunk_saved_search.expert</code></li> <li><code>intelmq.bots.experts.threshold.expert</code></li> <li><code>intelmq.bots.outputs.file.output</code></li> <li><code>intelmq.bots.outputs.misp.output_api</code></li> <li><code>intelmq.bots.outputs.misp.output_feed</code></li> <li><code>intelmq.bots.outputs.tcp.output</code></li> <li><code>intelmq.bots.outputs.udp.output</code></li> <li><code>intelmq.lib.cache</code>: Do not create the Cache class if the host is null, allows deactivating the bot statistics (PR#2104 by Sebastian Waldbauer, fixes #2103).</li> </ul>"},{"location":"changelog/#bots_5","title":"Bots","text":""},{"location":"changelog/#experts_5","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.domain_suffix.expert</code>: Only print skipped database update message if verbose mode is active (PR#2107 by Sebastian Wagner, fixes #2016).</li> </ul>"},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>Add configuration upgrade steps for 3.0 to NEWS (PR#2101 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#known-issues_4","title":"Known issues","text":"<p>See open bug reports for a more detailed list. - ParserBot: erroneous raw line recovery in error handling (#1850).</p>"},{"location":"changelog/#301-2021-09-02","title":"3.0.1 (2021-09-02)","text":""},{"location":"changelog/#configuration_2","title":"Configuration","text":""},{"location":"changelog/#core_6","title":"Core","text":"<ul> <li><code>intelmq.lib.bot_debugger</code>: Fix accessing the bot's destination queues (PR#2027 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.lib.pipeline</code>: Fix handling of <code>load_balance</code> parameter (PR#2027 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.lib.bot</code>: Fix handling of parameter <code>destination_queues</code> if value is an empty dictionary (PR#2051 by Sebastian Wagner, fixes #2034).</li> </ul>"},{"location":"changelog/#bots_6","title":"Bots","text":""},{"location":"changelog/#collectors_4","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.shodan.collector_stream</code>: Fix access to parameters, the bot wrongly used <code>self.parameters</code> (PR#2020 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.bots.collectors.mail.collector_mail_attach</code>: Add attachment file name as <code>extra.file_name</code> also if the attachment is not compressed (PR#2021 by Alex Kaplan).</li> <li><code>intelmq.bots.collectors.http.collector_http_stream</code>: Fix access to parameters, the bot wrongly used <code>self.parameters</code> (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#parsers_4","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>: Map <code>Payload.domain</code> to <code>destination.fqdn</code> instead of <code>extra.payload.domain</code> as it matches to <code>destination.ip</code> from <code>DestinationIp</code> (PR#2023 by Sebastian Wagner).</li> <li>Removed <code>intelmq.bots.parsers.malwaredomains</code> because the upstream data source (malwaredomains.com) does not exist anymore (PR#2026 by Birger Schacht, fixes #2024).</li> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Add support for feed \"Vulnerable SMTP Server\" (PR#2037 by Mikk Margus M\u00f6ll).</li> <li>Fix differentiation between feeds \"Accessible HTTP\" and \"Vulnerable HTTP\" (PR#2037 by Mikk Margus M\u00f6ll, fixes #1984).</li> <li>Add support for the new feeds Microsoft Sinkhole Events Report, Microsoft Sinkhole HTTP Events Report (PR#2036 by Birger Schacht).</li> <li>Complement feed mappings and documentation for feeds with IPv4 and IPv6 variants (PR#2046 by Mikk Margus M\u00f6ll and Sebastian Wagner).</li> <li>Feed names with and without the optional IPv4/IPv6 postfix can be used now consistently.</li> <li>Add support for feed \"Honeypot HTTP Scan\" (PR#2047 by Mikk Margus M\u00f6ll).</li> <li>Update filename mapping for changed filename of feed \"Accessible-MSRDPUDP\" (PR#2060 by abr4xc).</li> </ul>"},{"location":"changelog/#experts_6","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.gethostbyname.expert</code>: Handle numeric values for the <code>gaierrors_to_ignore</code> parameter (PR#2073 by Sebastian Wagner, fixes #2072).</li> <li><code>intelmq.bots.experts.filter.expert</code>: Fix handling of empty-string parameters <code>not_after</code> and <code>not_before</code> (PR#2075 by Sebastian Wagner, fixes #2074).</li> </ul>"},{"location":"changelog/#outputs_4","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.mcafee.output_esm_ip</code>: Fix access to parameters, the bot wrongly used <code>self.parameters</code> (by Sebastian Wagner).</li> <li><code>intelmq.bots.outputs.misp.output_api</code>: Fix access to parameters, the bot wrongly used <code>self.parameters</code> (by Sebastian Wagner).</li> <li><code>intelmq.bots.outputs.smtp.output</code>: Add <code>Content-Disposition</code>-header to the attachment, fixing the display in Mail Clients as actual attachment (PR#2052 by Sebastian Wagner, fixes #2018).</li> </ul>"},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>Various formatting fixes (by Sebastian Wagner).</li> <li>Removed the malwaredomains feed from the feeds list because the upstream data source (malwaredomains.com) does not exist anymore (PR#2026 by Birger Schacht, fixes #2024).</li> <li>Update Docker installation instructions (PR#2035 by Sebastian Waldbauer).</li> </ul>"},{"location":"changelog/#packaging_3","title":"Packaging","text":"<ul> <li>intelmq-update-database crontab: Add missing <code>recordedfuture_iprisk</code> update call (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tests_4","title":"Tests","text":"<ul> <li>Replace calls to deprecated/undocumented <code>logging.warn</code> with <code>logging.warning</code> (by Sebastian Wagner, fixes #2013).</li> <li><code>intelmq.tests.bots.experts.rdap.test_expert</code>: Declare cache use, fixes build failures (by Sebastian Wagner, fixes #2014).</li> <li><code>intelmq.tests.bots.collectors.mail.test_collector_attach</code>: Test text attachment (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tools_4","title":"Tools","text":"<ul> <li><code>intelmqctl</code>:</li> <li>Also honour parameters from environment variables (PR#2068 by Sebastian Wagner, fixes #2063).</li> <li>Fix management actions (start/stop/status/reload/restart) for groups (PR#2086 by Sebastian Wagner, fixes #2085).</li> <li>Do not use hardcoded logging path in <code>/opt/intelmq</code>, use the internal default instead (PR#2092 by Sebastian Wagner, fixes #2091).</li> </ul>"},{"location":"changelog/#known-issues_5","title":"Known issues","text":"<p>See open bug reports for a more detailed list. - ParserBot: erroneous raw line recovery in error handling (#1850).</p>"},{"location":"changelog/#300-2021-07-02","title":"3.0.0 (2021-07-02)","text":""},{"location":"changelog/#configuration_3","title":"Configuration","text":"<ul> <li>The <code>BOTS</code> file is no longer used and has been removed (by Sebastian Wagner).</li> <li>The <code>defaults.conf</code> file is no longer used and has been removed (PR#1814 by Birger Schacht).</li> <li>The <code>pipeline.conf</code> file is no longer used and has been removed (PR#1849 by Birger Schacht).</li> <li>The <code>runtime.conf</code> was renamed to <code>runtime.yaml</code> and is now in YAML format (PR#1812 by Birger Schacht).</li> </ul>"},{"location":"changelog/#core_7","title":"Core","text":"<ul> <li><code>intelmq.lib.harmonization</code>:</li> <li>New class <code>ClassificationTaxonomy</code> with fixed list of taxonomies and sanitiation (by Sebastian Wagner).</li> <li><code>intelmq.lib.bot</code>:</li> <li>Handle <code>InvalidValue</code> exceptions upon message retrieval by dumping the message instead of repeating endlessly (#1765, PR#1766 by Filip Pokorn\u00fd).</li> <li>Rewrite of the parameter loading and handling, getting rid of the <code>parameters</code> member (PR#1729 by Birger Schacht).</li> <li>The pipeline is now initialized before the call of <code>init</code> to allow bots accessing data directly on startup/initialization for cleanup or maintenance tasks (PR#1982 by Sebastian Wagner).</li> <li><code>intelmq.lib.exceptions</code>:</li> <li><code>InvalidValue</code>: Add optional parameter <code>object</code> (PR#1766 by Filip Pokorn\u00fd).</li> <li><code>intelmq.lib.utils</code>:</li> <li>New function <code>list_all_bots</code> to list all available/installed bots as replacement for the BOTS file (#368, #552, #644, #757, #1069, #1750, PR#1751 by Sebastian Waldbauer).</li> <li>New function <code>get_bots_settings</code> to return the effective bot parameters, with global parameters applied (PR#1928 by Sebastian Wagner, #1927).</li> <li>Removed deprecated function <code>create_request_session_from_bot</code> (PR#1997 by Sebastian Wagner, #1404).</li> <li><code>parse_relative</code>: Add support for parsing minutes and seconds (PR#1857 by Sebastian Wagner).</li> <li><code>intelmq.lib.bot_debugger</code>:</li> <li>Set bot's <code>logging_level</code> directly in <code>__init__</code> before the bot's initialization by changing the default value (by Sebastian Wagner).</li> <li>Rewrite <code>load_configuration_patch</code> by adapting it to the parameter and configuration rewrite (by Sebastian Wagner).</li> <li>Do not rely on the runtime configuration's <code>group</code> setting of bots to determine the required message type of messages given on the command line (PR#1949 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#development_4","title":"Development","text":"<ul> <li><code>rewrite_config_files.py</code>: Removed obsolete BOTS-file-related rewriting functionality (by Sebastian Wagner, #1543).</li> <li>A GitHub Action that checks for reuse compliance of all the license and copyright headers was added (PR#1976 by Birger Schacht).</li> <li>PyYAML is no longer a required dependency for development environments, all calls to it have been replaced by ruamel.yaml (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#data-format_2","title":"Data Format","text":"<p>The IntelMQ Data Harmonization (\"DHO\") is renamed to IntelMQ Data Format (\"IDF\"). Internal files remain and work the same as before (PR#1818 by Sebastian Waldbauer, fixes 1810). Update allowed classification fields to version 1.3 (2021-05-18) (by Sebastian Wagner, fixes #1409, #1476). - The taxonomy <code>abusive content</code> has been renamed to <code>abusive-content</code>. - The taxonomy <code>information content security</code> has been renamed to <code>information-content-security</code>.   - The validation of type <code>unauthorised-information-access</code> has been fixed, a bug prevented the use of it.   - The validation of type <code>unauthorised-information-modification</code> has been fixed, a bug prevented the use of it.   - The type <code>leak</code> has been renamed to <code>data-leak</code>.   - The type <code>dropzone</code> has been removed. Taxonomy <code>other</code> with type <code>other</code> and identifier <code>dropzone</code> can be used instead. Ongoing discussion in the RSIT WG. - The taxonomy <code>intrusion attempts</code> has been renamed to <code>intrusion-attempts</code>. - For the taxonomy intrusions (PR#1993 by Sebastian Wagner, addresses #1409):   - The type <code>compromised</code> has been renamed to <code>system-compromise</code>.   - The type <code>unauthorized-command</code> has been merged into <code>system-compromise</code>.   - The type <code>unauthorized-login</code> has been merged into <code>system-compromise</code>.   - The type <code>backdoor</code> has been merged into <code>system-compromise</code> (PR#1995 by Sebastian Wagner, addresses #1409).   - The type <code>defacement</code> has been merged into taxonomy <code>information-content-security</code>, type <code>unauthorised-information-modification</code> (PR#1994 by Sebastian Wagner, addresses #1409). - The taxonomy <code>information gathering</code> has been rename to <code>information-gathering</code>. - The taxonomy <code>malicious code</code> has been renamed to <code>malicious-code</code>.   - The type <code>c2server</code> has been renamed to <code>c2-server</code>.   - The type <code>malware</code> has been integrated into <code>infected-system</code> and <code>malware-distribution</code>, respectively (PR#1917 by Sebastian Wagner addresses #1409).   - The type <code>ransomware</code> has been integrated into <code>infected-system</code>.   - The type <code>dga domain</code> has been moved to the taxonomy <code>other</code> renamed <code>dga-domain</code> (PR#1992 by Sebastian Wagner fixes #1613). - For the taxonomy 'availability', the type <code>misconfiguration</code> is new. - For the taxonomy 'other', the type <code>unknown</code> has been renamed to <code>undetermined</code>. - For the taxonomy 'vulnerable':   - The type <code>vulnerable client</code> has been renamed to <code>vulnerable-system</code>.   - The type <code>vulnerable service</code> has been renamed to <code>vulnerable-system</code>.</p>"},{"location":"changelog/#bots_7","title":"Bots","text":"<ul> <li>The parameters handling of numerous bots has been refactored (PR#1751, PR#1729, by Birger Schacht, Sebastian Wagner, Sebastian Waldbauer).</li> </ul>"},{"location":"changelog/#collectors_5","title":"Collectors","text":"<ul> <li>Remove <code>intelmq.bots.collectors.xmpp</code>: one of the dependencies of the bot was deprecated and according to a short survey on the IntelMQ   users mailinglist, the bot is not used by anyone. (https://lists.cert.at/pipermail/intelmq-users/2020-October/000177.html, PR#1761 by Birger Schacht, closes #1614).</li> <li><code>intelmq.bots.collectors.mail._lib</code>: Added parameter <code>mail_starttls</code> for STARTTLS in all mail collector bots (PR#1831 by Marius Karotkis, fixes #1128).</li> <li>Added <code>intelmq.bots.collectors.fireeye</code>: A bot that collects indicators from Fireeye MAS appliances (PR#1745 by Christopher Schappelwein).</li> <li><code>intelmq.bots.collectors.api.collector_api</code> (PR#1987 by Mikk Margus M\u00f6ll, fixes #1986):</li> <li>Added UNIX socket capability.</li> <li>Correctly close the IOLoop in the shutdown method to fix reload.</li> <li><code>intelmq.bots.collectors.rt.collector_rt</code> (PR#1997 by Sebastian Wagner, #1404):</li> <li>compatibility with the deprecated parameter <code>unzip_attachment</code> (removed in 2.1.0) was removed.</li> </ul>"},{"location":"changelog/#parsers_5","title":"Parsers","text":"<ul> <li>Added <code>intelmq.bots.parsers.fireeye</code>: A bot that parses hashes and URLs from Fireeye MAS indicators (PR#1745 by Christopher Schappelwein).</li> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Improved the feed-mapping and all conversion functions (PR#1971 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>:</li> <li>Fix handling of empty string values for parameter <code>time_format</code> (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#experts_7","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.domain_suffix.expert</code>:</li> <li>Added <code>--update-database</code> option to update domain suffix database (by Sebastian Wagner).</li> <li>Fix <code>check</code> method: load database with UTF-8 encoding explicitly (by Sebastian Wagner).</li> <li>Added <code>intelmq.bots.experts.http.expert_status</code>: A bot that fetches the HTTP Status for a given URI and adds it to the message (PR#1789 by Birger Schacht, fixes #1047 partly).</li> <li>Added <code>intelmq.bots.experts.http.expert_content</code>: A bot that fetches an HTTP resource and checks if it contains a specific string (PR#1811 by Birger Schacht).</li> <li>Added <code>intelmq.bots.experts.lookyloo.expert</code>: A bot that sends requests to a lookyloo instance &amp; adds <code>screenshot_url</code> to the event (PR#1844 by Sebastian Waldbauer, fixes #1048).</li> <li>Added <code>intelmq.bots.experts.rdap.expert</code>: A bot that checks the rdap protocol for an abuse contact for a given domain (PR#1881 by Sebastian Waldbauer and Sebastian Wagner).</li> <li><code>intelmq.bots.experts.sieve.expert</code>:</li> <li>Add operators for comparing lists and sets (PR#1895 by Mikk Margus M\u00f6ll):<ul> <li><code>:equals</code></li> <li><code>:overlaps</code></li> <li><code>:supersetof</code></li> <li><code>:subsetof</code></li> <li><code>:equals</code></li> </ul> </li> <li>Add support for comparing boolean values (PR#1895 by Mikk Margus M\u00f6ll).</li> <li>Add support for rule negation with <code>!</code> (PR#1895, PR#1923 by Mikk Margus M\u00f6ll).</li> <li>Add support for values types float, int, bool and string for all lists items (PR#1895 by Mikk Margus M\u00f6ll).</li> <li>Add actions for lists (PR#1895 by Mikk Margus M\u00f6ll).<ul> <li><code>append</code></li> <li><code>append!</code> (forced/overwriting)</li> </ul> </li> <li>Rewrite the rule-processing and operator-handling code to make it more comprehensible and extensible (PR#1895, PR#1923 by Mikk Margus M\u00f6ll).</li> <li>Nested if statements, plus mixed actions and actions in the same scope (PR #1923 by Mikk Margus M\u00f6ll).</li> <li>The attribute manipulation actions add, add! and update support non-string (bool/int/float) values (PR #1923 by Mikk Margus M\u00f6ll).</li> <li>Drop the <code>:notcontains</code> operator, as it made is redundant by generic negation: <code>! foo :contains 'x'</code> instead of <code>foo :notcontains 'x'</code> (PR#1957 by Mikk Margus M\u00f6ll).</li> <li>Split string and numeric matches into single- and multivalued variants, with the relevant new operators <code>:in</code>, <code>:containsany</code> and <code>:regexin</code> for string lists, and <code>:in</code> for numeric value lists (PR#1957 by Mikk Margus M\u00f6ll).<ul> <li>Removed the <code>==</code> operator for lists, with the previous meaning of <code>:in</code>. Have a look at the NEWS.md for more information.</li> </ul> </li> <li>Added <code>intelmq.bots.experts.uwhoisd</code>: A bot that fetches the whois entry from a uwhois-instance (PR#1918 by Rapha\u00ebl Vinot).</li> <li>Removed deprecated <code>intelmq.bots.experts.ripencc_abuse_contact.expert</code>. It was replaced by <code>intelmq.bots.experts.ripe.expert</code> and marked as deprecated in 2.0.0.beta1 (PR#1997 by Sebastian Wagner, #1404).</li> <li><code>intelmq.bots.experts.modify.expert</code>:</li> <li>Removed compatibility with deprecated configuration format before 1.0.0.dev7 (PR#1997 by Sebastian Wagner, #1404).</li> <li>Added <code>intelmq.bots.experts.aggregate</code>: A bot that aggregate events based upon given fields &amp; a timespan (PR#1959 by Sebastian Waldbauer).</li> <li>Added <code>intelmq.bots.experts.tuency</code>: A bot that queries the IntelMQ API of a tuency instance (PR#1857 by Sebastian Wagner, fixes #1856).</li> </ul>"},{"location":"changelog/#outputs_5","title":"Outputs","text":"<ul> <li>Remove <code>intelmq.bots.outputs.xmpp</code>: one of the dependencies of the bot was deprecated and according to a short survey on the IntelMQ   users mailinglist, the bot is not used by anyone. (https://lists.cert.at/pipermail/intelmq-users/2020-October/000177.html, PR#1761 by Birger Schacht, closes #1614)</li> <li><code>intelmq.bots.outputs.smtp</code>: Add more debug logging (PR#1949 by Sebastian Wagner).</li> <li>Added new bot <code>intelmq.bots.outputs.templated_smtp</code> (PR#1901 by Karl-Johan Karlsson).</li> </ul>"},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>Updated user and developer documentation to reflect the removal of the BOTS file (PR#1780 by Birger Schacht).</li> <li>Bots documentation:</li> <li>Added anchors to all bot sections derived from the module names for easier linking (PR#1943 by Sebastian Wagner fixes part of certtools/intelmq-api#4).</li> <li>License and copyright information was added to all the bots (PR#1976 by Birger Schacht).</li> <li>Added documentation on the EventDB (PR#1955 by Birger Schacht, PR#1985 by Sebastian Wagner).</li> <li>Added TimescaleDB for time-series documentation (PR#1990 by Sebastian Waldbauer).</li> <li>Improved n6 interoperability documentation by adding more graphs and illustrations (PR#1991 by Sebastian Wagner).</li> <li>Feed documentation generation: fix and simplify formatting of parameters of types lists, non-string values have been ill-treated (by Sebastian Wagner).</li> <li>Added documentation on abuse-contact look-ups (PR#2021 by Sebastian Waldbauer and Sebastian Wagner).</li> </ul>"},{"location":"changelog/#packaging_4","title":"Packaging","text":"<ul> <li>Docker images tagged with <code>certat/intelmq-full:develop</code> are built and published on every push to the develop branch (PR#1753 by Sebastian Waldbauer).</li> <li>Adapt packaging to IntelMQ 3.0 changes: ruamel.yaml dependency, changed configuration, updated database-update scripts (by Birger Schacht and Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tests_5","title":"Tests","text":"<ul> <li><code>intelmq.tests.lib.test_bot</code>:</li> <li>Add test case for a raised <code>InvalidValue</code> exception upon message retrieval (#1765, PR#1766 by Filip Pokorn\u00fd and Sebastian Wagner).</li> <li><code>intelmq.lib.test</code>:</li> <li>Compare content of the <code>output</code> field as dictionaries, not as string in <code>assertMessageEqual</code> (PR#1975 by Karl-Johan Karlsson).</li> <li>Support multiple calls to <code>run_bot</code> from test cases (PR#1989 by Sebastian Wagner).<ul> <li>Split <code>prepare_source_queue</code> out of <code>prepare_bot</code>.</li> <li>Added new optional parameter <code>stop_bot</code> to <code>run_bot</code>.</li> </ul> </li> </ul>"},{"location":"changelog/#tools_5","title":"Tools","text":"<ul> <li>intelmqdump (PR#1997 by Sebastian Wagner, #1404):</li> <li>The command <code>e</code> for deleting single entries by given IDs has been merged into the command <code>d</code> (\"delete\"), which can now delete either entries by ID or the whole file.</li> <li>The command <code>v</code> for editing entries has been renamed to <code>e</code> (\"edit\").</li> </ul>"},{"location":"changelog/#contrib_3","title":"Contrib","text":"<ul> <li>eventdb:</li> <li>Added <code>separate-raws-table.sql</code> (PR#1985 by Sebastian Wagner).</li> <li>cron-jobs: Removed the deprecated update scripts (PR#1997 by Sebastian Wagner, #1404):</li> <li><code>update-asn-data</code></li> <li><code>update-geoip-data</code></li> <li><code>update-tor-nodes</code></li> <li><code>update-rfiprisk-data</code>   in favor of the built-in update-mechanisms (see the bots' documentation). A crontab file for calling all new update command can be found in <code>contrib/cron-jobs/intelmq-update-database</code>.</li> </ul>"},{"location":"changelog/#known-issues_6","title":"Known issues","text":"<ul> <li>ParserBot: erroneous raw line recovery in error handling (#1850).</li> <li>ruamel.yaml loader and dumper: human readability bug / support for comments (#2003).</li> </ul>"},{"location":"changelog/#233-2021-05-31","title":"2.3.3 (2021-05-31)","text":""},{"location":"changelog/#core_8","title":"Core","text":"<ul> <li><code>intelmq.lib.upgrade</code>:</li> <li>Added <code>v233_feodotracker_browse</code> for Abuse.ch Feodotracker Browse parser configuration adaption (PR#1941 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#bots_8","title":"Bots","text":""},{"location":"changelog/#parsers_6","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>:</li> <li>Add support for new field <code>SourceIpInfo.SourceIpv4Int</code> (PR#1940 by Sebastian Wagner).</li> <li>Fix mapping of \"ConnectionType\" fields, this is not <code>protocol.application</code>. Now mapped to <code>extra.*.connection_type</code> (PR#1940 by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.shadowserver._config</code>:</li> <li>Add support for the new feeds Honeypot-Amplification-DDoS-Events, Honeypot-Brute-Force-Events, Honeypot-Darknet, IP-Spoofer-Events, Sinkhole-Events, Sinkhole-HTTP-Events, Vulnerable-Exchange-Server, Sinkhole-Events-HTTP-Referer (PR#1950, PR#1952, PR#1953, PR#1954, PR#1970 by Birger Schacht and Sebastian Wagner, PR#1971 by Mikk Margus M\u00f6ll).</li> </ul>"},{"location":"changelog/#experts_8","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.splunk_saved_search.expert</code>:</li> <li>fixed erroneous string formatting (PR#1960 by Karl-Johan Karlsson).</li> </ul>"},{"location":"changelog/#outputs_6","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.smtp.output</code>:</li> <li>Handle empty \"fieldnames\" parameter by sending no attachment (PR#1932 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#documentation_7","title":"Documentation","text":"<ul> <li><code>dev/data-harmonization</code> renamed to <code>dev/data-format</code> (by Sebastian Waldbauer)</li> <li>Feeds:</li> <li>Fixed Abuse.ch Feodotracker Browse parser configuration (PR#1941 by Sebastian Wagner fixes #1938).</li> </ul>"},{"location":"changelog/#tests_6","title":"Tests","text":"<ul> <li><code>intelmq.bots.parsers.html_table</code>:</li> <li>Added testcase for Abuse.ch Feodotracker Browse (PR#1941 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tools_6","title":"Tools","text":"<ul> <li>intelmqsetup:</li> <li>Set ownershop of state file path and its parent directory (PR#1911 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#known-issues_7","title":"Known issues","text":"<ul> <li>ParserBot: erroneous raw line recovery in error handling (#1850).</li> </ul>"},{"location":"changelog/#232-2021-04-27","title":"2.3.2 (2021-04-27)","text":""},{"location":"changelog/#core_9","title":"Core","text":"<ul> <li><code>intelmq.lib.harmonization</code>:</li> <li><code>TLP</code> type: accept value \"yellow\" for TLP level AMBER.</li> </ul>"},{"location":"changelog/#bots_9","title":"Bots","text":""},{"location":"changelog/#collectors_6","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.shadowserver.collector_reports_api</code>:</li> <li>Handle timeouts by logging the error and continuing to next report (PR#1852 by Marius Karotkis and Sebastian Wagner, fixes #1823).</li> </ul>"},{"location":"changelog/#parsers_7","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver.config</code>:</li> <li>Parse and harmonize field <code>end_time</code> as date in Feeds \"Drone-Brute-Force\" and \"Amplification-DDoS-Victim\" (PR#1833 by Mikk Margus M\u00f6ll).</li> <li>Add conversion function <code>convert_date_utc</code> which assumes UTC and sanitizes the data to datetime (by Sebastian Wagner, fixes #1848).</li> <li><code>intelmq.bots.parsers.shadowserver.parser_json</code>:</li> <li>Use the overwrite parameter for optionally overwriting the \"feed.name\" field (by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>:</li> <li>Handle fields <code>timestamp</code>, <code>timestamp_utc</code>, <code>source_ip</code>, <code>source_port</code>, <code>destination_ip</code>, <code>destination_port</code>, <code>computer_name</code>, <code>bot_id</code>, <code>asn</code>, <code>geo</code> in <code>Payload</code> of CTIP Azure format (PR#1841, PR#1851 and PR#1879 by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.shodan.parser</code>:</li> <li>Added support for unique keys and verified vulns (PR#1835 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>:</li> <li>Fix parsing in whitespace edge case in comments (PR#1870 by Alex Kaplan, fixes #1862).</li> </ul>"},{"location":"changelog/#experts_9","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.modify</code>:</li> <li>Add a new rule to the example configuration to change the type of malicious-code events to <code>c2server</code> if the malware name indicates c2 (PR#1854 by Sebastian Wagner).</li> <li><code>intelmq.bots.experts.gethostbyname.expert</code>:</li> <li>Fix handling of parameter <code>gaierrors_to_ignore</code> with value <code>None</code> (PR#1890 by Sebastian Wagner, fixes #1886).</li> </ul>"},{"location":"changelog/#outputs_7","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.elasticsearch</code>: Fix log message on required elasticsearch library message (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#documentation_8","title":"Documentation","text":"<ul> <li><code>dev/data-harmonization</code>: Fix taxonomy name \"information gathering\" should be \"information-gathering\" (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tests_7","title":"Tests","text":"<ul> <li><code>intelmq.tests.bots.parsers.microsoft.test_parser_ctip_azure</code>:</li> <li>Add test case for TLP level \"YELLOW\".</li> </ul>"},{"location":"changelog/#known-issues_8","title":"Known issues","text":"<ul> <li>ParserBot: erroneous raw line recovery in error handling (#1850).</li> </ul>"},{"location":"changelog/#231-2021-03-25","title":"2.3.1 (2021-03-25)","text":""},{"location":"changelog/#configuration_4","title":"Configuration","text":""},{"location":"changelog/#core_10","title":"Core","text":"<ul> <li><code>intelmq.lib.utils</code>:</li> <li><code>log</code>: Handle null value for logging parameter <code>logging_max_size</code> (PR#1786 by Sebastian Wagner, fixes #1778).</li> <li><code>intelmq.lib.pipeline</code>:</li> <li><code>Amqp._get_queues</code>: Check virtual host when retrieving queue sizes. Fixes output of <code>intelmqctl check</code> for orphaned queues if AMQP is used and the AMQP user has access to more virtual hosts (PR#1830 by Sebastian Wagner, fixes #1746).</li> </ul>"},{"location":"changelog/#bots_10","title":"Bots","text":""},{"location":"changelog/#collectors_7","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.shadowserver.collector_reports_api</code>: Added debug logging to show number of downloaded reports and download size (PR#1826 by Sebastian Wagner, partly addresses #1688 and #1823).</li> </ul>"},{"location":"changelog/#parsers_8","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>:</li> <li>Adapt parser to new upstream format for events of category \"bruteforce\" (PR#1795 by Sebastian Wagner, fixes 1794).</li> <li><code>intelmq.bots.parsers.shodan.parser</code>:</li> <li>Support nested conversions, improved protocol detection and extended Shodan parser mappings (PR#1821 by Mikk Margus M\u00f6ll).</li> </ul>"},{"location":"changelog/#documentation_9","title":"Documentation","text":"<ul> <li>Add missing newlines at end of <code>docs/_static/intelmq-manager/*.png.license</code> files (PR#1785 by Sebastian Wagner, fixes #1777).</li> <li>Ecosystem: Revise sections on intelmq-cb-mailgen and fody (PR#1792 by Bernhard Reiter).</li> <li>intelmq-api: Add documentation about necessary write permission for the session database file (PR#1798 by Birger Schacht, fixes intelmq-api#23).</li> <li>FAQ: Section on redis socket permissions: set only minimal necessary permissions (PR#1809 by Sebastian Wagner).</li> <li>Add document on hardware requirements (PR#1811 by Sebastian Wagner).</li> <li>Feeds: Added Shodan Country Stream (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tests_8","title":"Tests","text":"<ul> <li>Add missing newlines at end of various test input files (PR#1785 by Sebastian Wagner, fixes #1777).</li> <li><code>intelmq.tests.bots.parsers.shodan.test_parser</code>: Add test cases for new code (PR#1821 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.tests.lib.test_harmonization.test_datetime_convert</code>: Only run this test in timezone UTC (PR#1825 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tools_7","title":"Tools","text":"<ul> <li><code>intelmqsetup</code>:</li> <li>Also cover required directory layout and file permissions for <code>intelmq-api</code> (PR#1787 by Sebastian Wagner, fixes #1783).</li> <li>Also cover webserver and sudoers configuration for <code>intelmq-api</code> and <code>intelmq-manger</code> (PR#1805 by Sebastian Wagner, fixes #1803).</li> <li><code>intelmqctl</code>:</li> <li>Do not log an error message if logging to file is explicitly disabled, e.g. in calls from <code>intelmsetup</code>. The error message would not be useful for the user and is not necessary.</li> </ul>"},{"location":"changelog/#known-issues_9","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-API/Manager stop when the webserver is restarted (#952).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> <li>CSV line recovery forces Windows line endings (#1597).</li> <li>intelmqdump: Honor logging_path variable (#1605).</li> <li>Timeout error in mail URL fetcher (#1621).</li> <li>Shadowserver Parser: Drone feed has (also?) application protocol in type field (mapped to transport protocol) (#1763).</li> </ul>"},{"location":"changelog/#230-2021-03-04","title":"2.3.0 (2021-03-04)","text":"<p>IntelMQ no longer supports Python 3.5 (and thus Debian 9 and Ubuntu 16.04), the minimum supported Python version is 3.6.</p>"},{"location":"changelog/#configuration_5","title":"Configuration","text":""},{"location":"changelog/#core_11","title":"Core","text":"<ul> <li><code>intelmq.lib.bot</code>:</li> <li><code>ParserBot.recover_line_json_stream</code>: Make <code>line</code> parameter optional, as it is not needed for this method (by Sebastian Wagner).</li> <li><code>Bot.argparser</code>: Added class method <code>_create_argparser</code> (returns <code>argparse.ArgumentParser</code>) for easy command line arguments parsing (PR#1586 by Filip Pokorn\u00fd).</li> <li>Runtime configuration does not necessarily need a parameter entry for each block. Previously at least an empty block was required (PR#1604 by Filip Pokorn\u00fd).</li> <li>Allow setting the pipeline host and the Redis cache host by environment variables for docker usage (PR#1669 by Sebastian Waldbauer).</li> <li>Better logging message for SIGHUP handling if the handling of the signal is not delayed (by Sebastian Wagner).</li> <li><code>intelmq.lib.upgrades</code>:</li> <li>Add upgrade function for removal of HPHosts Hosts file feed and <code>intelmq.bots.parsers.hphosts</code> parser (#1559, by Sebastian Wagner).</li> <li><code>intelmq.lib.exceptions</code>:</li> <li><code>PipelineError</code>: Remove unused code to format exceptions (by Sebastian Wagner).</li> <li><code>intelmq.lib.utils</code>:</li> <li><code>create_request_session_from_bot</code>:<ul> <li>Changed bot argument to optional, uses defaults.conf as fallback, renamed to <code>create_request_session</code>. Name <code>create_request_session_from_bot</code> will be removed in version 3.0.0 (PR#1524 by Filip Pokorn\u00fd).</li> <li>Fixed setting of <code>http_verify_cert</code> from defaults configuration (PR#1758 by Birger Schacht).</li> </ul> </li> <li><code>log</code>: Use <code>RotatingFileHandler</code> for allow log file rotation without external tools (PR#1637 by Vasek Bruzek).</li> <li><code>intelmq.lib.harmonization</code>:</li> <li>The <code>IPAddress</code> type sanitation now accepts integer IP addresses and converts them to the string representation (by Sebastian Wagner).</li> <li><code>DateTime.parse_utc_isoformat</code>: Add parameter <code>return_datetime</code> to return <code>datetime</code> object instead of string ISO format (by Sebastian Wagner).</li> <li><code>DateTime.convert</code>: Fix <code>utc_isoformat</code> format, it pointed to a string and not a function, causing an exception when used (by Sebastian Wagner).</li> <li><code>DateTime.from_timestamp</code>: Ensure that time zone information (<code>+00:00</code>) is always present (by Sebastian Wagner).</li> <li><code>DateTime.__parse</code> now handles OverflowError exceptions from the dateutil library, happens for large numbers, e.g. telehpone numbers (by Sebastian Wagner).</li> <li><code>intelmq.lib.upgrades</code>:</li> <li>Added upgrade function for CSV parser parameter misspelling (by Sebastian Wagner).</li> <li>Check for existence of collector and parser for the obsolete Malware Domain List feed and raise warning if found (#1762, PR#1771 by Birger Schacht).</li> </ul>"},{"location":"changelog/#development_5","title":"Development","text":"<ul> <li><code>intelmq.bin.intelmq_gen_docs</code>:</li> <li>Add bot name to the resulting feed documentation (PR#1617 by Birger Schacht).</li> <li>Merged into <code>docs/autogen.py</code> (PR#1622 by Birger Schacht).</li> </ul>"},{"location":"changelog/#bots_11","title":"Bots","text":""},{"location":"changelog/#collectors_8","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.eset.collector</code>: Added (PR#1554 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.bots.collectors.http.collector_http</code>:</li> <li>Added PGP signature check functionality (PR#1602 by sinus-x).</li> <li>If status code is not 2xx, the request's and response's headers and body are logged in debug logging level (#1615, by Sebastian Wagner).</li> <li><code>intelmq.bots.collectors.kafka.collector</code>: Added (PR#1654 by Birger Schacht, closes #1634).</li> <li><code>intelmq.bots.collectors.xmpp.collector</code>: Marked as deprecated, see https://lists.cert.at/pipermail/intelmq-users/2020-October/000177.html (#1614, PR#1685 by Birger Schacht).</li> <li><code>intelmq.bots.collectors.shadowserver.collector_api</code>:</li> <li>Added (#1683, PR#1700 by Birger Schacht).</li> <li>Change file names in the report to <code>.json</code> instead of the original and wrong <code>.csv</code> (PR#1769 by Sebastian Wagner).</li> <li><code>intelmq.bots.collectors.mail</code>: Add content of the email's <code>Date</code> header as <code>extra.email_date</code> to the report in all email collectors (PR#1749 by aleksejsv and Sebastian Wagner).</li> <li><code>intelmq.bots.collectors.http.collector_http_stream</code>: Retry on common connection issues without raising exceptions (#1435, PR#1747 by Sebastian Waldbauer and Sebastian Wagner).</li> <li><code>intelmq.bots.collectors.shodan.collector_stream</code>: Retry on common connection issues without raising exceptions (#1435, PR#1747 by Sebastian Waldbauer and Sebastian Wagner).</li> <li><code>intelmq.bots.collectors.twitter.collector_twitter</code>:</li> <li>Proper input validation in URLs using urllib. CWE-20, found by GitHub's CodeQL (PR#1754 by Sebastian Wagner).</li> <li>Limit replacement (\"pastebin.com\", \"pastebin.com/raw\") to a maximum of one (PR#1754 by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#parsers_9","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.eset.parser</code>: Added (PR#1554 by Mikk Margus M\u00f6ll).</li> <li>Ignore invalid \"NXDOMAIN\" IP addresses (PR#1573 by Mikk Margus M\u00f6ll).</li> <li><code>intelmq.bots.parsers.hphosts</code>: Removed, feed is unavailable (#1559, by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.cznic.parser_haas</code>: Added (PR#1560 by Filip Pokorn\u00fd and Edvard Rejthar).</li> <li><code>intelmq.bots.parsers.cznic.parser_proki</code>: Added (PR#1599 by sinus-x).</li> <li><code>intelmq.bots.parsers.key_value.parser</code>: Added (PR#1607 by Karl-Johan Karlsson).</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>: Added new parameter <code>compose_fields</code> (by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.shadowserver.parser_json</code>: Added (PR#1700 by Birger Schacht).</li> <li><code>intelmq.bots.parsers.shadowserver.config</code>:</li> <li>Fixed mapping for Block list feed to accept network ranges in CIDR notation (#1720, PR#1728 by Sebastian Waldbauer).</li> <li>Added mapping for new feed MSRDPUDP, Vulnerable-HTTP, Sinkhole DNS (#1716, #1726, #1733, PR#1732, PR#1735, PR#1736 by Sebastian Waldbauer).</li> <li>Ignore value <code>0</code> for <code>source.asn</code> and <code>destination.asn</code> in all mappings to avoid parsing errors (PR#1769 by Sebastian Wagner).</li> <li><code>intelmq.bots.parsers.abusech.parser_ip</code>: Adapt to changes in the Feodo Tracker Botnet C2 IP Blocklist feed (PR#1741 by Thomas Bellus).</li> <li><code>intelmq.bots.parsers.malwaredomainlist</code>: Removed, as the feed is obsolete (#1762, PR#1771 by Birger Schacht).</li> </ul>"},{"location":"changelog/#experts_10","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.rfc1918.expert</code>:</li> <li>Add support for ASNs (PR#1557 by Mladen Markovic).</li> <li>Speed improvements.</li> <li>More output in debug logging mode (by Sebastian Wagner).</li> <li>Checks parameter length on initialization and in check method (by Sebastian Wagner).</li> <li><code>intelmq.bots.experts.gethostbyname.expert</code>:</li> <li>Added parameter <code>fallback_to_url</code> and set to True (PR#1586 by Edvard Rejthar).</li> <li>Added parameter <code>gaierrors_to_ignore</code> to optionally ignore other <code>gethostbyname</code> errors (#1553).</li> <li>Added parameter <code>overwrite</code> to optionally overwrite existing IP addresses (by Sebastian Wagner).</li> <li><code>intelmq.bots.experts.asn_lookup.expert</code>:</li> <li>Added <code>--update-database</code> option (PR#1524 by Filip Pokorn\u00fd).</li> <li>The script <code>update-asn-data</code> is now deprecated and will be removed in version 3.0.</li> <li><code>intelmq.bots.experts.maxmind_geoip.expert</code>:</li> <li>Added <code>--update-database</code> option (PR#1524 by Filip Pokorn\u00fd).</li> <li>Added <code>license_key</code> parameter (PR#1524 by Filip Pokorn\u00fd).</li> <li>The script <code>update-geoip-data</code> is now deprecated and will be removed in version 3.0.</li> <li><code>intelmq.bots.experts.tor_nodes.expert</code>:</li> <li>Added <code>--update-database</code> option (PR#1524 by Filip Pokorn\u00fd).</li> <li>The script <code>update-tor-nodes</code> is now deprecated and will be removed in version 3.0.</li> <li><code>intelmq.bots.experts.recordedfuture_iprisk.expert</code>:</li> <li>Added <code>--update-database</code> option (PR#1524 by Filip Pokorn\u00fd).</li> <li>Added <code>api_token</code> parameter (PR#1524 by Filip Pokorn\u00fd).</li> <li>The script <code>update-rfiprisk-data</code> is now deprecated and will be removed in version 3.0.</li> <li>Added <code>intelmq.bots.experts.threshold</code> (PR#1608 by Karl-Johan Karlsson).</li> <li>Added <code>intelmq.bots.experts.splunk_saved_search.expert</code> (PR#1666 by Karl-Johan Karlsson).</li> <li><code>intelmq.bots.experts.sieve.expert</code>:</li> <li>Added possibility to give multiple queue names for the <code>path</code> directive (#1462, by Sebastian Wagner).</li> <li>Added possibility to run actions without filtering expression (#1706, PR#1708 by Sebastian Waldbauer).</li> <li>Added datetime math operations (#1680, PR#1696 by Sebastian Waldbauer).</li> <li><code>intelmq.bots.experts.maxmind_geoip.expert</code>:</li> <li>Fixed handing over of <code>overwrite</code> parameter to <code>event.add</code> (PR#1743 by Birger Schacht).</li> </ul>"},{"location":"changelog/#outputs_8","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.rt</code>: Added Request Tracker output bot (PR#1589 by Marius Urkis).</li> <li><code>intelmq.bots.outputs.xmpp.output</code>: Marked as deprecated, see https://lists.cert.at/pipermail/intelmq-users/2020-October/000177.html (#1614, PR#1685 by Birger Schacht).</li> <li><code>intelmq.bots.outputs.smtp.output</code>: Fix sending to multiple recipients when recipients are defined by event-data (#1759, PR#1760 by Sebastian Waldbauer and Sebastian Wagner).</li> </ul>"},{"location":"changelog/#documentation_10","title":"Documentation","text":"<ul> <li>Feeds:</li> <li>Add ESET URL and Domain feeds (by Sebastian Wagner).</li> <li>Remove unavailable HPHosts Hosts file feed (#1559 by Sebastian Wagner).</li> <li>Added CZ.NIC HaaS feed (PR#1560 by Filip Pokorn\u00fd and Edvard Rejthar).</li> <li>Added CZ.NIC Proki feed (PR#1599 by sinus-x).</li> <li>Updated Abuse.ch URLhaus feed (PT#1572 by Filip Pokorn\u00fd).</li> <li>Added CERT-BUND CB-Report Malware infections feed (PR#1598 by sinus-x and Sebastian Wagner).</li> <li>Updated Turris Greylist feed with PGP verification information (by Sebastian Wagner).</li> <li>Fixed parsing of the <code>public</code> field in the generated feeds documentation (PR#1641 by Birger Schacht).</li> <li>Change the <code>rate_limit</code> parameter of some feeds from 2 days (129600 seconds) to one day (86400 seconds).</li> <li>Update the cAPTure Ponmocup Domains feed documentation (PR#1574 by Filip Pokorn\u00fd and Sebastian Wagner).</li> <li>Added Shadowserver Reports API (by Sebastian Wagner).</li> <li>Change the <code>rate_limit</code> parameter for many feeds from 2 days to the default one day (by Sebastian Wagner).</li> <li>Removed Malware Domain List feed, as the feed is obsolete (#1762, PR#1771 by Birger Schacht).</li> <li>Bots:</li> <li>Enhanced documentation of RFC1918 Expert (PR#1557 by Mladen Markovic and Sebastian Wagner).</li> <li>Enhanced documentation of SQL Output (PR#1620 by Edvard Rejthar).</li> <li>Updated documentation for MaxMind GeoIP, ASN Lookup, TOR Nodes and Recorded Future experts to reflect new <code>--update-database</code> option (PR#1524 by Filip Pokorn\u00fd).</li> <li>Added documentation for Shadowserver API collector and parser (PR#1700 by Birger Schacht and Sebastian Wagner).</li> <li>Add n6 integration documentation (by Sebastian Wagner).</li> <li>Moved 'Orphaned Queues' section from the FAQ to the intelmqctl documentation (by Sebastian Wagner).</li> <li>Generate documentation using Sphinx (PR#1622 by Birger Schacht).</li> <li>The documentation is now available at https://intelmq.readthedocs.io/en/latest/</li> <li>Refactor documentation and fix broken syntax (#1639, PRs #1638 #1640 #1642 by Birger Schacht).</li> <li>Integrate intelmq-manager and intelmq-api user documentation to provide unified documentation place (PR#1714 &amp; PR#1714 by Birger Schacht).</li> </ul>"},{"location":"changelog/#packaging_5","title":"Packaging","text":"<ul> <li>Fix paths in the packaged logcheck rules (by Sebastian Wagner).</li> <li>Build the sphinx documentation on package build (PR#1701 by Birger Schacht).</li> <li>Ignore non-zero exit-codes for the <code>intelmqctl check</code> call in postinst (#1748, by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tests_9","title":"Tests","text":"<ul> <li>Added tests for <code>intelmq.lib.exceptions.PipelineError</code> (by Sebastian Wagner).</li> <li><code>intelmq.tests.bots.collectors.http_collector.test_collector</code>: Use <code>requests_mock</code> to mock all requests and do not require a local webserver (by Sebastian Wagner).</li> <li><code>intelmq.tests.bots.outputs.restapi.test_output</code>:</li> <li>Use <code>requests_mock</code> to mock all requests and do not require a local webserver (by Sebastian Wagner).</li> <li>Add a test for checking the response status code (by Sebastian Wagner).</li> <li><code>intelmq.tests.bots.collectors.mail.test_collector_url</code>: Use <code>requests_mock</code> to mock all requests and do not require a local webserver (by Sebastian Wagner).</li> <li><code>intelmq.tests.bots.experts.ripe.test_expert</code>: Use <code>requests_mock</code> to mock all requests and do not require a local webserver (by Sebastian Wagner).</li> <li>The test flag (environment variable) <code>INTELMQ_TEST_LOCAL_WEB</code> is no longer used (by Sebastian Wagner).</li> <li>Added tests for <code>intelmq.harmonization.DateTime.parse_utc_isoformat</code> and <code>convert_fuzzy</code> (by Sebastian Wagner).</li> <li>Move from Travis to GitHub Actions (PR#1707 by Birger Schacht).</li> <li><code>intelmq.lib.test</code>:</li> <li><code>test_static_bot_check_method</code> checks the bot's static <code>check(parameters)</code> method for any exceptions, and a valid formatted return value (#1505, by Sebastian Wagner).</li> <li><code>setUpClass</code>: Skip tests if cache was requests with <code>use_cache</code> member, but Redis is deactivated with the environment variable <code>INTELMQ_SKIP_REDIS</code> (by Sebastian Wagner).</li> <li><code>intelmq.tests.bots.experts.cymru_whois.test_expert</code>:</li> <li>Switch from <code>example.com</code> to <code>ns2.univie.ac.at</code> for hopefully more stable responses (#1730, PR#1731 by Sebastian Waldbauer).</li> <li>Do not test for exact expected values in the 6to4 network test, as the values are changing regularly (by Sebastian Wagner).</li> <li><code>intelmq.tests.bots.parsers.abusech</code>: Remove tests cases of discontinued feeds (PR#1741 by Thomas Bellus).</li> <li>Activate GitHub's CodeQL Code Analyzing tool as GitHub Action (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#tools_8","title":"Tools","text":"<ul> <li><code>intelmqdump</code>:<ul> <li>Check if given queue is configured upon recovery (#1433, PR#1587 by Mladen Markovic).</li> </ul> </li> <li><code>intelmqctl</code>:</li> <li><code>intelmq list queues</code>: <code>--sum</code>, <code>--count</code>, <code>-s</code> flag for showing total count of messages (#1408, PR#1581 by Mladen Markovic).</li> <li><code>intelmq check</code>: Added a possibility to ignore queues from the orphaned queues check (by Sebastian Wagner).</li> <li>Allow setting the pipeline host by environment variables for docker usage (PR#1669 by Sebastian Waldbauer).</li> </ul>"},{"location":"changelog/#contrib_4","title":"Contrib","text":"<ul> <li>EventDB:</li> <li>Add SQL script for keeping track of the oldest inserted/update \"time.source\" information (by Sebastian Wagner).</li> <li>Cron Jobs: The script <code>intelmq-update-data</code> has been renamed to <code>intelmq-update-database</code> (by Filip Pokorn\u00fd).</li> <li>Dropped utterly outdated contrib modules (by Sebastian Wagner):</li> <li>ansible</li> <li>vagrant</li> <li>vagrant-ansible</li> <li>logrotate:</li> <li>Do not use the deprecated \"copytruncate\" option as intelmq re-opens the log anyways (by Sebastian Wagner).</li> <li>Set file permissions to <code>0644</code> (by Sebastian Wagner).</li> </ul>"},{"location":"changelog/#known-issues_10","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-API/Manager stop when the webserver is restarted (#952).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> <li>CSV line recovery forces Windows line endings (#1597).</li> <li>Timeout error in mail URL fetcher (#1621).</li> <li>AMQP pipeline: get_queues needs to check vhost of response (#1746).</li> </ul>"},{"location":"changelog/#223-2020-12-23","title":"2.2.3 (2020-12-23)","text":""},{"location":"changelog/#documentation_11","title":"Documentation","text":"<ul> <li>Bots/Sieve expert: Add information about parenthesis in if-expressions (#1681, PR#1687 by Birger Schacht).</li> </ul>"},{"location":"changelog/#harmonization","title":"Harmonization","text":"<ul> <li>See NEWS.md for information on a fixed bug in the taxonomy expert.</li> </ul>"},{"location":"changelog/#bots_12","title":"Bots","text":""},{"location":"changelog/#collectors_9","title":"Collectors","text":"<ul> <li><code>intelmq.bots.rt.collector_rt</code>: Log the size of the downloaded file in bytes on debug logging level.</li> </ul>"},{"location":"changelog/#parsers_10","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>:</li> <li>Add support for protocols 47 (GRE) and 59 (IPv6-NoNxt).</li> <li>Add support for field <code>additional_asns</code> in optional information column.</li> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>:</li> <li>Fix mapping of <code>DestinationIpInfo.DestinationIpConnectionType</code> field (contained a typo).</li> <li>Explicitly ignore field <code>DestinationIpInfo.DestinationIpv4Int</code> as the data is already in another field.</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>:</li> <li>Ignore line having spaces or tabs only or comment having leading tabs or spaces (PR#1669 by Brajneesh).</li> <li>Data fields containing <code>-</code> are now ignored and do not raise an exception anymore (#1651, PR#74 by Sebastian Waldbauer).</li> </ul>"},{"location":"changelog/#experts_11","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.taxonomy.expert</code>: Map type <code>scanner</code> to <code>information-gathering</code> instead of <code>information gathering</code>. See NEWS file for more information.</li> </ul>"},{"location":"changelog/#tests_10","title":"Tests","text":"<ul> <li>Travis: Deactivate tests with optional requirements on Python 3.5, as the build fails because of abusix/querycontacts version conflicts on dnspython.</li> </ul>"},{"location":"changelog/#known-issues_11","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> </ul>"},{"location":"changelog/#222-2020-10-28","title":"2.2.2 (2020-10-28)","text":""},{"location":"changelog/#core_12","title":"Core","text":"<ul> <li><code>intelmq.lib.upgrades</code>:</li> <li>Add upgrade function for renamed Shadowserver feed name \"Blacklisted-IP\"/\"Blocklist\".</li> </ul>"},{"location":"changelog/#bots_13","title":"Bots","text":""},{"location":"changelog/#parsers_11","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver</code>:</li> <li>Rename \"Blacklisted-IP\" feed to \"Blocklist\", old name is still valid until IntelMQ version 3.0 (PR#1588 by Thomas Hungenberg).</li> <li>Added support for the feeds <code>Accessible Radmin</code> and <code>CAIDA IP Spoofer</code> (PR#1600 by sinus-x).</li> <li><code>intelmq.bots.parsers.anubisnetworks.parser</code>: Fix parsing error where <code>dst.ip</code> was not equal to <code>comm.http.host</code>.</li> <li><code>intelmq/bots/parsers/danger_rulez/parser</code>: correctly skip malformed rows by defining variables before referencing (PR#1601 by Tomas Bellus).</li> <li>`intelmq.bots.parsers.misp.parser: Fix MISP Event URL (#1619, PR#1618 by Nedfire23).</li> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>:</li> <li>Add support for <code>DestinationIpInfo.*</code> and <code>Signatures.Sha256</code> fields, used by the <code>ctip-c2</code> feed (PR#1623 by Mikk Margus M\u00f6ll).</li> <li>Use <code>extra.payload.text</code> for the feed's field <code>Payload</code> if the content cannot be decoded (PR#1610 by Giedrius Ramas).</li> </ul>"},{"location":"changelog/#experts_12","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.cymru_whois</code>:</li> <li>Fix cache key calculation which previously led to duplicate keys and therefore wrong results in rare cases. The cache key calculation is intentionally not backwards-compatible (#1592, PR#1606).</li> <li>The bot now caches and logs (as level INFO) empty responses from Cymru (PR#1606).</li> </ul>"},{"location":"changelog/#documentation_12","title":"Documentation","text":"<ul> <li>README:</li> <li>Add Core Infrastructure Initiative Best Practices Badge.</li> <li>Bots:</li> <li>Generic CSV Parser: Add note on escaping backslashes (#1579).</li> <li>Remove section of non-existing \"Copy Extra\" Bot.</li> <li>Explain taxonomy expert.</li> <li>Add documentation on n6 parser.</li> <li>Gethostbyname expert: Add documentation how errors are treated.</li> <li>Feeds:</li> <li>Fixed bot modules of Calidog CertStream feed.</li> <li>Add information on Microsoft CTIP C2 feed.</li> </ul>"},{"location":"changelog/#packaging_6","title":"Packaging","text":"<ul> <li>In Debian packages, <code>intelmqctl check</code> and <code>intelmqctl upgrade-config</code> are executed in the \"postinst\" step (#1551, PR#1624 by Birger Schacht).</li> <li>Require <code>requests&lt;2.26</code> for Python 3.5, as 2.25.x will be the last release series of the requests library with support for Python 3.5.</li> </ul>"},{"location":"changelog/#tests_11","title":"Tests","text":"<ul> <li><code>intelmq.tests.lib.test_pipeline</code>: Skip <code>TestAmqp.test_acknowledge</code> on Travis with Python 3.8.</li> <li><code>intelmq.tests.bots.outputs.elasticsearch.test_output</code>: Refresh index <code>intelmq</code> manually to fix random test failures (#1593, PR#1595 by Zach Stone).</li> </ul>"},{"location":"changelog/#tools_9","title":"Tools","text":"<ul> <li><code>intelmqctl check</code>:</li> <li>For disabled bots which do not have any pipeline connections, do not raise an error, but only warning.</li> <li>Fix check on source/destination queues for bots as well the orphaned queues.</li> </ul>"},{"location":"changelog/#contrib_5","title":"Contrib","text":"<ul> <li>Bash completion scripts: Check both <code>/opt/intelmq/</code> as well as LSB-paths (<code>/etc/intelmq/</code> and <code>/var/log/intelmq/</code>) for loading bot information (#1561, PR#1628 by Birger Schacht).</li> </ul>"},{"location":"changelog/#known-issues_12","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> </ul>"},{"location":"changelog/#221-2020-07-30","title":"2.2.1 (2020-07-30)","text":""},{"location":"changelog/#core_13","title":"Core","text":"<ul> <li><code>intelmq.lib.upgrades</code>:</li> <li>Add upgrade function for changed configuration of the feed \"Abuse.ch URLhaus\" (#1571, PR#1572 by Filip Pokorn\u00fd).</li> <li>Add upgrade function for removal of HPHosts Hosts file feed and <code>intelmq.bots.parsers.hphosts</code> parser (#1559).</li> <li><code>intelmq.lib.harmonization</code>:<ul> <li>For IP Addresses, explicitly reject IPv6 addresses with scope ID (due to changed behavior in Python 3.9, #1550).</li> </ul> </li> </ul>"},{"location":"changelog/#development_6","title":"Development","text":"<ul> <li>Ignore line length (E501) in code-style checks altogether.</li> </ul>"},{"location":"changelog/#bots_14","title":"Bots","text":""},{"location":"changelog/#collectors_10","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.misp</code>: Fix access to actual MISP object (PR#1548 by Tomas Bellus @tomas321)</li> <li><code>intelmq.bots.collectors.stomp</code>: Remove empty <code>client.pem</code> file.</li> </ul>"},{"location":"changelog/#parsers_12","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver.config</code>:</li> <li>Add support for Accessible-CoAP feed (PR #1555 by Thomas Hungenberg).</li> <li>Add support for Accessible-ARD feed (PR #1584 by Tomas Bellus @tomas321).</li> <li><code>intelmq.bots.parser.anubisnetworks.parser</code>: Ignore \"TestSinkholingLoss\" events, these are not intended to be sent out at all.</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>: Allow values of type dictionary for parameter <code>type_translation</code>.</li> <li><code>intelmq.bots.parsers.hphosts</code>: Removed, feed is unavailable (#1559).</li> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>: Add support for comment \"username\" for \"scanner\" category.</li> <li><code>intelmq.bots.parsers.malwareurl.parser</code>: Check for valid FQDN and IP address in URL and IP address columns (PR#1585 by Marius Urkis).</li> </ul>"},{"location":"changelog/#experts_13","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.maxmind_geoip</code>: On Python &lt; 3.6, require maxminddb &lt; 2, as that version does no longer support Python 3.5.</li> </ul>"},{"location":"changelog/#outputs_9","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.udp</code>: Fix error handling on sending, had a bug itself.</li> </ul>"},{"location":"changelog/#documentation_13","title":"Documentation","text":"<ul> <li>Feeds:</li> <li>Update documentation of feed \"Abuse.ch URLhaus\" (#1571, PR#1572 by Filip Pokorn\u00fd).</li> <li>Bots:</li> <li>Overhaul of all bots' description fields (#1570).</li> <li>User-Guide:</li> <li>Overhaul pipeline configuration section and explain named queues better (#1577).</li> </ul>"},{"location":"changelog/#tests_12","title":"Tests","text":"<ul> <li><code>intelmq.tests.bots.experts.cymru</code>: Adapt <code>test_empty_result</code>, remove <code>test_unicode_as_name</code> and <code>test_country_question_mark</code> (#1576).</li> </ul>"},{"location":"changelog/#tools_10","title":"Tools","text":"<ul> <li><code>intelmq.bin.intelmq_gen_docs</code>: Format parameters of types lists with double quotes around values to produce conform JSON, ready to copy and paste the value into the IntelMQ Manager's bot parameter form.</li> <li><code>intelmq.bin.intelmqctl</code>:</li> <li><code>debug</code>: In JSON mode, use dictionaries instead of lists.</li> <li><code>debug</code>: Add <code>PATH</code> to the paths shown.</li> <li><code>check</code>: Show <code>$PATH</code> environment variable if executable cannot be found.</li> </ul>"},{"location":"changelog/#contrib_6","title":"Contrib","text":"<ul> <li><code>malware_name_mapping</code>: Change MISP Threat Actors URL to new URL (branch master -&gt; main) in download script.</li> </ul>"},{"location":"changelog/#known-issues_13","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> <li>Bash completion scripts search in wrong directory in packages (#1561).</li> <li>Cymru Expert: Wrong Cache-Key Calculation (#1592).</li> </ul>"},{"location":"changelog/#220-2020-06-18","title":"2.2.0 (2020-06-18)","text":"<p>Dropped support for Python 3.4.</p>"},{"location":"changelog/#core_14","title":"Core","text":"<ul> <li><code>__init__</code>: Changes to the path-handling, see User Guide, section /opt and LSB paths for more information</li> <li>The environment variable <code>INTELMQ_ROOT_DIR</code> can be used to set custom root directories instead of <code>/opt/intelmq/</code> (#805) in case of non LSB-path installations.</li> <li>The environment variable <code>ROOT_DIR</code> can be used to set custom root directories instead of <code>/</code> (#805) in case of LSB-path installations.</li> <li><code>intelmq.lib.exceptions</code>: Added <code>MissingDependencyError</code> for show error messages about a missing library and how to install it (#1471).</li> <li>Added optional parameter <code>installed</code> to show the installed version.</li> <li>Added optional parameter <code>additional_text</code> to show arbitrary text.</li> <li>Adding more type annotations for core libraries.</li> <li><code>intelmq.lib.pipeline.Pythonlist.sleep</code>: Drop deprecated method.</li> <li><code>intelmq.lib.utils</code>: <code>write_configuration</code>: Append a newline at end of configuration/file to allow proper comparisons &amp; diffs.</li> <li><code>intelmq.lib.test</code>: <code>BotTestCase</code> drops privileges upon initialization (#1489).</li> <li><code>intelmq.lib.bot</code>:</li> <li>New class <code>OutputBot</code>:<ul> <li>Method <code>export_event</code> to format/export events according to the parameters given by the user.</li> </ul> </li> <li><code>ParserBot</code>: New methods <code>parse_json_stream</code> and <code>recover_line_json_stream</code>.</li> <li><code>ParserBot.recover_line_json</code>: Fix format by adding a list around the line data.</li> <li><code>Bot.send_message</code>: In debugging log level, the path to which the message is sent is now logged too.</li> </ul>"},{"location":"changelog/#bots_15","title":"Bots","text":"<ul> <li>Bots with dependencies: Use of <code>intelmq.lib.exceptions.MissingDependencyError</code>.</li> </ul>"},{"location":"changelog/#collectors_11","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.misp.collector</code>: Deprecate parameter <code>misp_verify</code> in favor of generic parameter <code>http_verify_cert</code>.</li> <li><code>intelmq.bots.collectors.tcp.collector</code>: Drop compatibility with Python 3.4.</li> <li><code>intelmq.bots.collectors.stomp.collector</code>:</li> <li>Check the stomp.py version and show an error message if it does not match.</li> <li>For stomp.py versions <code>&gt;= 5.0.0</code> redirect the <code>stomp.PrintingListener</code> output to debug logging.</li> <li><code>intelmq.bots.collectors.microsoft.collector_azure</code>: Support current Python library <code>azure-storage-blob&gt;= 12.0.0</code>, configuration is incompatible and needs manual change. See NEWS file and bot's documentation for more details.</li> <li><code>intelmq.bots.collectors.amqp.collector_amqp</code>: Require <code>pika</code> minimum version 1.0.</li> <li><code>intelmq.bots.collectors.github_api.collector_github_contents_api</code>: Added (PR#1481).</li> </ul>"},{"location":"changelog/#parsers_13","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.autoshun.parser</code>: Drop compatibility with Python 3.4.</li> <li><code>intelmq.bots.parsers.html_table.parser</code>: Drop compatibility with Python 3.4.</li> <li><code>intelmq.bots.parsers.shadowserver.parser</code>: Add support for MQTT and Open-IPP feeds (PR#1512, PR#1544).</li> <li><code>intelmq.bots.parsers.taichung.parser</code>:</li> <li>Migrate to <code>ParserBot</code>.</li> <li>Also parse geolocation information if available.</li> <li><code>intelmq.bots.parsers.cymru.parser_full_bogons</code>:</li> <li>Migrate to <code>ParserBot</code>.</li> <li>Add last updated information in raw.</li> <li><code>intelmq.bots.parsers.anubisnetworks.parser</code>: Add new parameter <code>use_malware_familiy_as_classification_identifier</code>.</li> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>: Compatibility for new CTIP data format used provided by the Azure interface.</li> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>: Support for <code>openresolver</code> type.</li> <li><code>intelmq.bots.parsers.github_feed.parser</code>: Added (PR#1481).</li> <li><code>intelmq.bots.parsers.urlvir.parser</code>: Removed, as the feed is discontinued (#1537).</li> </ul>"},{"location":"changelog/#experts_14","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.csv_converter</code>: Added as converter to CSV.</li> <li><code>intelmq.bots.experts.misp</code>: Added (PR#1475).</li> <li><code>intelmq.bots.experts.modify</code>: New parameter <code>maximum_matches</code>.</li> </ul>"},{"location":"changelog/#outputs_10","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.amqptopic</code>:</li> <li>Use <code>OutputBot</code> and <code>export_event</code>.</li> <li>Allow formatting the routing key with event data by the new parameter <code>format_routing_key</code> (boolean).</li> <li><code>intelmq.bots.outputs.file</code>: Use <code>OutputBot</code> and <code>export_event</code>.</li> <li><code>intelmq.bots.outputs.files</code>: Use <code>OutputBot</code> and <code>export_event</code>.</li> <li><code>intelmq.bots.outputs.misp.output_feed</code>: Added, creates a MISP Feed (PR#1473).</li> <li><code>intelmq.bots.outputs.misp.output_api</code>: Added, pushes to MISP via the API (PR#1506, PR#1536).</li> <li><code>intelmq.bots.outputs.elasticsearch.output</code>: Dropped ElasticSearch version 5 compatibility, added version 7 compatibility (#1513).</li> </ul>"},{"location":"changelog/#documentation_14","title":"Documentation","text":"<ul> <li>Document usage of the <code>INTELMQ_ROOT_DIR</code> environment variable.</li> <li>Added document on MISP integration possibilities.</li> <li>Feeds:</li> <li>Added \"Full Bogons IPv6\" feed.</li> <li>Remove discontinued URLVir Feeds (#1537).</li> </ul>"},{"location":"changelog/#packaging_7","title":"Packaging","text":"<ul> <li><code>setup.py</code> do not try to install any data to <code>/opt/intelmq/</code> as the behavior is inconsistent on various systems and with <code>intelmqsetup</code> we have a tool to create the structure and files anyway.</li> <li><code>debian/rules</code>:</li> <li>Provide a blank state file in the package.</li> <li>Patches:</li> <li>Updated <code>fix-intelmq-paths.patch</code>.</li> </ul>"},{"location":"changelog/#tests_13","title":"Tests","text":"<ul> <li>Travis: Use <code>intelmqsetup</code> here too.</li> <li>Install required build dependencies for the Debian package build test.</li> <li>This version is no longer automatically tested on Python <code>&lt;</code> 3.5.</li> <li>Also run the tests on Python 3.8.</li> <li>Run the Debian packaging tests on Python 3.5 and the code-style test on 3.8.</li> <li>Added tests for the new bot <code>intelmq.bots.outputs.misp.output_feed</code> (#1473).</li> <li>Added tests for the new bot <code>intelmq.bots.experts.misp.expert</code> (#1473).</li> <li>Added tests for <code>intelmq.lib.exceptions</code>.</li> <li>Added tests for <code>intelmq.lib.bot.OutputBot</code> and <code>intelmq.lib.bot.OutputBot.export_event</code>.</li> <li>Added IPv6 tests for <code>intelmq.bots.parsers.cymru.parser_full_bogons</code>.</li> <li>Added tests for <code>intelmq.lib.bot.ParserBot</code>'s new methods <code>parse_json_stream</code> and <code>recover_line_json_stream</code>.</li> <li><code>intelmq.tests.test_conf</code>: Set encoding to UTF-8 for reading the <code>feeds.yaml</code> file.</li> </ul>"},{"location":"changelog/#tools_11","title":"Tools","text":"<ul> <li><code>intelmqctl</code>:</li> <li><code>upgrade-config</code>:<ul> <li>Allow setting the state file location with the <code>--state-file</code> parameter.</li> <li>Do not require a second run anymore, if the state file is newly created (#1491).</li> <li>New parameter <code>no_backup</code>/<code>--no-backup</code> to skip creation of <code>.bak</code> files for state and configuration files.</li> </ul> </li> <li>Only require <code>psutil</code> for the <code>IntelMQProcessManager</code>, not for process manager independent calls like <code>upgrade-config</code> or <code>check</code>.</li> <li>Add new command <code>debug</code> to output some information for debugging. Currently implemented:<ul> <li>paths</li> <li>environment variables</li> </ul> </li> <li><code>IntelMQController</code>: New argument <code>--no-file-logging</code> to disable logging to file.</li> <li>If dropping privileges does not work, <code>intelmqctl</code> will now abort (#1489).</li> <li><code>intelmqsetup</code>:</li> <li>Add argument parsing and an option to skip setting file ownership, possibly not requiring root permissions.</li> <li>Call <code>intelmqctl upgrade-config</code> and add argument for the state file path (#1491).</li> <li><code>intelmq_generate_misp_objects_templates.py</code>: Tool to create a MISP object template (#1470).</li> <li><code>intelmqdump</code>: New parameter <code>-t</code> or <code>--truncate</code> to optionally give the maximum length of <code>raw</code> data to show, 0 for no truncating.</li> </ul>"},{"location":"changelog/#contrib_7","title":"Contrib","text":"<ul> <li>Added <code>development-tools</code>.</li> <li>ElasticSearch: Dropped version 5 compatibility, added version 7 compatibility (#1513).</li> <li>Malware Name Mapping Downloader:</li> <li>New parameter <code>--mwnmp-ignore-adware</code>.</li> <li>The parameter <code>--add-default</code> supports an optional parameter to define the default value.</li> </ul>"},{"location":"changelog/#known-issues_14","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> </ul>"},{"location":"changelog/#213-2020-05-26","title":"2.1.3 (2020-05-26)","text":""},{"location":"changelog/#requirements","title":"Requirements","text":"<ul> <li>The python library <code>requests</code> is (again) listed as dependency of the core (#1519).</li> </ul>"},{"location":"changelog/#core_15","title":"Core","text":"<ul> <li><code>intelmq.lib.upgrades</code>:</li> <li>Harmonization upgrade: Also check and update regular expressions.</li> <li>Add function to migrate the deprecated parameter <code>attach_unzip</code> to <code>extract_files</code> for the mail attachment collector.</li> <li>Add function to migrate changed Taichung URL feed.</li> <li>Check for discontinued Abuse.CH Zeus Tracker feed.</li> <li><code>intelmq.lib.bot</code>:</li> <li><code>ParserBot.recover_line</code>: Parameter <code>line</code> needs to be optional, fix usage of fallback value <code>self.current_line</code>.</li> <li><code>start</code>: Handle decoding errors in the pipeline different so that the bot is not stuck in an endless loop (#1494).</li> <li><code>start</code>: Only acknowledge a message in case of errors, if we actually had a message to dump, which is not the case for collectors.</li> <li><code>_dump_message</code>: Dump messages with encoding errors base64 encoded, not in JSON format as it's not possible to decode them (#1494).</li> <li><code>intelmq.lib.test</code>:</li> <li><code>BotTestCase.run_bot</code>: Add parameters <code>allowed_error_count</code> and <code>allowed_warning_count</code> to allow set the number per run, not per test class.</li> <li>Set <code>source_pipeline_broker</code> and <code>destination_pipeline_broker</code> to <code>pythonlist</code> instead of the old <code>broker</code>, fixes <code>intelmq.tests.lib.test_bot.TestBot.test_pipeline_raising</code>.</li> <li>Fix test for (allowed) errors and warnings.</li> <li><code>intelmq.lib.exceptions</code>:</li> <li><code>InvalidKey</code>: Add <code>KeyError</code> as parent class.</li> <li><code>DecodingError</code>: Added, string representation has all relevant information on the decoding error, including encoding, reason and the affected string (#1494).</li> <li><code>intelmq.lib.pipeline</code>:</li> <li>Decode messages in <code>Pipeline.receive</code> not in the implementation's <code>_receive</code> so that the internal counter is correct in case of decoding errors (#1494).</li> <li><code>intelmq.lib.utils</code>:</li> <li><code>decode</code>: Raise new <code>DecodingError</code> if decoding fails.</li> </ul>"},{"location":"changelog/#harmonization_1","title":"Harmonization","text":"<ul> <li><code>protocol.transport</code>: Adapt regular expression to allow the value <code>nvp-ii</code> (protocol 11).</li> </ul>"},{"location":"changelog/#bots_16","title":"Bots","text":""},{"location":"changelog/#collectors_12","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.mail.collector_mail_attach</code>:</li> <li>Fix handling of deprecated parameter name <code>attach_unzip</code>.</li> <li>Fix handling of attachments without filenames (#1538).</li> <li><code>intelmq.bots.collectors.stomp.collector</code>: Fix compatibility with stomp.py versions <code>&gt; 4.1.20</code> and catch errors on shutdown.</li> <li><code>intelmq.bots.collectors.microsoft</code>:</li> <li>Update <code>REQUIREMENTS.txt</code> temporarily fixing deprecated Azure library (#1530, PR#1532).</li> <li><code>intelmq.bots.collectors.microsoft.collector_interflow</code>: Add method for printing the file list.</li> </ul>"},{"location":"changelog/#parsers_14","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>: Support for protocol 11 (<code>nvp-ii</code>) and <code>conficker</code> type.</li> <li><code>intelmq.bots.parsers.taichung.parser</code>: Support more types/classifications:</li> <li>Application Compromise: Apache vulnerability &amp; SQL injections</li> <li>Brute-force: MSSQL &amp; SSH password guess attacks; Office 365, SSH &amp; SIP attacks</li> <li>C2 Sever: Attack controller</li> <li>DDoS</li> <li>DoS: DNS, DoS, Excess connection</li> <li>IDS Alert / known vulnerability exploitation: backdoor</li> <li>Malware: Malware Proxy</li> <li>Warn on new unknown types.</li> <li><code>intelmq.bots.parsers.bitcash.parser</code>: Removed as feed is discontinued.</li> <li><code>intelmq.bots.parsers.fraunhofer.parser_ddosattack_cnc</code> and <code>intelmq.bots.parsers.fraunhofer.parser_ddosattack_target</code>: Removed as feed is discontinued.</li> <li><code>intelmq.bots.parsers.malwaredomains.parser</code>: Correctly classify <code>C&amp;C</code> and <code>phishing</code> events.</li> <li><code>intelmq.bots.parsers.shadowserver.parser</code>: More verbose error message for missing report specification (#1507).</li> <li><code>intelmq.bots.parsers.n6.parser_n6stomp</code>: Always add n6 field <code>name</code> as <code>malware.name</code> independent of <code>category</code>.</li> <li><code>intelmq.bots.parsers.anubisnetworks</code>: Update parser with new data format.</li> <li><code>intelmq.bots.parsers.bambenek</code>: Add new feed URLs with Host <code>faf.bambenekconsulting.com</code> (#1525, PR#1526).</li> <li><code>intelmq.bots.parsers.abusech.parser_ransomware</code>: Removed, as the feed is discontinued (#1537).</li> <li><code>intelmq.bots.parsers.nothink.parser</code>: Removed, as the feed is discontinued (#1537).</li> <li><code>intelmq.bots.parsers.n6.parser</code>: Remove not allowed characters in the name field for <code>malware.name</code> and write original value to <code>event_description.text</code> instead.</li> </ul>"},{"location":"changelog/#experts_15","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.cymru_whois.lib</code>: Fix parsing of AS names with Unicode characters.</li> </ul>"},{"location":"changelog/#outputs_11","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.mongodb</code>:</li> <li>Set default port 27017.</li> <li>Use different authentication mechanisms per MongoDB server version to fix compatibility with server version &gt;= 3.4 (#1439).</li> </ul>"},{"location":"changelog/#documentation_15","title":"Documentation","text":"<ul> <li>Feeds:</li> <li>Remove unavailable feed Abuse.CH Zeus Tracker.</li> <li>Remove the field <code>status</code>, offline feeds should be removed.</li> <li>Add a new field <code>public</code> to differentiate between private and public feeds.</li> <li>Adding documentation URLs to nearly all feeds.</li> <li>Remove unavailable Bitcash.cz feed.</li> <li>Remove unavailable Fraunhofer DDos Attack feeds.</li> <li>Remove unavailable feed Abuse.CH Ransomware Tracker (#1537).</li> <li>Update information on Bambenek Feeds, many require a license now (#1525).</li> <li>Remove discontinued Nothink Honeypot Feeds (#1537).</li> <li>Developers Guide: Fix the instructions for <code>/opt/intelmq</code> file permissions.</li> </ul>"},{"location":"changelog/#packaging_8","title":"Packaging","text":"<ul> <li>Patches: <code>fix-logrotate-path.patch</code>: also include path to rotated file in patch.</li> <li>Fix paths from <code>/opt</code> to LSB for <code>setup.py</code> and <code>contrib/logrotate/intelmq</code> in build process (#1500).</li> <li>Add runtime dependency <code>debianutils</code> for the program <code>which</code>, which is required for <code>intelmqctl</code>.</li> </ul>"},{"location":"changelog/#tests_14","title":"Tests","text":"<ul> <li>Dropping Travis tests for 3.4 as required libraries dropped 3.4 support.</li> <li><code>intelmq.tests.bots.experts.cymru_whois</code>:</li> <li>Drop missing ASN test, does not work anymore.</li> <li>IPv6 to IPv4 test: Test for two possible results.</li> <li><code>intelmq.lib.test</code>: Fix compatibility of logging capture with Python &gt;= 3.7 by reworking the whole process (#1342).</li> <li><code>intelmq.bots.collectors.tcp.test_collector</code>: Removing custom mocking and bot starting, not necessary anymore.</li> <li>Added tests for <code>intelmq.bin.intelmqctl.IntelMQProcessManager._interpret_commandline</code>.</li> <li>Fix and split <code>tests.bots.experts.ripe.test_expert.test_ripe_stat_error_json</code>.</li> <li>Added tests for invalid encodings in input messages in <code>intelmq.tests.lib.test_bot</code> and <code>intelmq.tests.lib.test_pipeline</code> (#1494).</li> <li>Travis: Explicitly enable RabbitMQ management plugin.</li> <li><code>intelmq.tests.lib.test_message</code>: Fix usage of the parameter <code>blacklist</code> for Message hash tests (#1539).</li> </ul>"},{"location":"changelog/#tools_12","title":"Tools","text":"<ul> <li><code>intelmqsetup</code>: Copy missing BOTS file to IntelMQ's root directory (#1498).</li> <li><code>intelmq_gen_docs</code>: Feed documentation generation: Handle missing/empty parameters.</li> <li><code>intelmqctl</code>:</li> <li><code>IntelMQProcessManager</code>: For the status of running bots also check the bot ID of the commandline and ignore the path of the executable (#1492).</li> <li><code>IntelMQController</code>: Fix exit codes of <code>check</code> command for JSON output (now 0 on success and 1 on error, was swapped, #1520).</li> <li><code>intelmqdump</code>:</li> <li>Handle base64-type messages for show, editor and recovery actions.</li> </ul>"},{"location":"changelog/#contrib_8","title":"Contrib","text":"<ul> <li><code>intelmq/bots/experts/asn_lookup/update-asn-data</code>: Use <code>pyasn_util_download.py</code> to download the data instead from RIPE, which cannot be parsed currently (#1517, PR#1518, https://github.com/hadiasghari/pyasn/issues/62).</li> </ul>"},{"location":"changelog/#known-issues_15","title":"Known issues","text":"<ul> <li>HTTP stream collector: retry on regular connection problems? (#1435).</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952).</li> <li>Reverse DNS: Only first record is used (#877).</li> <li>Corrupt dump files when interrupted during writing (#870).</li> </ul>"},{"location":"changelog/#212-2020-01-28","title":"2.1.2 (2020-01-28)","text":""},{"location":"changelog/#core_16","title":"Core","text":"<ul> <li><code>__init__</code>: Resolve absolute path for <code>STATE_FILE_PATH</code> variable (resolves <code>..</code>).</li> <li><code>intelmq.lib.utils</code>:</li> <li>log: Do not raise an exception if logging to neither file nor syslog is requested.</li> <li>logging StreamHandler: Colorize all warning and error messages red.</li> <li>logging FileHandler: Strip all shell colorizations from the messages (#1436).</li> <li><code>intelmq.lib.message</code>:</li> <li><code>Message.to_json</code>: Set <code>sort_keys=True</code> to get reproducible results.</li> <li><code>drop_privileges</code>: Handle situations where the user or group <code>intelmq</code> does not exist.</li> <li><code>intelmq.lib.pipeline</code>:</li> <li><code>Amqp._send</code> and <code>Amqp._acknowledge</code>: Log traceback in debug mode in case of errors and necessary re-connections.</li> <li><code>Amqp._acknowledge</code>: Reset delivery tag if acknowledge was successful.</li> </ul>"},{"location":"changelog/#bots_17","title":"Bots","text":""},{"location":"changelog/#collectors_13","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.misp.collector</code>:</li> <li>Add compatibility with current pymisp versions and versions released after January 2020 (PR #1468).</li> </ul>"},{"location":"changelog/#parsers_15","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver.config</code>: Add some missing fields for the feed <code>accessible-rdp</code> (#1463).</li> <li><code>intelmq.bots.parsers.shadowserver.parser</code>:</li> <li>Feed-detection based on file names: The prefixed date is optional now.</li> <li>Feed-detection based on file names: Re-detect feed for every report received (#1493).</li> </ul>"},{"location":"changelog/#experts_16","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.national_cert_contact_certat</code>: Handle empty responses by server (#1467).</li> <li><code>intelmq.bots.experts.maxmind_geoip</code>: The script <code>update-geoip-data</code> now requires a license key as second parameter because of upstream changes (#1484)).</li> </ul>"},{"location":"changelog/#outputs_12","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.restapi.output</code>: Fix logging of response body if response status code was not ok.</li> </ul>"},{"location":"changelog/#documentation_16","title":"Documentation","text":"<ul> <li>Remove some hardcoded <code>/opt/intelmq/</code> paths from code comments and program outputs.</li> </ul>"},{"location":"changelog/#packaging_9","title":"Packaging","text":"<ul> <li>debian/rules: Only replace <code>/opt/intelmq/</code> with LSB-paths in some certain files, not the whole tree, avoiding wrong replacements.</li> <li>debian/rules and debian/intelmq.install: Do install the examples configuration directly instead of working around the abandoned examples directory.</li> </ul>"},{"location":"changelog/#tests_15","title":"Tests","text":"<ul> <li><code>lib/test_utils</code>: Skip some tests on Python 3.4 because <code>contextlib.redirect_stdout</code> and <code>contextlib.redirect_sterr</code> are not supported on this version.</li> <li>Travis: Stop running tests with all optional dependencies on Python 3.4, as more and more libraries are dropping support for it. Tests on the core and code without non-optional requirements are not affected.</li> <li><code>tests.bots.parsers.html_table</code>: Make tests independent of current year.</li> </ul>"},{"location":"changelog/#tools_13","title":"Tools","text":"<ul> <li><code>intelmqctl upgrade-config</code>: Fix missing substitution in error message \"State file %r is not writable.\".</li> </ul>"},{"location":"changelog/#known-issues_16","title":"Known issues","text":"<ul> <li>bots trapped in endless loop if decoding of raw message fails (#1494)</li> <li>intelmqctl status of processes: need to check bot id too (#1492)</li> <li>MongoDB authentication: compatibility on different MongoDB and pymongo versions (#1439)</li> <li>ctl: shell colorizations are logged (#1436)</li> <li>http stream collector: retry on regular connection problems? (#1435)</li> <li>tests: capture logging with context manager (#1342)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#211-2019-11-11","title":"2.1.1 (2019-11-11)","text":""},{"location":"changelog/#configuration_6","title":"Configuration","text":"<ul> <li>Default configuration:</li> <li>Remove discontinued feed \"Feodo Tracker Domains\" from default configuration.</li> <li>Add \"Feodo Tracker Browse\" feed to default configuration.</li> </ul>"},{"location":"changelog/#core_17","title":"Core","text":"<ul> <li><code>intelmq.lib.pipeline</code>: AMQP: using port 15672 as default (like RabbitMQ's defaults) for the monitoring interface for getting statistical data (<code>intelmqctl_rabbitmq_monitoring_url</code>).</li> <li><code>intelmq.lib.upgrades</code>: Added a generic upgrade function for harmonization, checking of all message types, it's fields and their types.</li> <li><code>intelmq.lib.utils</code>:</li> <li><code>TimeoutHTTPAdapter</code>: A subclass of <code>requests.adapters.HTTPAdapter</code> with the possibility to set the timeout per adapter.</li> <li><code>create_request_session_from_bot</code>: Use the <code>TimeoutHTTPAdapter</code> with the user-defined timeout. Previously the timeout was not functional.</li> </ul>"},{"location":"changelog/#bots_18","title":"Bots","text":""},{"location":"changelog/#parsers_16","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver.parser</code>: Fix logging message if the parameter <code>feedname</code> is not present.</li> <li><code>intelmq.bots.parsers.shodan.parser</code>: Also add field <code>classification.identifier</code> (<code>'network-scan'</code>) in minimal mode.</li> <li><code>intelmq.bots.parsers.spamhaus.parser_cert</code>: Add support for category <code>'misc'</code>.</li> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>:</li> <li>Add support for phishing events without URL.</li> <li>Add support for protocols &gt;= 143 (unassigned, experiments, testing, reserved), saving the number to extra, as the data would be bogus.</li> <li><code>intelmq.bots.parsers.microsoft.parser_bingmurls</code>:</li> <li>Save the <code>Tags</code> data as <code>source.geolocation.cc</code>.</li> </ul>"},{"location":"changelog/#experts_17","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.modify.expert</code>: Fix bug with setting non-string values (#1460).</li> </ul>"},{"location":"changelog/#outputs_13","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.smtp</code>:</li> <li>Allow non-existent field in text formatting by using a default value <code>None</code> instead of throwing errors.</li> <li>Fix Authentication (#1464).</li> <li>Fix sending to multiple recipients (#1464).</li> </ul>"},{"location":"changelog/#documentation_17","title":"Documentation","text":"<ul> <li>Feeds:</li> <li>Fix configuration of <code>Feodo Tracker Browse</code> feed.</li> <li>Bots:</li> <li>Sieve expert: Document behavior of <code>!=</code> with lists.</li> </ul>"},{"location":"changelog/#tests_16","title":"Tests","text":"<ul> <li>Adaption and extension of the test cases to the changes.</li> </ul>"},{"location":"changelog/#tools_14","title":"Tools","text":"<ul> <li><code>intelmq.bin.intelmqctl</code>:</li> <li>check: Check if running the upgrade function for harmonization is necessary.</li> <li>upgrade-config: Run the upgrade function for harmonization.</li> <li><code>intelmqctl restart</code> did throw an error as the message for restarting was not defined (#1465).</li> </ul>"},{"location":"changelog/#known-issues_17","title":"Known issues","text":"<ul> <li>MongoDB authentication: compatibility on different MongoDB and pymongo versions (#1439)</li> <li>ctl: shell colorizations are logged (#1436)</li> <li>http stream collector: retry on regular connection problems? (#1435)</li> <li>tests: capture logging with context manager (#1342)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#210-2019-10-15","title":"2.1.0 (2019-10-15)","text":""},{"location":"changelog/#core_18","title":"Core","text":"<ul> <li><code>intelmq.lib.harmonization</code>:</li> <li>Use correct parent classes.</li> <li>Add <code>DateTime.convert</code> as interface for all existing conversion functions.</li> <li>add <code>DateTime.convert_from_format</code>.</li> <li>add <code>DateTime.convert_from_format_midnight</code>.</li> <li>add <code>DateTime.convert_fuzzy</code>.</li> <li><code>intelmq.lib.pipeline</code>:</li> <li>Redis: Use single connection client if calling bot is not multithreaded. Gives a small speed advantage.</li> <li>Require the bot instance as parameter for all pipeline classes.</li> <li>New internal variable <code>_has_message</code> to keep the state of the pipeline.</li> <li>Split receive and acknowledge into public-facing and private methods.</li> <li>Add <code>reject_message</code> method to the Pipeline class for explicit re-queue of messages.</li> <li>AMQP:<ul> <li>Make exchange configurable.</li> <li>If exchange is set, the queues are not declared, the queue name is for routing used by exchanges.</li> </ul> </li> <li><code>intelmq.lib.bot</code>:</li> <li>Log message after successful bot initialization, no log message anymore for ready pipeline.</li> <li>Use existing current message if receive is called and the current message still exists.</li> <li>Fix handling of received messaged after a SIGHUP that happened during a blocking receiving connection using explicit rejection (#1438).</li> <li>New method <code>_parse_common_parameters</code> called before <code>init</code> to parse commonly used argument. Currently supported: <code>extract_files</code>.</li> <li><code>intelmq.lib.test</code>:</li> <li>Fix the tests broker by providing the testing pipeline.</li> <li><code>intelmq.lib.utils</code>:</li> <li><code>unzip</code>:<ul> <li>new parameter <code>return_names</code> to optionally return the file names.</li> <li>support for zip</li> <li>new parameters <code>try_zip</code>, <code>try_gzip</code> and <code>try_tar</code> to control which compressions are tried.</li> <li>rewritten to an iterative approach</li> </ul> </li> <li>add <code>file_name_from_response</code> to extract a file name from a Response object for downloaded files.</li> <li><code>intelmq.lib.upgrades</code>: Added <code>v210_deprecations</code> for deprecated parameters.</li> </ul>"},{"location":"changelog/#harmonization_2","title":"Harmonization","text":"<ul> <li>Add extra to reports.</li> </ul>"},{"location":"changelog/#bots_19","title":"Bots","text":""},{"location":"changelog/#collectors_14","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.http.collector_http</code>:</li> <li>More extensive usage of <code>intelmq.lib.utils.unzip</code>.</li> <li>Save the file names in the report if files have been extracted form an archive.</li> <li><code>intelmq.bots.collectors.rt.collector_rt</code>:</li> <li>Save ticket information/metadata in the extra fields of the report.</li> <li>Support for RT 3.8 and RT 4.4.</li> <li>New parameters <code>extract_attachment</code> and <code>extract_download</code> for generic archive extraction and consistency. The parameter <code>unzip_attachment</code> is deprecated.</li> <li><code>intelmq.bots.collectors.mail.*</code>: Save email information/metadata in the extra fields of the report. See the bots documentation for a complete list of provided data.</li> <li><code>intelmq.bots.collectors.mail.collector_mail_attach</code>: Check for existence/validity of the <code>attach_regex</code> parameter.</li> <li>Use the lib's <code>unzip</code> function for uncompressing attachments and use the .</li> <li><code>intelmq.bots.collectors.mail.collector_mail_url</code>: Save the file name of the downloaded file as <code>extra.file_name</code>.</li> <li><code>intelmq.bots.collectors.amqp.collector_amqp</code>: New collector to collect data from (remote) AMQP servers, for bot IntelMQ as well as external data.</li> <li>use default SSL context for client purposes, fixes compatibility with python <code>&lt;</code> 3.6 if TLS is used.</li> </ul>"},{"location":"changelog/#parsers_17","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.html_table.parser</code>:</li> <li>New parameter \"html_parser\".</li> <li>Use time conversion functions directly from <code>intelmq.lib.harmonization.DateTime.convert</code>.</li> <li>Limit lxml dependency on 3.4 to <code>&lt;</code> 4.4.0 (incompatibility).</li> <li><code>intelmq.bots.parsers.netlab_360.parser</code>: Add support for hajime scanners.</li> <li><code>intelmq.bots.parsers.hibp.parser_callback</code>: A new parser to parse data retrieved from a HIBP Enterprise Subscription.</li> <li><code>intelmq.bots.parsers.shadowserver.parser</code>:</li> <li>Ability to detect the feed base on the reports's field <code>extra.file_name</code>, so the parameter <code>feedname</code> is no longer required and one configured parser can parse any feed (#1442).</li> </ul>"},{"location":"changelog/#experts_18","title":"Experts","text":"<ul> <li>Add geohash expert.</li> <li><code>intelmq.bots.experts.generic_db_lookup.expert</code></li> <li>new optional parameter <code>engine</code> with <code>postgresql</code> (default) and <code>sqlite</code> (new) as possible values.</li> </ul>"},{"location":"changelog/#outputs_14","title":"Outputs","text":"<ul> <li>Add <code>intelmq.bots.outputs.touch.output</code>.</li> <li><code>intelmq.bots.outputs.postgresql.output</code>:</li> <li>deprecated in favor of <code>intelmq.bots.outputs.sql.output</code></li> <li>Compatibility shim will be available in the 2.x series.</li> <li><code>intelmq.bots.outputs.sql.output</code> added generic SQL output bot. Comparted to</li> <li>new optional parameter <code>engine</code> with <code>postgresql</code> (default) and <code>sqlite</code> (new) as possible values.</li> <li><code>intelmq.bots.outputs.stomp.output</code>: New parameters <code>message_hierarchical</code>, <code>message_jsondict_as_string</code>, <code>message_with_type</code>, <code>single_key</code>.</li> </ul>"},{"location":"changelog/#documentation_18","title":"Documentation","text":"<ul> <li>Feeds:</li> <li>Add ViriBack feed.</li> <li>Add Have I Been Pwned Enterprise Callback.</li> <li><code>intelmq.tests.bots.outputs.amqptopic.test_output</code>: Added.</li> <li>Move the documentation of most bots from separate README files to the central Bots.md and feeds.yaml files.</li> </ul>"},{"location":"changelog/#tests_17","title":"Tests","text":"<ul> <li>Travis:</li> <li>Use UTC timezone.</li> <li>Tests for <code>utils.unzip</code>.</li> <li>Add a new asset: Zip archive with two files, same as with <code>.tar.gz</code> archive.</li> <li>Added tests for the Mail Attachment &amp; Mail URL collectors.</li> <li>Ignore logging-tests on Python 3.7 temporarily (#1342).</li> </ul>"},{"location":"changelog/#tools_15","title":"Tools","text":"<ul> <li>intelmqctl:</li> <li>Use green and red text color for some interactive output to indicate obvious errors or the absence of them.</li> <li>intelmqdump:</li> <li>New edit action <code>v</code> to modify a message saved in the dump (#1284).</li> </ul>"},{"location":"changelog/#contrib_9","title":"Contrib","text":"<ul> <li>malware name mapping:</li> <li>Add support for MISP treat actors data, see it's README for more information.<ul> <li>And handle empty synonyms in misp's galxies data.</li> </ul> </li> <li>Move apply-Script to the new EventDB directory</li> <li>EventDB: Scripts for applying malware name mapping and domain suffixes to an EventDB.</li> </ul>"},{"location":"changelog/#known-issues_18","title":"Known issues","text":"<ul> <li>MongoDB authentication: compatibility on different MongoDB and pymongo versions (#1439)</li> <li>ctl: shell colorizations are logged (#1436)</li> <li>http stream collector: retry on regular connection problems? (#1435)</li> <li>tests: capture logging with context manager (#1342)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#202-2019-10-14","title":"2.0.2 (2019-10-14)","text":""},{"location":"changelog/#core_19","title":"Core","text":"<ul> <li><code>intelmq.lib.bot.CollectorBot</code>: Support the deprecated parameter <code>feed</code> until version 2.2 as the documentation was not properly updated (#1445).</li> <li><code>intelmq.lib.bot.Bot</code>:</li> <li><code>_dump_message</code>: Wait for up to 60 seconds instead of 50 if the dump file is locked (the log message was said 60, but the code was for only 50).</li> <li><code>intelmq.lib.upgrades.v202_fixes</code></li> <li>Migration of deprecated parameter <code>feed</code> for Collectors.</li> <li>Ripe expert parameter <code>query_ripe_stat_ip</code> was not correctly configured in <code>v110_deprecations</code>, now use <code>query_ripe_stat_asn</code> as default if it does not exist.</li> <li><code>intelmq.lib.upgrades.v110_deprecations</code>: Fix upgrade of ripe expert configuration.</li> <li><code>intelmq.lib.bot_debugger</code>:</li> <li>Fix handling of empty messages generated by parser when user wanted to show the result by \"--show-sent\" flag.</li> <li>Fix handling of sent messages for bots using the <code>path_permissive</code> parameter (#1453).</li> <li><code>intelmq.lib.pipeline.Amqp</code>:</li> <li>use default SSL context for client purposes, fixes compatibility with python <code>&lt;</code> 3.6 if TLS is used.</li> <li>Reconnect once on sending messages if disconnect detected.</li> </ul>"},{"location":"changelog/#bots_20","title":"Bots","text":""},{"location":"changelog/#collectors_15","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.api.collector_api</code>:</li> <li>Handle non-existing IO loop in shutdown.</li> <li>Close socket on shutdown, fixes reloading.</li> <li>Marked as non-threadable.</li> <li><code>intelmq.bots.collectors.rt.collector_rt</code>: Check for matching URLs if no <code>attachment_regex</code> is given.</li> <li><code>intelmq.bots.collectors.stomp.collector_stomp</code>: Handle disconnects by actively reconnecting.</li> </ul>"},{"location":"changelog/#parsers_18","title":"Parsers","text":"<ul> <li><code>intelmq.bots.cymru.parser_cap_program</code>: Fix parsing of the new <code>$certname_$date.txt</code> report format (#1443):</li> <li>Support protocol ICMP.</li> <li>Fix error message for unsupported protocols.</li> <li>Support fields <code>destination_port_numbers</code>, <code>port</code>.</li> <li>Support for all proxy types without ports.</li> <li>Use Country Code of AS as <code>source.geolocation.cc</code>.</li> <li>Support for 'scanner' and 'spam' categories.</li> <li>Handle bogus lines with missing separator.</li> <li>Fix bug preventing use of old format after using the new format.</li> <li>Handle postfix <code>(total_count:..)</code> for destination port numbers.</li> </ul>"},{"location":"changelog/#experts_19","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.cymru_whois.expert</code>: Add optional parameter <code>overwrite</code>, current behavior was <code>True</code>, default if not given is <code>True</code> now, will change to <code>False</code> in 3.0.0 (#1452, #1455).</li> <li><code>intelmq.bots.experts.modify.expert</code>: Add optional parameter <code>overwrite</code>, current behavior was <code>True</code>, default if not given is <code>True</code> now, will change to <code>False</code> in 3.0.0 (#1452, #1455).</li> <li><code>intelmq.bots.experts.reverse_dns.expert</code>: Add optional parameter <code>overwrite</code>, current behavior was <code>True</code>, default if not given is <code>True</code> now, will change to <code>False</code> in 3.0.0 (#1452, #1455).</li> </ul>"},{"location":"changelog/#outputs_15","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.amqptopic.output</code>: use default SSL context for client purposes, fixes compatibility with python <code>&lt;</code> 3.6 if TLS is used.</li> </ul>"},{"location":"changelog/#packaging_10","title":"Packaging","text":"<ul> <li>Rules:</li> <li>Exclude intelmqsetup tool in packages</li> <li>Include update-rfiprisk-data in packages</li> </ul>"},{"location":"changelog/#tests_18","title":"Tests","text":"<ul> <li>Tests for <code>intelmq.lib.upgrades.v202_fixes</code>.</li> <li>Tests for <code>intelmq.lib.upgrades.v110_deprecations</code>.</li> <li>Extended tests for <code>intelmq.bots.parser.cymru.parser_cap_program</code>.</li> </ul>"},{"location":"changelog/#tools_16","title":"Tools","text":"<ul> <li>intelmqctl:</li> <li>More and more precise logging messages for botnet starting and restarting, enable and disable.</li> <li>No error message for disabled bots on botnet reload.</li> <li>Fix <code>upgrade-conf</code> is state file is empty or not existing.</li> <li>Use arpgarse's <code>store_true</code> action for flags instead of <code>store_const</code>.</li> <li>If the loading of the defaults configuration failed, a variable definition was missing and causing an exception (#1456).</li> </ul>"},{"location":"changelog/#contrib_10","title":"Contrib","text":"<ul> <li>Check MK Statistics Cronjob:</li> <li>Use <code>statistics_*</code> parameters.</li> <li>Make file executable</li> <li>Handle None values in <code>*.temporary.*</code> keys and treat them as 0.</li> <li>systemd:</li> <li>Add <code>PIDFile</code> parameter to service file.</li> </ul>"},{"location":"changelog/#known-issues_19","title":"Known issues","text":"<ul> <li>MongoDB authentication: compatibility on different MongoDB and pymongo versions (#1439)</li> <li>ctl: shell colorizations are logged (#1436)</li> <li>http stream collector: retry on regular connection problems? (#1435)</li> <li>tests: capture logging with context manager (#1342)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#201-2019-08-23","title":"2.0.1 (2019-08-23)","text":""},{"location":"changelog/#core_20","title":"Core","text":"<ul> <li><code>intelmq.lib.harmonization</code>:</li> <li><code>IPAddress</code>: Remove Scope/Zone IDs for IPv6 addresses in sanitation.</li> <li>All types: Handle <code>None</code> for validation and sanitation gracefully.</li> <li><code>intelmq.lib.bot</code>:</li> <li>fix parameters of ParserBot and CollectorBot constructors, allowing <code>intelmqctl run</code> with these bots again (#1414).</li> <li>Also run <code>rate_limit</code> after retry counter reset (#1431).</li> <li><code>__version_info__</code>:</li> <li>is now available in the top level module.</li> <li>uses integer values now instead of strings for numerical version parts</li> <li>Also provide (empty) <code>ROOT_DIR</code> for non-pip installations.</li> <li><code>intelmq.lib.upgrades</code>: New library file <code>upgrades</code> with upgrade functions.</li> <li><code>intelmq.lib.utils</code>:</li> <li>New function <code>setup_list_logging</code> for intelmqctl check an possibly others.<ul> <li>Fix return values (#1423).</li> </ul> </li> <li>New function <code>version_smaller</code> for version comparisons.</li> <li>New function <code>lazy_int</code> for version conversions.</li> <li><code>parse_logline</code>: Handle thread IDs.</li> <li><code>log</code> takes a new argument <code>logging_level_stream</code> for the logging level of the console handler.</li> <li>New constant <code>LOG_FORMAT_SIMPLE</code>, used by intelmqctl.</li> <li>New function <code>write_configuration</code> to write dicts to files in the correct json formatting.</li> <li>New function <code>create_request_session_from_bot</code>.</li> <li><code>intelmq.lib.pipeline</code>:</li> <li>AMQP:<ul> <li>Actually use <code>source/destination_pipeline_amqp_virtual_host</code> parameter.</li> <li>Support for SSL with <code>source/destination_pipeline_ssl</code> parameter.</li> </ul> </li> <li>pipeline base class: add missing dummy methods.</li> <li>Add missing return types.</li> <li>Redis: Evaluate return parameter of queue/key deletion.</li> <li>Variable <code>STATE_FILE_PATH</code> added.</li> </ul>"},{"location":"changelog/#development_7","title":"Development","text":"<ul> <li><code>intelmq.bin.intelmq_gen_docs</code>: For yaml use <code>safe_load</code> instead of unsafe <code>load</code>.</li> </ul>"},{"location":"changelog/#harmonization_3","title":"Harmonization","text":"<ul> <li>IPAddress type: Remove Scope/Zone IDs for IPv6 addresses in sanitation.</li> <li>TLP: Sanitation handles now more cases: case-insensitive prefixes and arbitrary whitespace between the prefix and the value (#1420).</li> </ul>"},{"location":"changelog/#bots_21","title":"Bots","text":""},{"location":"changelog/#collectors_16","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.http.collector_http</code>: Use <code>utils.create_request_session_from_bot</code>.</li> <li><code>intelmq.bots.collectors.http.collector_http_stream</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix some retries on connection timeouts.</li> <li><code>intelmq.bots.collectors.mail.collector_mail_url</code>: Use <code>utils.create_request_session_from_bot</code>.</li> <li><code>intelmq.bots.collectors.microsoft.collector_interflow</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts.</li> <li><code>intelmq.bots.collectors.rt.collector_rt</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts.</li> <li><code>intelmq.bots.collectors.twitter.collector_twitter</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts for non-twitter connections.</li> </ul>"},{"location":"changelog/#parsers_19","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.n6.parser_n6stomp</code>: use <code>malware-generic</code> instead of <code>generic-n6-drone</code> for unknown infected system events.</li> <li><code>intelmq.bots.parsers.abusech.parser_ip</code>: Support LastOnline column in feodo feed (#1400) and use it for <code>time.source</code> if available.</li> <li>Use lower case malware names as default, should not make a difference in practice.</li> <li>Fix handling of CSV header for feodotracker (#1417, #1418).</li> <li><code>intelmq.bots.parsers.netlab_360.parser</code>: Detect feeds with <code>https://</code> too.</li> </ul>"},{"location":"changelog/#experts_20","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.generic_db_lookup</code>: Recommend psycopg2-binary package.</li> <li><code>intelmq.bots.experts.modify.expert</code>:</li> <li>Compile regular expressions (all string rules) at initialization, improves the speed.</li> <li>Warn about old configuration style deprecation.</li> <li><code>intelmq.bots.experts.do_portal.expert</code>:</li> <li>Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts (#1432).</li> <li>Treat \"502 Bad Gateway\" as timeout which can be retried.</li> <li><code>intelmq.bots.experts.ripe.expert</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts.</li> <li><code>intelmq.bots.experts.url2fqdn.expert</code>: Support for IP addresses in hostnames (#1416).</li> <li><code>intelmq.bots.experts.national_cert_contact_certat.expert</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts.</li> </ul>"},{"location":"changelog/#outputs_16","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.postgresql</code>: Recommend psycopg2-binary package.</li> <li><code>intelmq.bots.outputs.amqptopic</code>:</li> <li>Shutdown: Close connection only if connection exists.</li> <li>Add support for pika &gt; 1. Pika changed the way it indicates (Non-)Acknowledgments of sent messages.</li> <li>Gracefully handle unroutable messages and give advice.</li> <li>Support for connections without authentication.</li> <li>Replace deprecated parameter <code>type</code> with <code>exchange_type</code> for <code>exchange_declare</code>, supporting pika &gt;= 0.11 (#1425).</li> <li>New parameters <code>message_hierarchical_output</code>, <code>message_with_type</code>, <code>message_jsondict_as_string</code>.</li> <li>New parameter <code>use_ssl</code> for SSL connections.</li> <li>New parameter <code>single_key</code> for sending single fields instead of the full event.</li> <li><code>intelmq.bots.outputs.mongodb.output</code>: Support for pymongo &gt;= 3.0.0 (#1063, PR#1421).</li> <li><code>intelmq.bots.outputs.file</code>: <code>time.*</code> field serialization: support for microseconds.</li> <li><code>intelmq.bots.outputs.mongodb.output</code>: Support for authentication in pymongo &gt;= 3.5 (#1062).</li> <li><code>intelmq.bots.outputs.restapi.output</code>: Use <code>utils.create_request_session_from_bot</code> and thus fix retries on connection timeouts.</li> </ul>"},{"location":"changelog/#documentation_19","title":"Documentation","text":"<ul> <li>Add certbund-contact to the ecosystem document.</li> <li>Rename the IDEA expert to \"IDEA Converter\".</li> <li>Add the new configuration upgrade function to the docs.</li> <li>User Guide:</li> <li>Clarify on Uninstallation</li> </ul>"},{"location":"changelog/#packaging_11","title":"Packaging","text":"<ul> <li>Do not execute the tcp collector tests during Debian and Ubuntu builds as they fail there.</li> </ul>"},{"location":"changelog/#tests_19","title":"Tests","text":"<ul> <li><code>intelmq.lib.test</code>: Disable statistics for test runs of bots.</li> <li><code>contrib.malware_name_mapping</code>: Added tests.</li> <li>Travis: Also run tests of contrib.</li> </ul>"},{"location":"changelog/#tools_17","title":"Tools","text":"<ul> <li><code>intelmqsetup</code>: Only change directory ownerships if necessary.</li> <li><code>intelmqctl</code>:/**---</li> <li>Provide new command <code>upgrade-conf</code> to upgrade configuration to a newer version.<ul> <li>Makes backups of configurations files on its own.</li> <li>Also checks for previously skipped or new functions of older versions and catches up.</li> </ul> </li> <li>Provides logging level on class layer.</li> <li>Fix <code>-q</code> flag for <code>intelmqctl list queues</code> by renaming its alternative name to <code>--non-zero</code> to avoid a name collision with the global <code>--quiet</code> parameter.</li> <li>For console output the string <code>intelmqctl:</code> at the beginning of each line is no longer present.</li> <li><code>check</code>: Support for the state file added. Checks if it exists and all upgrade functions have been executed successfully.</li> <li>Waits for up to 2 seconds when stopping a bot (#1434).</li> <li>Exits early on restart when stopping a bot did not work (#1434).</li> <li><code>intelmqctl run process -m</code> debugging: Mock acknowledge method if incoming message is mocked too, otherwise a different message is acknowledged.</li> <li>Queue listing for AMQP: Support non-default monitoring URLs, see User-Guide.</li> </ul>"},{"location":"changelog/#contrib_11","title":"Contrib","text":"<ul> <li>logcheck rules: Adapt ignore rule to cover the instance IDs of bot names.</li> <li>malware name mapping:</li> <li>Ignore lines in mapping starting with '#'.</li> <li>Optionally include malpedia data.</li> <li>Fix command line parsing for not arguments (#1427).</li> <li>bash-completion: Support for <code>intelmqctl upgrade-config</code> added.</li> </ul>"},{"location":"changelog/#known-issues_20","title":"Known issues","text":"<ul> <li>http stream collector: retry on regular connection problems? (#1435)</li> <li>tests: capture logging with context manager (#1342)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#200-2019-05-22","title":"2.0.0 (2019-05-22)","text":"<p>See also the changelog for 2.0.0.beta1 below.</p>"},{"location":"changelog/#configurations","title":"Configurations","text":"<ul> <li>Defaults: New parameters <code>statistics_host</code>, <code>statistics_port</code>, <code>statistics_databasae</code>, <code>statistics_password</code> for statistics redis database (#1402).</li> </ul>"},{"location":"changelog/#core_21","title":"Core","text":"<ul> <li>Add more and fix some existing type annotations.</li> <li><code>intelmq.lib.bot</code>:</li> <li>Use <code>statistics_*</code> parameters for bot's statistics (#1402).</li> <li>Introduce <code>collector_empty_process</code> for collectors with an empty <code>process()</code> method, hardcoded 1s minimum sleep time, preventing endless loops, causing high load (#1364).</li> <li>Allow to disable multithreading by initialization parameter, used by intelmqctl / the bot debugger (#1403).</li> <li><code>intelmq.lib.pipeline</code>: redis: OOM can also be low memory, add this to log message (#1405).</li> <li><code>intelmq.lib.harmonization</code>: ClassificationType: Update RSIT mapping (#1380):</li> <li>replace <code>botnet drone</code> with <code>infected-system</code></li> <li>replace <code>infected system</code> with <code>infected-system</code></li> <li>replace <code>ids alert</code> with <code>ids-alert</code></li> <li>replace <code>c&amp;c</code> with <code>c2server</code></li> <li>replace <code>malware configuration</code> with <code>malware-configuration</code></li> <li>sanitize replaces these values on the fly</li> <li>Allow using non-opt/ (LSB) paths with environment variable <code>INTELMQ_PATHS_NO_OPT</code>.</li> <li>Disable/disallow threading for all collectors and some other bots.</li> </ul>"},{"location":"changelog/#development_8","title":"Development","text":"<ul> <li>Applied isort to all core files and core-related test files, sorting the imports there (every thing except bots and bots' tests).</li> </ul>"},{"location":"changelog/#harmonization_4","title":"Harmonization","text":"<ul> <li>See the Core section for the changes in the allowed values for <code>classification.type</code>.</li> </ul>"},{"location":"changelog/#bots_22","title":"Bots","text":"<ul> <li>Use the new RSIT types in several bots, see above</li> </ul>"},{"location":"changelog/#parsers_20","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.spamhaus.parser_cert</code>: Added support for <code>extortion</code> events.</li> </ul>"},{"location":"changelog/#experts_21","title":"Experts","text":"<ul> <li>added <code>intelmq.bots.experts.do_portal.expert</code>.</li> </ul>"},{"location":"changelog/#outputs_17","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.elasticsearch.output</code>: Support for TLS added (#1406).</li> <li><code>intelmq.bots.outputs.tcp.output</code>: Support non-intelmq counterparts again. New parameter <code>counterpart_is_intelmq</code>, see NEWS.md for more information (#1385).</li> </ul>"},{"location":"changelog/#packaging_12","title":"Packaging","text":"<ul> <li>Update IntelMQ path fix patch after <code>INTELMQ_PATHS_NO_OPT</code> introduction, provide <code>INTELMQ_PATHS_OPT</code> environment variable for packaged instances.</li> </ul>"},{"location":"changelog/#tests_20","title":"Tests","text":"<ul> <li><code>test_conf</code>: For yaml use <code>safe_load</code> instead of unsafe <code>load</code>.</li> <li>Travis: Switch distribution from trusty to xenial, adapt scripts.</li> <li>Add Python 3.7 to tests.</li> <li>Don't use Cerberus 1.3 because of https://github.com/pyeve/cerberus/issues/489</li> <li>Add tests for <code>intelmqctl.lib.upgrades</code>.</li> </ul>"},{"location":"changelog/#tools_18","title":"Tools","text":"<ul> <li>intelmqdump: Fix creation of pipeline object by providing a logger.</li> <li>intelmqctl: Disable multithreading for interactive runs / the bot debugger (#1403).</li> </ul>"},{"location":"changelog/#known-issues_21","title":"Known issues","text":"<ul> <li>tests: capture logging with context manager (#1342)</li> <li>pymongo 3.0 deprecates used insert method  (#1063)</li> <li>pymongo &gt;= 3.5: authentication changes  (#1062)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#200beta1-2019-04-10","title":"2.0.0.beta1 (2019-04-10)","text":"<p>There are some features considered as beta and marked as such in the documentation, do not use them in production yet.</p>"},{"location":"changelog/#removals-of-deprecated-code","title":"Removals of deprecated code:","text":"<ul> <li>Removed compatibility shim <code>intelmq.bots.collectors.n6.collector_stomp</code>, use <code>intelmq.bots.collectors.stomp.collector</code> instead (see #1124).</li> <li>Removed compatibility shim <code>intelmq.bots.parsers.cymru_full_bogons.parser</code>, use <code>intelmq.bots.parsers.cymru.parser_full_bogons</code> instead.</li> <li>Removed compatibility shim handling deprecated parameter <code>feed</code> for collectors. Use <code>name</code> instead.</li> <li>Removed deprecated and unused method <code>intelmq.lib.pipeline.Pipeline.sleep</code>.</li> <li>Removed support for deprecated parameter <code>query_ripe_stat</code> in <code>intelmq.bots.experts.ripe.expert</code>, use <code>query_ripe_stat_asn</code> and <code>query_ripe_stat_ip</code> instead (#1291).</li> <li>Removed deprecated and unused function <code>intelmq.lib.utils.extract_tar</code>.</li> </ul>"},{"location":"changelog/#core_22","title":"Core","text":"<ul> <li><code>lib/pipeline</code>:</li> <li>Allow setting the broker of source and destination independently.</li> <li>Support for a new AMQP broker. See User Guide for configuration. (#1179)</li> <li><code>lib/bot</code>:</li> <li>Dump messages locks the dump file using Unix file locks (#574).</li> <li>Print idle/rate limit time also in human readable format (#1332).</li> <li><code>set_request_parameters</code>: Use <code>{}</code> as default proxy value instead of <code>None</code>. Allows updating of existing proxy dictionaries.</li> <li>Bots drop privileges if they run as root.</li> <li>Save statistics on successfully and failed processed messages in the redis database 3.</li> <li><code>lib/utils</code></li> <li>Function <code>unzip</code> to extract files from gz-zipped and/or tar-archives.</li> <li>New class <code>ListHandler</code>: new handler for logging purpose which saves the messages in a list.</li> <li>Add function <code>seconds_to_human</code>.</li> <li>Add function <code>drop_privileges</code>.</li> <li><code>parse_relative</code>: Strip string before parsing.</li> <li><code>parse_logline</code>: Do not convert the timestamps to UTC, leave them as is.</li> <li><code>lib/cache</code>:</li> <li>Allow ttl to be None explicitly.</li> <li>Overwrite existing cache keys in the database instead of discarding the new data.</li> <li><code>lib/bot</code>:</li> <li>Basic, but easy-to-configure multi-threading using python's <code>threading</code> library. See the User-Guide for more information (#111, #186).</li> <li><code>bin/intelmqctl</code>:</li> <li>Support for Supervisor as process manager (#693, #1360).</li> </ul>"},{"location":"changelog/#development_9","title":"Development","text":"<ul> <li>upgraded all files to python3-only syntax, e.g. use <code>super()</code> instead of <code>super(..., ...)</code> in all files. Migration from old to new string formatting has not been applied if the resulting code would be longer.</li> </ul>"},{"location":"changelog/#bots_23","title":"Bots","text":""},{"location":"changelog/#collectors_17","title":"Collectors","text":"<ul> <li>added <code>intelmq.bots.parsers.opendxl.collector</code> (#1265).</li> <li>added <code>intelmq.bots.collectors.api</code>: collecting data using an HTTP API (#123, #1187).</li> <li>added <code>intelmq.bots.collectors.rsync</code> (#1286).</li> <li><code>intelmq.bots.collectors.http.collector_http</code>:</li> <li>Add support for uncompressing of gz-zipped-files (#1270).</li> <li>Add time-delta support for time formatted URLs (#1366).</li> <li><code>intelmq.collectors.blueliv.collector_crimeserver</code>: Allow setting the API URL by parameter (#1336).</li> <li><code>intelmq.collectors.mail</code>:</li> <li>Use internal lib for functionality.</li> <li>Add <code>intelmq.bots.collectors.mail.collector_mail_body</code>.</li> <li>Support for <code>ssl_ca_certificate</code> parameter (#1362).</li> </ul>"},{"location":"changelog/#parsers_21","title":"Parsers","text":"<ul> <li>added <code>intelmq.bots.parsers.mcafee.parser_atd</code> (#1265).</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>:</li> <li>New parameter <code>columns_required</code> to optionally ignore parse errors for columns.</li> <li>added <code>intelmq.bots.parsers.cert_eu.parser_csv</code> (#1287).</li> <li>Do not overwrite the local <code>time.observation</code> with the data from the feed. The feed's field 'observation time' is now saved in the field <code>extra.cert_eu_time_observation</code>.</li> <li>Fix parsing of <code>asn</code> (renamed to <code>source asn</code>, <code>source.asn</code> internally) and handle existing <code>feed.accuracy</code> for parsing <code>confidence</code>.</li> <li>Update columns and mapping to current (2019-04-02) data.</li> <li>added <code>intelmq.bots.parsers.surbl.surbl</code></li> <li>added <code>intelmq.bots.parsers.html_table</code> (#1381).</li> <li><code>intelmq.bots.parsers.netlab_360.parser</code>: Handle empty lines containing blank characters (#1393).</li> <li><code>intelmq.bots.parsers.n6.parser_n6stomp</code>: Handle events without IP addresses.</li> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>: Handle new feed format.</li> <li><code>intelmq.bots.parsers.shadowserver</code>:</li> <li>Add support for the <code>Accessible-FTP</code> feed (#1391).</li> <li><code>intelmq.bots.parsers.dataplane.parser</code>:</li> <li>Fix parse errors and log more context (#1396).</li> <li>added <code>intelmq.bots.parsers.fraunhofer.parser_ddosattack_cnc.py</code> and <code>intelmq.bots.parsers.fraunhofer.parser_ddosattack_target.py</code> (#1373).</li> </ul>"},{"location":"changelog/#experts_22","title":"Experts","text":"<ul> <li>added <code>intelmq.bots.experts.recordedfuture_iprisk</code> (#1267).</li> <li>added <code>intelmq.bots.experts.mcafee.expert_mar</code> (1265).</li> <li>renamed <code>intelmq.bots.experts.ripencc_abuse_contact.expert</code> to <code>intelmq.bots.experts.ripe.expert</code>, compatibility shim will be removed in version 3.0.</li> <li>Added support for geolocation information in ripe expert with a new parameter <code>query_ripe_stat_geolocation</code> (#1317).</li> <li>Restructurize the expert and code de-duplicataion (#1384).</li> <li>Handle '?' in geolocation country data (#1384).</li> <li><code>intelmq.bots.experts.ripe.expert</code>:</li> <li>Use a requests session (#1363).</li> <li>Set the requests parameters once per session.</li> <li><code>intelmq.bots.experts.maxmind_geoip.expert</code>: New parameter <code>use_registered</code> to use the registered country (#1344).</li> <li><code>intelmq.bots.experts.filter.expert</code>: Support for paths (#1208).</li> </ul>"},{"location":"changelog/#outputs_18","title":"Outputs","text":"<ul> <li>added <code>intelmq.bots.experts.mcafee.output_esm</code> (1265).</li> <li>added <code>intelmq.bots.outputs.blackhole</code> (#1279).</li> <li><code>intelmq.bots.outputs.restapi.expert</code>:</li> <li>Set the requests parameters once per session.</li> <li><code>intelmq.bots.outputs.redis</code>:</li> <li>New parameter <code>hierarchichal_output</code> (#1388).</li> <li>New parameter <code>with_type</code>.</li> <li><code>intelmq.bots.outputs.amqptopic.output</code>: Compatibility with pika 1.0.0 (#1084, #1394).</li> </ul>"},{"location":"changelog/#documentation_20","title":"Documentation","text":"<ul> <li>added documentation for feeds</li> <li>CyberCrime Tracker</li> <li>Feodo Tracker Latest</li> <li>Feeds: Document abuse.ch URLhaus feed (#1379).</li> <li>Install and Upgrading: Use <code>intelmqsetup</code> tool.</li> <li>Added an ecosystem overview document describing related software.</li> </ul>"},{"location":"changelog/#tests_21","title":"Tests","text":"<ul> <li>Add tests of AMQP broker.</li> <li>Travis: Change the ownership of <code>/opt/intelmq</code> to the current user.</li> </ul>"},{"location":"changelog/#tools_19","title":"Tools","text":"<ul> <li><code>intelmqctl check</code>: Now uses the new <code>ListHandler</code> from utils to handle the logging in JSON output mode.</li> <li><code>intelmqctl run</code>: The message that a running bot has been stopped, is not longer a warning, but an informational message. No need to inform sysadmins about this intended behavior.</li> <li><code>intelmqdump</code>: Inspecting dumps locks the dump file using unix file locks (#574).</li> <li><code>intelmqctl</code>:</li> <li>After the check if the program runs as root, it tries to drop privileges. Only if this does not work, a warning is shown.</li> <li><code>intelmqsetup</code>: New tool for initializing an IntelMQ environment.</li> </ul>"},{"location":"changelog/#contrib_12","title":"Contrib","text":"<ul> <li><code>malware_name_mapping</code>:</li> <li>Added the script <code>apply_mapping_eventdb.py</code> to apply the mapping to an EventDB.</li> <li>Possibility to add local rules using the download tool.</li> <li><code>check_mk</code>:</li> <li>Added scripts for monitoring queues and statistics.</li> </ul>"},{"location":"changelog/#known-issues_22","title":"Known issues","text":"<ul> <li>Multi-threaded bots require multiple SIGTERMs (#1403)</li> <li>Stats can't be saved with AMQP if redis is password-protected (#1402)</li> <li>Update taxonomies to current RSIT and vice-versa (#1380)</li> <li>stomp collector bot constantly uses 100% of CPU (#1364)</li> <li>tests: capture logging with context manager (#1342)</li> <li>Consistent message counter log messages for all kind of bots (#1278)</li> <li>pymongo 3.0 deprecates used insert method  (#1063)</li> <li>pymongo &gt;= 3.5: authentication changes  (#1062)</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted. (#952)</li> <li>n6 parser: mapping is modified within each run (#905)</li> <li>reverse DNS: Only first record is used (#877)</li> <li>Corrupt dump files when interrupted during writing (#870)</li> </ul>"},{"location":"changelog/#112-2019-03-25","title":"1.1.2 (2019-03-25)","text":""},{"location":"changelog/#core_23","title":"Core","text":"<ul> <li><code>intelmq.lib.bot</code>:</li> <li><code>Bot.__handle_sighup</code>: Handle exceptions in <code>shutdown</code> method of bots.</li> </ul>"},{"location":"changelog/#harmonization_5","title":"Harmonization","text":"<ul> <li>FQDN: Disallow <code>:</code> in FQDN values to prevent values like '10.0.0.1:8080' (#1235).</li> </ul>"},{"location":"changelog/#bots_24","title":"Bots","text":""},{"location":"changelog/#collectors_18","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.stomp.collector</code></li> <li>Fix name of shutdown method, was ineffective in the past.</li> <li>Ignore <code>NotConnectedException</code> errors on disconnect during shutdown.</li> <li><code>intelmq.bots.collectors.mail.collector_mail_url</code>: Decode body if it is bytes (#1367).</li> <li><code>intelmq.bots.collectors.tcp.collector</code>: Timeout added. More stable version.</li> </ul>"},{"location":"changelog/#parsers_22","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.shadowserver</code>:</li> <li>Add support for the <code>Amplification-DDoS-Victim</code>, <code>HTTP-Scanners</code>, <code>ICS-Scanners</code> and <code>Accessible-Ubiquiti-Discovery-Service</code> feeds (#1368, #1383)</li> <li><code>intelmq.bots.parsers.microsoft.parser_ctip</code>:</li> <li>Workaround for mis-formatted data in <code>networkdestinationipv4</code> field (since 2019-03-14).</li> <li>Ignore \"hostname\" (\"destination.fqdn\") if it contains invalid data.</li> <li><code>intelmq.bots.parsers.shodan.parser</code>:</li> <li>In <code>minimal_mode</code>:<ul> <li>Fix the parsing, previously only <code>source.geolocation.cc</code> and <code>extra.shodan</code> was correctly filled with information.</li> <li>Add a <code>classification.type</code> = 'other' to all events.</li> <li>Added tests for this mode.</li> </ul> </li> <li>Normal mode:<ul> <li>Fix the parsing of <code>timestamp</code> to `time.source in the normal mode, previously no timezone information has been added and thus every event raised an exception.</li> <li>ISAKMP: Ignore <code>isakmp.aggressive</code>, as the content is same as <code>isakmp</code> or less.</li> </ul> </li> <li><code>intelmq.bots.parsers.abusech.parser_ip</code>: Re-structure the bot and support new format of the changed \"Feodo Tracker Domains\" feed.</li> <li><code>intelmq.bots.parsers.n6.parser</code>:</li> <li>Add parsing for fields \"confidence\", \"expires\" and \"source\".</li> <li>Add support for type \"bl-other\" (category \"other\").</li> </ul>"},{"location":"changelog/#experts_23","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.sieve.expert</code>: Fix key definition to allow field names with numbers (<code>malware.hash.md5</code>/<code>sha1</code>, #1371).</li> </ul>"},{"location":"changelog/#outputs_19","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.tcp.output</code>: Timeout added. When no separator used, awaits that every message is acknowledged by a simple \"Ok\" string to ensure more stability.</li> </ul>"},{"location":"changelog/#documentation_21","title":"Documentation","text":"<ul> <li>Install: Update operating system versions</li> <li>Sieve Expert: Fix <code>elsif</code> -&gt; <code>elif</code>.</li> <li>Rephrase the description of <code>time.*</code> fields.</li> <li>Feeds: New URL and format of the \"Feodo Tracker IPs\" feed. \"Feodo Tracker Domains\" has been discontinued.</li> </ul>"},{"location":"changelog/#packaging_13","title":"Packaging","text":""},{"location":"changelog/#tests_22","title":"Tests","text":"<ul> <li>Add missing <code>__init__.py</code> files in 4 bot's test directories. Previously these tests have never been executed.</li> <li><code>intelmq.lib.test</code>: Allow bot test class names with an arbitrary postfix separated by an underscore. E.g. <code>TestShodanParserBot_minimal</code>.</li> </ul>"},{"location":"changelog/#tools_20","title":"Tools","text":"<ul> <li>intelmqctl:</li> <li>status: Show commandline differences if a program with the expected PID could be found, but they do not match (previous output was <code>None</code>).</li> <li>Use logging level from defaults configuration if possible, otherwise intelmq's internal default. Previously, DEBUG was used unconditionally.</li> </ul>"},{"location":"changelog/#known-issues_23","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted (#952).</li> <li>stomp collector bot constantly uses 100% of CPU (#1364).</li> </ul>"},{"location":"changelog/#111-2019-01-15","title":"1.1.1 (2019-01-15)","text":""},{"location":"changelog/#core_24","title":"Core","text":"<ul> <li><code>lib/harmonization.py</code>: Change <code>parse_utc_isoformat</code> of <code>DateTime</code> class from private to public (related to #1322).</li> <li><code>lib/utils.py</code>: Add new function <code>object_pair_hook_bots</code>.</li> <li><code>lib.bot.py</code>:</li> <li><code>ParserBot</code>'s method <code>recover_line_csv</code> now also handles given <code>tempdata</code>.</li> <li><code>Bot.acknowledge_message()</code> deletes <code>__current_message</code> to free the memory, saves memory in idling parsers with big reports.</li> <li><code>start()</code>: Warn once per run if <code>error_dump_message</code> is set to false.</li> <li><code>Bot.start()</code>, <code>ParserBot.process()</code>: If errors happen on bots without destination pipeline, the <code>on_error</code> path has been queried and lead to an exception being raised.</li> <li><code>start()</code>: If <code>error_procedure</code> is pass and on pipeline errors, the bot retries forever (#1333).</li> <li><code>lib/message.py</code>:</li> <li>Fix add('extra', ..., overwrite=True): old extra fields have not been deleted previously (#1335).</li> <li>Do not ignore empty or ignored (as defined in <code>_IGNORED_VALUES</code>) values of <code>extra.*</code> fields for backwards compatibility (#1335).</li> <li><code>lib/pipeline.py</code> (<code>Redis.receive</code>): Wait in 1s steps if redis is busy loading its snapshot from disk (#1334).</li> </ul>"},{"location":"changelog/#default-configuration","title":"Default configuration","text":"<ul> <li>Set <code>error_dump_message</code> to true by default in <code>defaults.conf</code>.</li> <li>Fixed typo in <code>defaults.conf</code>: <code>proccess_manager</code> -&gt; <code>process_manager</code></li> </ul>"},{"location":"changelog/#development_10","title":"Development","text":"<ul> <li><code>bin/rewrite_config_files.py</code>: Fix ordering of BOTS file (#1327).</li> </ul>"},{"location":"changelog/#harmonization_6","title":"Harmonization","text":"<p>Update allowed classification fields to 2018-09-26 version (#802, #1350, #1380). New values for <code>classification.type</code> are per taxonomy: - Taxonomy 'intrusions':   - \"application-compromise\"   - \"burglary\"   - \"privileged-account-compromise\"   - \"unprivileged-account-compromise\" - Taxonomy 'fraud':   - \"copyright\"   - \"masquerade\"   - \"unauthorized-use-of-resources\" - Taxonomy 'information content security':   - \"data-loss\" - Taxonomy 'vulnerable':   - \"ddos-amplifier\"   - \"information-disclosure\"   - \"potentially-unwanted-accessible\"   - \"vulnerable-system\"   - \"weak-crypto\" - Taxonomy 'availability':   - \"dos\"   - \"outage\"   - \"sabotage\" - Taxonomy 'abusive-content':   - \"harmful-speech\"   - \"violence\" - Taxonomy 'malicious code':   - \"malware-distribution\" - Taxonomy 'information-gathering':   - \"social-engineering\"   - \"sniffing\" - Taxonomy 'information content security':   - \"Unauthorised-information-access\"   - \"Unauthorised-information-modification\"</p>"},{"location":"changelog/#bots_25","title":"Bots","text":""},{"location":"changelog/#collectors_19","title":"Collectors","text":"<ul> <li><code>intelmq.bots.collectors.http.collector_http</code>:</li> <li>Fix parameter name <code>extract_files</code> in BOTS (#1331).</li> <li>Fix handling of <code>extract_files</code> parameter if the value is an empty string.</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li>Explain <code>extract_files</code> parameter in docs and use a sane default in BOTS file.</li> <li><code>intelmq.bots.collectors.mail.collector_mail_url</code>:</li> <li>Handle HTTP status codes != 2xx the same as HTTP timeouts: No exception, but graceful handling.</li> <li>Handle HTTP errors (bad status code and timeouts) with <code>error_procedure</code> == 'pass' but marking the mail as read and logging the error.</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li><code>intelmq.bots.collectors.http.collector_http_stream</code>:</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li><code>intelmq.bots.collectors.microsoft.collector_interflow</code>:</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li><code>intelmq.bots.collectors.rt.collector_rt</code>:</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li>added <code>intelmq.bots.collectors.shodan.collector_stream</code> for collecting shodan stream data (#1096).</li> <li>Correctly check the version of the shodan library, it resulted in wrong comparisons with two digit numbers.</li> <li><code>intelmq.bots.collectors.microsoft.collector_interflow</code>:</li> <li>Add check if Cache's TTL is big enough compared to <code>not_older_than</code> and throw an error otherwise.</li> </ul>"},{"location":"changelog/#parsers_23","title":"Parsers","text":"<ul> <li><code>intelmq.bots.parsers.misp</code>: Fix Object attribute (#1318).</li> <li><code>intelmq.bots.parsers.cymru.parser_cap_program</code>:</li> <li>Add support for new format (extra data about botnet of 'bots').</li> <li>Handle AS number 0.</li> <li><code>intelmq.bots.parsers.shadowserver</code>:</li> <li>Spam URL reports: remove <code>src_naics</code>, <code>src_sic</code> columns.</li> <li>fix parsing of 'spam' events in ShadowServer's 'Botnet Drone Hadoop' Report (#1271).</li> <li>Add support in parser to ignore some columns in config file by using <code>False</code> as intelmq key.</li> <li>Add support for the <code>Outdated-DNSSEC-Key</code> and <code>Outdated-DNSSEC-Key-IPv6</code> feeds.</li> <li>Add support for the <code>Accessible-Rsync</code> feed.</li> <li>Document support for the <code>Open-LDAP-TCP</code> feed.</li> <li>Add support for <code>Accessible-HTTP</code> and <code>Open-DB2-Discovery-Service</code> (#1349).</li> <li>Add support for <code>Accessible-AFP</code> (#1351).</li> <li>Add support for <code>Darknet</code> (#1353).</li> <li><code>intelmq.bots.parsers.generic.parser_csv</code>: If the <code>skip_header</code> parameter was set to <code>True</code>, the header was not part of the <code>raw</code> field as returned by the <code>recover_line</code> method. The header is now saved and handled correctly by the fixed recovery method.</li> <li><code>intelmq.bots.parsers.cleanmx.parser</code>: Use field <code>first</code> instead of <code>firsttime</code> for <code>time.source</code> (#1329, #1348).</li> <li><code>intelmq.bots.parsers.twitter.parser</code>: Support for <code>url-normalize</code> &gt;= 1.4.1 and recommend it. Added new optional parameter <code>default_scheme</code>, passed to <code>url-normalize</code> (#1356).</li> </ul>"},{"location":"changelog/#experts_24","title":"Experts","text":"<ul> <li><code>intelmq.bots.experts.national_cert_contact_certat.expert</code>:</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li><code>intelmq.bots.experts.ripencc_abuse_contact.expert</code>:</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> <li><code>intelmq.bots.experts.sieve.expert</code>:</li> <li>check method: Load missing harmonization, caused an error for every check.</li> <li>Add text and more context to error messages.</li> <li>README: Fix 'modify' to 'update' (#1340).</li> <li>Handle empty rules file (#1343).</li> <li><code>intelmq.bots.experts.idea.expert</code>: Add mappings for new harmonization <code>classification.type</code> values, see above.</li> </ul>"},{"location":"changelog/#outputs_20","title":"Outputs","text":"<ul> <li><code>intelmq.bots.outputs.redis</code>:</li> <li>Fix sending password to redis server.</li> <li>Fix for redis-py &gt;= 3.0.0: Convert Event to string explicitly (#1354).</li> <li>Use <code>Redis</code> class instead of deprecated <code>StrictRedis</code> for redis-py &gt;= 3.0.0 (#1355).</li> <li><code>intelmq.bots.outputs.mongodb</code>:</li> <li>New parameter <code>replacement_char</code> (default: <code>'_'</code>) for non-hierarchical output as dots in key names are not allowed (#1324, #1322).</li> <li>Save value of fields <code>time.observation</code> and <code>time.source</code> as native datetime object, not as string (#1322).</li> <li><code>intelmq.bots.outputs.restapi.output</code>:</li> <li>Handle not installed dependency library <code>requests</code> gracefully.</li> </ul>"},{"location":"changelog/#documentation_22","title":"Documentation","text":"<ul> <li>FAQ</li> <li>Explanation and solution on orphaned queues.</li> <li>Section on how and why to remove <code>raw</code> data.</li> <li>Add or fix the tables of contents for all documentation files.</li> <li>Feeds:</li> <li>Fix Autoshun Feed URL (#1325).</li> <li>Add parameters <code>name</code> and <code>provider</code> to <code>intelmq/etc/feeds.yaml</code>, <code>docs/Feeds.md</code> and <code>intelmq/bots/BOTS</code> (#1321).</li> <li>Add SECURITY.md file.</li> </ul>"},{"location":"changelog/#packaging_14","title":"Packaging","text":"<ul> <li>Change the maintainer from Sasche Wilde to Sebastian Wagner (#1320).</li> </ul>"},{"location":"changelog/#tests_23","title":"Tests","text":"<ul> <li><code>intelmq.tests.lib.test_bot</code>: Skip <code>test_logging_level_other</code> on python 3.7 because of unclear behavior related to copies of loggers (#1269).</li> <li><code>intelmq.tests.bots.collectors.rt.test_collector</code>: Remove test because the REST interface of the instance has been closed (see also https://github.com/CZ-NIC/python-rt/issues/28).</li> </ul>"},{"location":"changelog/#tools_21","title":"Tools","text":"<ul> <li><code>intelmqctl check</code>: Shows more detailed information on orphaned queues.</li> <li><code>intelmqctl</code>:</li> <li>Correctly determine the status of bots started with <code>intelmqctl run</code>.</li> <li>Fix output of errors during bot status determination, making it compatible to IntelMQ Manager.</li> <li><code>check</code> subcommand: Show bot ID for messages also in JSON output.</li> <li><code>run [bot-id] process -m [message]</code> works also with bots without a configured source pipeline (#1307).</li> </ul>"},{"location":"changelog/#contrib_13","title":"Contrib","text":"<ul> <li>elasticsearch/elasticmapper: Add tlp field (#1308).</li> <li><code>feeds-config-generator/intelmq_gen_feeds_conf</code>:</li> <li>Add parameters to write resulting configuration directly to files (#1321).</li> <li>Handle collector's <code>feed.name</code> and <code>feed.provider</code> (#1314).</li> </ul>"},{"location":"changelog/#known-issues_24","title":"Known issues","text":"<ul> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted (#952).</li> <li>Tests: capture logging with context manager (#1342).</li> <li>stomp collector bot constantly uses 100% of CPU (#1364).</li> </ul>"},{"location":"changelog/#110-2018-09-05","title":"1.1.0 (2018-09-05)","text":"<ul> <li>Support for Python 3.3 has been dropped in IntelMQ and some dependencies of it. Python 3.3 reached its end of life and Python 3.4 or newer is a hard requirement now.</li> <li>The list of feeds docs/Feeds.md has now a machine-readable equivalent YAML file in intelmq/etc/feeds.yaml   A tool to convert from yaml to md has been added.</li> </ul>"},{"location":"changelog/#tools_22","title":"Tools","text":"<ul> <li><code>intelmq_gen_feeds_docs</code> added to bin directory, allows generating the Feeds.md documentation file from feeds.yaml</li> <li><code>intelmq_gen_docs</code> merges both <code>intelmq_gen_feeds_docs</code> and <code>intelmq_gen_harm_docs</code> in one file and automatically updates the documentation files.</li> </ul>"},{"location":"changelog/#intelmqctl","title":"intelmqctl","text":"<ul> <li><code>intelmqctl start</code> prints the bot's last error messages if the bot failed to start (#1021).</li> <li><code>intelmqctl start</code> message \"is running\" is printed every time. (Until now, it wasn't said when a bot was just starting.)</li> <li><code>intelmqctl start/stop/restart/reload/status</code> now has a \"--group\" flag which allows you to specify the group of the bots that should be influenced by the command.</li> <li><code>intelmqctl check</code> checks for defaults.conf completeness if the shipped file from the package can be found.</li> <li><code>intelmqctl check</code> shows errors for non-importable bots.</li> <li><code>intelmqctl list bots -q</code> only prints the IDs of enabled bots.</li> <li><code>intelmqctl list queues-and-status</code> prints both queues and bots statuses (so that it can be used in eg. intelmq-manager).</li> <li><code>intelmqctl run</code> parameter for showing a sent message.</li> <li><code>intelmqctl run</code> if message is sent to a non-default path, it is printed out.</li> <li><code>intelmqctl restart</code> bug fix; returned some half-nonsense, now returns return state of start and stop operation in a list (#1226).</li> <li><code>intelmqctl check</code>: New parameter <code>--no-connections</code> to prevent the command from making connections e.g. to the redis pipeline.s</li> <li><code>intelmqctl list queues</code>: don't display named paths among standard queues.</li> <li>The process status test failed if the PATH did not include the bot executables and the <code>which</code> command failed. Then the proccess's command line could not be compared correctly. The fix warns of this and adds a new status 'unknown' (#1297).</li> </ul>"},{"location":"changelog/#contrib_14","title":"Contrib","text":"<ul> <li>tool <code>feeds-config-generator</code> to automatically generate the collector and parser runtime and pipeline configurations.</li> <li><code>malware_name_mapping</code>: Download and convert tool for malware family name mapping has been added.</li> <li>Added a systemd script which creates systemd units for bots (#953).</li> <li><code>contrib/cron-jobs/update-asn-data</code>, <code>contrib/cron-jobs/update-geoip-data</code>, <code>contrib/cron-jobs/update-tor-nodes</code>: Errors produce proper output.</li> </ul>"},{"location":"changelog/#core_25","title":"Core","text":"<ul> <li>lib/bot</li> <li>use SIGTERM instead of SIGINT to stop bots (#981).</li> <li>Bots can specify a static method <code>check(parameters)</code> which can perform individual checks specific to the bot.     These functions will be called by <code>intelmqctl check</code> if the bot is configured with the given parameters</li> <li>top level bot parameters (description, group, module, name) are exposed as members of the class.</li> <li>The parameter <code>feed</code> for collectors is deprecated for 2.0 and has been replaced by the more consistent <code>name</code> (#1144).</li> <li>bug: allow path parameter for CollectorBot class.</li> <li>Handle errors better when the logger could not be initialized.</li> <li><code>ParserBot</code>:<ul> <li>For the csv parsing methods, <code>ParserBot.csv_params</code> is now used for all these methods.</li> <li><code>ParserBot.parse_csv_dict</code> now saves the field names in <code>ParserBot.csv_fieldnames</code>.</li> <li><code>ParserBot.parse_csv_dict</code> now saves the raw current line in <code>ParserBot.current_line</code>.</li> <li><code>ParserBot.recover_line_csv_dict</code> now uses the raw current line.</li> </ul> </li> <li>lib/message:</li> <li>Subitems in fields of type <code>JSONDict</code> (see below) can be accessed directly. E.g. you can do:     event['extra.foo'] = 'bar'     event['extra.foo'] # gives 'bar'     It is still possible to set and get the field as whole, however this may be removed or changed in the future:     event['extra'] = '{\"foo\": \"bar\"}'     event['extra'] # gives '{\"foo\": \"bar\"}'     \"Old\" bots and configurations compatible with 1.0.x do still work.     Also, the extra field is now properly exploded when exporting events, analogous to all other fields.     The <code>in</code> operator works now for both - the old and the new - behavior.</li> <li><code>Message.add</code>: The parameter <code>overwrite</code> accepts now three different values: <code>True</code>, <code>False</code> and <code>None</code> (new).     True: An existing value will be overwritten     False: An existing value will not be overwritten (previously an exception has been raised when the value was given).     None (default): If the value exists an <code>KeyExists</code> exception is thrown (previously the same as False).     This allows shorter code in the bots, as an 'overwrite' configuration parameter can be directly passed to the function.</li> <li>The message class has now the possibility to return a default value for non-existing fields, see <code>Message.set_default_value</code>.</li> <li>Message.get behaves the same like <code>Message.__getitem__</code> (#1305).</li> <li>Add <code>RewindableFileHandle</code> to utils making handling of CSV files more easy (optionally)</li> <li>lib/pipeline:</li> <li>you may now define more than one destination queues path the bot should pass the message to, see Pipelines (#1088, #1190).</li> <li>the special path <code>\"_on_error\"</code> can be used to pass messages to different queues in case of processing errors (#1133).</li> <li><code>lib/harmonization</code>: Accept <code>AS</code> prefix for ASN values (automatically stripped).</li> <li>added <code>intelmq.VAR_STATE_PATH</code> for variable state data of bots.</li> </ul>"},{"location":"changelog/#bots_26","title":"Bots","text":"<ul> <li>Removed print statements from various bots.</li> <li>Replaced various occurrences of <code>self.logger.error()</code> + <code>self.stop()</code> with <code>raise ValueError</code>.</li> </ul>"},{"location":"changelog/#collectors_20","title":"Collectors","text":"<ul> <li><code>bots.collectors.mail</code>:</li> <li>New parameters; <code>sent_from</code>: filter messages by sender, <code>sent_to</code>: filter messages by recipient</li> <li>More debug logs</li> <li><code>bots.collectors.n6.collector_stomp</code>: renamed to <code>bots.collectors.stomp.collector</code> (#716)</li> <li>bots.collectors.rt:</li> <li>New parameter <code>search_requestor</code> to search for field Requestor.</li> <li>Empty strings and <code>null</code> as value for search parameters are ignored.</li> <li>Empty parameters <code>attachment_regex</code> and <code>url_regex</code> handled.</li> <li><code>bots.collectors.http.collector_http</code>: Ability to optionally use the current time in parameter <code>http_url</code>, added parameter <code>http_url_formatting</code>.</li> <li><code>bots.collectors.stomp.collector</code>: Heartbeat timeout is now logged with log level info instead of warning.</li> <li>added <code>intelmq.bots.collectors.twitter.collector_twitter</code></li> <li>added <code>intelmq.bots.collectors.tcp.collector</code> that can be bound to another IntelMQ instance by a TCP output</li> <li><code>bots.collectors.microsoft.collector_interflow</code>: added for MS interflow API</li> <li>Automatic ungzipping for .gz files.</li> <li>added <code>intelmq.bots.collectors.calidog.collector_certstream</code> for collecting certstream data (#1120).</li> <li>added <code>intelmq.bots.collectors.shodan.collector_stream</code> for collecting shodan stream data (#1096).</li> <li>Add proxy support.</li> <li>Fix handling of parameter <code>countries</code>.</li> </ul>"},{"location":"changelog/#parsers_24","title":"Parsers","text":"<ul> <li><code>bots.parsers.shadowserver</code>:</li> <li>changed feednames. Please refer to it's README for the exact changes.</li> <li>If the conversion function fails for a line, an error is raised and the offending line will be handled according to the error handling configuration.     Previously errors like these were only logged and ignored otherwise.</li> <li>add support for the feeds<ul> <li><code>Accessible-Hadoop</code> (#1231)</li> <li><code>Accessible ADB</code> (#1285)</li> </ul> </li> <li>Remove deprecated parameter <code>override</code>, use <code>overwrite</code> instead (#1071).</li> <li>The <code>raw</code> values now are exactly the input with quotes unchanged, the ParserBot methods are now used directly (#1011).</li> <li>The Generic CSV Parser <code>bots.parsers.generic.parser_csv</code>:</li> <li>It is possible to filter the data before processing them using the new parameters <code>filter_type</code> and <code>filter_text</code>.</li> <li>It is possible to specify multiple columns using <code>|</code> character in parameter <code>columns</code>.</li> <li>The parameter <code>time_format</code> now supports <code>'epoch_millis'</code> for seconds since the Epoch, milliseconds are supported but not used.</li> <li>renamed <code>bots.parsers.cymru_full_bogons.parser</code> to <code>bots.parsers.cymru.parser_full_bogons</code>, compatibility shim will be removed in version 2.0</li> <li>added <code>bots.parsers.cymru.parser_cap_program</code></li> <li>added <code>intelmq.bots.parsers.zoneh.parser</code> for ZoneH feeds</li> <li>added <code>intelmq.bots.parsers.sucuri.parser</code></li> <li>added <code>intelmq.bots.parsers.malwareurl.parser</code></li> <li>added <code>intelmq.bots.parsers.threatminer.parser</code></li> <li>added <code>intelmq.bots.parsers.webinspektor.parser</code></li> <li>added <code>intelmq.bots.parsers.twitter.parser</code></li> <li>added <code>intelmq.bots.parsers.microsoft.parser_ctip</code></li> <li>ignore the invalid IP '0.0.0.0' for the destination</li> <li>fix the raw/dumped messages, did not contain the paling list previously.</li> <li>use the new harmonization field <code>tlp</code> instead of <code>extra.tlp</code>.</li> <li><code>bots.parsers.alienvault.parser_otx</code>: Save TLP data in the new harmonization field <code>tlp</code>.</li> <li>added <code>intelmq.bots.parsers.openphish.parser_commercial</code></li> <li>added <code>intelmq.bots.parsers.microsoft.parser_bingmurls</code></li> <li>added <code>intelmq.bots.parsers.calidog.parser_certstream</code> for parsing certstream data (#1120).</li> <li>added <code>intelmq.bots.parsers.shodan.parser</code> for parsing shodan data (#1096).</li> <li>change the classification type from 'botnet drone' to 'infected system' in various parses.</li> <li><code>intelmq.bots.parsers.spamhaus.parser_cert</code>: Added support for all known bot types.</li> </ul>"},{"location":"changelog/#experts_25","title":"Experts","text":"<ul> <li>Added sieve expert for filtering and modifying events (#1083)</li> <li>capable of distributing the event to appropriate named queues</li> <li><code>bots.experts.modify</code></li> <li>default rulesets: all malware name mappings have been migrated to the Malware Name Mapping repository ruleset. See the new added contrib tool for download and conversion.</li> <li>new parameter <code>case_sensitive</code> (default: True)</li> <li>Added wait expert for sleeping</li> <li>Added domain suffix expert to extract the TLD/Suffix from a domain name.</li> <li><code>bots.experts.maxmind_geoip</code>: New (optional) parameter <code>overwrite</code>, by default false. The current default was to overwrite!</li> <li><code>intelmq.bots.experts.ripencc_abuse_contact</code>:</li> <li>Extend deprecated parameter compatibility <code>query_ripe_stat</code> until 2.0 because of a logic bug in the compatibility code, use <code>query_ripe_stat_asn</code> and <code>query_ripe_stat_ip</code> instead (#1071, #1291).</li> <li>Handle HTTP status code 404 for DB AS queries.</li> <li>Add caching capability.</li> <li><code>intelmq/bots/experts/asn_lookup/update-asn-data</code>: Errors produce proper output on stdout/stderr.</li> <li><code>intelmq/bots/experts/maxmind_geoip/update-geoip-data</code>: Errors produce proper output on stdout/stderr.</li> <li><code>intelmq/bots/experts/tor_nodes/update-tor-nodes</code>: Errors produce proper output on stdout/stderr.</li> </ul>"},{"location":"changelog/#outputs_21","title":"Outputs","text":"<ul> <li><code>bots.outputs.file</code>:</li> <li>String formatting can be used for file names with new parameter <code>format_filename</code>.</li> <li>New parameter <code>single_key</code> to only save one field.</li> <li>New parameter <code>encoding_errors_mode</code> with default value <code>'strict'</code> to handle encoding errors for the files written.</li> </ul>"},{"location":"changelog/#harmonization_7","title":"Harmonization","text":"<ul> <li>Renamed <code>JSON</code> to <code>JSONDict</code> and added a new type <code>JSON</code>. <code>JSONDict</code> saves data internally as JSON, but acts like a dictionary. <code>JSON</code> accepts any valid JSON.</li> <li>fixed regex for <code>protocol.transport</code> it previously allowed more values than it should have.</li> <li>New ASN type. Like integer but checks the range.</li> <li>added <code>destination.urlpath</code> and <code>source.urlpath</code> to harmonization.</li> <li>New field <code>tlp</code> for tlp level specification.</li> <li>New TLP type. Allows all four tlp levels, removes 'TLP:' prefix and converts to upper case.</li> <li>Added new <code>classification.type</code> 'vulnerable client'</li> <li>Added <code>(destination|source).domain_suffix</code> to hold the TLD/domain suffix.</li> <li>New allowed value for <code>classification.type</code>: <code>infected system</code> for taxonomy <code>malicious code</code> (#1197).</li> </ul>"},{"location":"changelog/#requirements_1","title":"Requirements","text":"<ul> <li>Requests is no longer listed as dependency of the core. For depending bots the requirement is noted in their <code>REQUIREMENTS.txt</code> file.</li> </ul>"},{"location":"changelog/#documentation_23","title":"Documentation","text":"<ul> <li>Use Markdown for README again, as pypi now supports it.</li> <li>Developers Guide: Add instructions for pre-release testing.</li> </ul>"},{"location":"changelog/#packaging_15","title":"Packaging","text":"<ul> <li>Add logcheck configuration to the packages.</li> <li>Fix packaging of bash completion script.</li> </ul>"},{"location":"changelog/#tests_24","title":"Tests","text":"<ul> <li>Travis now correctly stops if a requirement could not be installed (#1257).</li> <li>New tests for validating <code>etc/feeds.yaml</code> and <code>bots/BOTS</code> using cerberus and schemes are added (#1166).</li> <li>New test for checking if <code>docs/Feeds.md</code> is up to date with <code>etc/feeds.yaml</code>.</li> </ul>"},{"location":"changelog/#known-bugs","title":"Known bugs","text":"<ul> <li>contrib: feeds-config-generator does not add feed name as parameter (#1314).</li> <li>bot debugger requires configured source pipeline (#1307).</li> <li>shadowserver parser: drone feed has spam events (#1271).</li> <li>debug log level on python 3.7 not applied (#1269).</li> <li><code>bots.experts.sieve</code> does not support textX (#1246).</li> <li>Bots started with IntelMQ-Manager stop when the webserver is restarted (#952).</li> </ul>"},{"location":"changelog/#106-bugfix-release-2018-08-31","title":"1.0.6 Bugfix release (2018-08-31)","text":""},{"location":"changelog/#bots_27","title":"Bots","text":""},{"location":"changelog/#collectors_21","title":"Collectors","text":"<ul> <li><code>bots.collectors.rt.collector_rt</code>: Log ticket id for downloaded reports.</li> </ul>"},{"location":"changelog/#parsers_25","title":"Parsers","text":"<ul> <li><code>bots.parsers.shadowserver</code>:</li> <li>if required fields do not exist in data, an exception is raised, so the line will be dumped and not further processed.</li> <li>fix a bug in the parsing of column <code>cipher_suite</code> in ssl poodle reports (#1288).</li> </ul>"},{"location":"changelog/#experts_26","title":"Experts","text":"<ul> <li>Reverse DNS Expert: ignore all invalid results and use first valid one (#1264).</li> <li><code>intelmq/bots/experts/tor_nodes/update-tor-nodes</code>: Use check.torproject.org as source as internet2.us is down (#1289).</li> </ul>"},{"location":"changelog/#outputs_22","title":"Outputs","text":"<ul> <li><code>bots.output.amqptopic</code>:</li> <li>The default exchange must not be declared (#1295).</li> <li>Unencodable characters are prepended by backslashes by default. Otherwise Unicode characters can't be encoded and sent (#1296).</li> <li>Gracefully close AMQP connection on shutdown of bot.</li> </ul>"},{"location":"changelog/#documentation_24","title":"Documentation","text":"<ul> <li>Bots: document redis cache parameters.</li> <li>Installation documentation: Ubuntu needs universe repositories.</li> </ul>"},{"location":"changelog/#packaging_16","title":"Packaging","text":"<ul> <li>Dropped support for Ubuntu 17.10, it reached its End of Life as of 2018-07-19.</li> </ul>"},{"location":"changelog/#tests_25","title":"Tests","text":"<ul> <li>Drop tests for Python 3.3 for the mode with all requirements, as some optional dependencies do not support Python 3.3 anymore.</li> <li><code>lib.test</code>: Add parameter <code>compare_raw</code> (default: <code>True</code>) to <code>assertMessageEqual</code>, to optionally skip the comparison of the raw field.</li> <li>Add tests for RT collector.</li> <li>Add tests for Shadowserver Parser:</li> <li>SSL Poodle Reports.</li> <li>Helper functions.</li> </ul>"},{"location":"changelog/#tools_23","title":"Tools","text":"<ul> <li><code>intelmqctl list</code> now sorts the output of bots and queues (#1262).</li> <li><code>intelmqctl</code>: Correctly handle the corner cases with collectors and outputs for getting/sending messages in the bot debugger (#1263).</li> <li><code>intelmqdump</code>: fix ordering of dumps in a file in runtime. All operations are applied to a sorted list (#1280).</li> </ul>"},{"location":"changelog/#contrib_15","title":"Contrib","text":"<ul> <li><code>cron-jobs/update-tor-nodes</code>: Use check.torproject.org as source as internet2.us is down (#1289).</li> </ul>"},{"location":"changelog/#known-issues_25","title":"Known issues","text":"<ul> <li>shadowserver parser: drone feed has spam events (#1271).</li> </ul>"},{"location":"changelog/#105-bugfix-release-2018-06-21","title":"1.0.5 Bugfix release (2018-06-21)","text":""},{"location":"changelog/#core_26","title":"Core","text":"<ul> <li><code>lib/message</code>: <code>Report()</code> can now create a Report instance from Event instances (#1225).</li> <li><code>lib/bot</code>:</li> <li>The first word in the log line <code>Processed ... messages since last logging.</code> is now adaptable and set to <code>Forwarded</code> in the existing filtering bots (#1237).</li> <li>Kills oneself again after proper shutdown if the bot is XMPP collector or output (#970). Previously these two bots needed two stop commands to get actually stopped.</li> <li><code>lib/utils</code>: log: set the name of the <code>py.warnings</code> logger to the bot name (#1184).</li> </ul>"},{"location":"changelog/#harmonization_8","title":"Harmonization","text":"<ul> <li>Added new types <code>unauthorized-command</code> and <code>unauthorized-login</code> to <code>intrusions</code> taxonomy.</li> </ul>"},{"location":"changelog/#bots_28","title":"Bots","text":""},{"location":"changelog/#collectors_22","title":"Collectors","text":"<ul> <li><code>bots.collectors.mail.collector_mail_url</code>: handle empty downloaded reports (#988).</li> <li><code>bots.collectors.file.collector_file</code>: handle empty files (#1244).</li> </ul>"},{"location":"changelog/#parsers_26","title":"Parsers","text":"<ul> <li>Shadowserver parser:</li> <li>SSL FREAK: Remove optional column <code>device_serial</code> and add several new ones.</li> <li>Fixed HTTP URL parsing for multiple feeds (#1243).</li> <li>Spamhaus CERT parser:</li> <li>add support for <code>smtpauth</code>, <code>l_spamlink</code>, <code>pop</code>, <code>imap</code>, <code>rdp</code>, <code>smb</code>, <code>iotscan</code>, <code>proxyget</code>, <code>iotmicrosoftds</code>, <code>automatedtest</code>, <code>ioturl</code>, <code>iotmirai</code>, <code>iotcmd</code>, <code>iotlogin</code> and <code>iotuser</code> (#1254).</li> <li>fix <code>extra.destination.local_port</code> -&gt; <code>extra.source.local_port</code>.</li> </ul>"},{"location":"changelog/#experts_27","title":"Experts","text":"<ul> <li><code>bots.experts.filter</code>: Pre-compile regex at bot initialization.</li> </ul>"},{"location":"changelog/#tests_26","title":"Tests","text":"<ul> <li>Ensure that the bots did process all messages (#291).</li> </ul>"},{"location":"changelog/#tools_24","title":"Tools","text":"<ul> <li><code>intelmqctl</code>:</li> <li><code>intelmqctl run</code> has a new parameter <code>-l</code> <code>--loglevel</code> to overwrite the log level for the run (#1075).</li> <li><code>intelmqctl run [bot-id] message send</code> can now send report messages (#1077).</li> <li><code>intelmqdump</code>:</li> <li>has now command completion for bot names, actions and queue names in interactive console.</li> <li>automatically converts messages from events to reports if the queue the message is being restored to is the source queue of a parser (#1225).</li> <li>is now capable to read messages in dumps that are dictionaries as opposed to serialized dicts as strings and does not convert them in the show command (#1256).</li> <li>truncated messages are no longer used/saved to the file after being shown (#1255).</li> <li>now again denies recovery of dumps if the corresponding bot is running. The check was broken (#1258).</li> <li>now sorts the dump by the time of the dump. Previously, the list was in random order (#1020).</li> </ul>"},{"location":"changelog/#known-issues_26","title":"Known issues","text":"<p>no known issues</p>"},{"location":"changelog/#104-bugfix-release-2018-04-20","title":"1.0.4 Bugfix release (2018-04-20)","text":"<ul> <li>make code style compatible to pycodestyle 2.4.0</li> <li>fixed permissions of some files (they were executable but shouldn't be)</li> </ul>"},{"location":"changelog/#core_27","title":"Core","text":"<ul> <li>lib/harmonization:</li> <li>FQDN validation now handles None correctly (raised an Exception).</li> <li>Fixed several sanitize() methods, the generic sanitation method were called by is_valid, not the sanitize methods (#1219).</li> </ul>"},{"location":"changelog/#bots_29","title":"Bots","text":"<ul> <li>Use the new pypi website at https://pypi.org/ everywhere.</li> </ul>"},{"location":"changelog/#parsers_27","title":"Parsers","text":"<ul> <li>Shadowserver parser:</li> <li>The fields <code>url</code> and <code>http_url</code> now handle HTTP URL paths and HTTP requests for all feeds (#1204).</li> <li>The conversion function <code>validate_fqdn</code> now handles empty strings correctly.</li> <li>Feed 'drone (hadoop)':<ul> <li>Correct validation of field <code>cc_dns</code>, will now only be added as <code>destination.fqdn</code> if correct FQDN, otherwise ignored. Previously this field could be saved in extra containing an IP address.</li> <li>Adding more mappings for added columns.</li> </ul> </li> <li>Added feeds:<ul> <li>Drone-Brute-Force</li> <li>IPv6-Sinkhole-HTTP-Drone</li> </ul> </li> <li>A lot of newly added fields and fixed conversions.</li> <li>Optional fields can now use one column multiple times.</li> <li>Add newly added columns of <code>Ssl-Scan</code> feed to parser</li> <li>Spamhaus CERT parser:</li> <li>fix parsing and classification for bot names 'openrelay', 'iotrdp', 'sshauth', 'telnetauth', 'iotcmd', 'iotuser', 'wpscanner', 'w_wplogin', 'iotscan'     see the NEWS file - Postgresql section - for all changes.</li> <li>CleanMX phishing parser: handle FQDNs in IP column (#1162).</li> </ul>"},{"location":"changelog/#experts_28","title":"Experts","text":"<ul> <li><code>bots.experts.ripencc_abuse_contact</code>: Add existing parameter <code>mode</code> to BOTS file.</li> </ul>"},{"location":"changelog/#tools_25","title":"Tools","text":"<ul> <li>intelmqctl check: Fixed and extended message for 'run_mode' check.</li> <li><code>intelmqctl start</code> botnet. When using <code>--type json</code>, no non-JSON information about wrong bots are output because that would confuse eg. intelmq-manager</li> </ul>"},{"location":"changelog/#tests_27","title":"Tests","text":"<ul> <li>lib/bot: No dumps will be written during tests (#934).</li> <li>lib/test: Expand regular expression on python version to match pre-releases (debian testing).</li> </ul>"},{"location":"changelog/#packaging_17","title":"Packaging","text":"<ul> <li>Static data is now included in source tarballs, development files are excluded</li> </ul>"},{"location":"changelog/#known-issues_27","title":"Known issues","text":"<ul> <li><code>bots.collectors/outputs.xmpp</code> must be killed two times (#970).</li> <li>When running bots with <code>intelmqctl run [bot-id]</code> the log level is always INFO (#1075).</li> <li><code>intelmqctl run [bot-id] message send [msg]</code> does only support Events, not Reports (#1077).</li> <li>A warning issued by the python warnings module is logged without the bot-id (#1184).</li> </ul>"},{"location":"changelog/#103-bugfix-release-2018-02-05","title":"1.0.3 Bugfix release (2018-02-05)","text":""},{"location":"changelog/#contrib_16","title":"Contrib","text":"<ul> <li>logrotate: use sudo for postrotate script</li> <li>cron-jobs: use the scripts in the bots' directories and link them (#1056, #1142)</li> </ul>"},{"location":"changelog/#core_28","title":"Core","text":"<ul> <li><code>lib.harmonization</code>: Handle idna encoding error in FQDN sanitation (#1175, #1176).</li> <li><code>lib.bot</code>:</li> <li>Bots stop when redis gives the error \"OOM command not allowed when used memory &gt; 'maxmemory'.\" (#1138).</li> <li>warnings of bots are caught by the logger (#1074, #1113).</li> <li>Fixed exitcodes 0 for graceful shutdowns .</li> <li>better handling of problems with pipeline and especially it's initialization (#1178).</li> <li>All parsers using <code>ParserBot</code>'s methods now log the sum of successfully parsed and failed lines at the end of each run (#1161).</li> </ul>"},{"location":"changelog/#harmonization_9","title":"Harmonization","text":"<ul> <li>Rule for harmonization keys is enforced (#1104, #1141).</li> <li>New allowed values for <code>classification.type</code>: <code>tor</code> &amp; <code>leak</code> (see n6 parser below ).</li> </ul>"},{"location":"changelog/#bots_30","title":"Bots","text":""},{"location":"changelog/#collectors_23","title":"Collectors","text":"<ul> <li><code>bots.collectors.mail.collector_mail_attach</code>: Support attachment file parsing for imbox versions newer than 0.9.5 (#1134).</li> </ul>"},{"location":"changelog/#parsers_28","title":"Parsers","text":"<ul> <li>All CSV parsers ignore NULL-bytes now, because the csv-library cannot handle it (#967, #1114).</li> <li><code>bots.parsers.shadowserver.parser</code>: Add Accessible Cisco Smart Install (#1122).</li> <li><code>bots.parsers.cleanmx.parser</code>: Handle new columns <code>first</code> and <code>last</code>, rewritten for XML feed. See NEWS.md for upgrade instructions (#1131, #1136, #1163).</li> <li><code>bots.parsers.n6.parser</code>: Fix classification mappings. See NEWS file for changes values (#738, #1127).</li> </ul>"},{"location":"changelog/#experts_29","title":"Experts","text":"<ul> <li><code>bots.experts.modify</code> default ruleset: changed conficker rule to catch more spellings.</li> </ul>"},{"location":"changelog/#outputs_23","title":"Outputs","text":"<ul> <li><code>bots.outputs.smtp.output</code>: Fix STARTTLS, threw an exception (#1152, #1153).</li> </ul>"},{"location":"changelog/#documentation_25","title":"Documentation","text":"<ul> <li><code>Release.md</code> add release procedure documentation</li> <li><code>Bots.md</code>: fix example configuration for modify expert</li> </ul>"},{"location":"changelog/#tools_26","title":"Tools","text":"<ul> <li>intelmqctl now exits with exit codes &gt; 0 when errors happened or the operation was not successful. Also, the status operation exits with 1, if bots are stopped, but enabled. (#977, #1143)</li> <li><code>intelmctl check</code> checks for valid <code>run_mode</code> in runtime configuration (#1140).</li> </ul>"},{"location":"changelog/#tests_28","title":"Tests","text":"<ul> <li><code>tests.lib.test_pipeline</code>: Redis tests clear all queues before and after tests (#1086).</li> <li>Repaired debian package build on travis (#1169).</li> <li>Warnings are not allowed by default, an allowed count can be specified (#1129).</li> <li><code>tests.bots.experts.cymru_whois/abusix</code>: Skipped on travis because of ongoing problems.</li> </ul>"},{"location":"changelog/#packaging_18","title":"Packaging","text":"<ul> <li>cron jobs: fix paths of executables</li> </ul>"},{"location":"changelog/#known-issues_28","title":"Known issues","text":"<ul> <li><code>bots.collectors/outputs.xmpp</code> must be killed two times (#970).</li> <li>When running bots with <code>intelmqctl run [bot-id]</code> the log level is always INFO (#1075).</li> <li><code>intelmqctl run [bot-id] message send [msg]</code> does only support Events, not Reports (#1077).</li> <li><code>python3 setup.py sdist</code> does not include static files in the resulting tarballs (#1146).</li> <li><code>bots.parsers.cleanmx.parser</code>: The cleanMX feed may have FQDNs as IPs in rare cases, such lines are dumped (#1162).</li> </ul>"},{"location":"changelog/#102-bugfix-release-2017-11-09","title":"1.0.2 Bugfix release (2017-11-09)","text":""},{"location":"changelog/#core_29","title":"Core","text":"<ul> <li><code>lib.message.add</code>: parameter force has finally been removed, should have been gone in 1.0.0.rc1 already</li> </ul>"},{"location":"changelog/#bots_31","title":"Bots","text":"<ul> <li><code>collectors.mail.collector_mail_url</code>: Fix bug which prevented marking emails seen due to disconnects from server (#852).</li> <li><code>parsers.spamhaus.parser_cert</code>: Handle/ignore 'AS?' in feed (#1111)</li> </ul>"},{"location":"changelog/#packaging_19","title":"Packaging","text":"<ul> <li>The following changes have been in effect for the built packages already since version 1.0.0</li> <li>Support building for more distributions, now supported: CentOS 7, Debian 8 and 9, Fedora 25 and 26, RHEL 7, openSUSE Leap 42.2 and 42.3 and Tumbleweed, Ubuntu 14.04 and 16.04</li> <li>Use LSB-paths for created packages (/etc/intelmq/, /var/lib/intelmq/, /run/intelmq/) (#470). Does does not affect installations with setuptools/pip.</li> <li>Change the debian package format from native to quilt</li> <li>Fix problems in postint and postrm scripts</li> <li>Use systemd-tmpfile for creation of /run/intelmq/</li> </ul>"},{"location":"changelog/#documentation_26","title":"Documentation","text":"<ul> <li>Add disclaimer on maxmind database in bot documentation and code and the cron-job (#1110)</li> </ul>"},{"location":"changelog/#101-bugfix-release-2017-08-30","title":"1.0.1 Bugfix release (2017-08-30)","text":""},{"location":"changelog/#documentation_27","title":"Documentation","text":"<ul> <li>Feeds: use more https:// URLs</li> <li>minor fixes</li> </ul>"},{"location":"changelog/#bots_32","title":"Bots","text":"<ul> <li>bots/experts/ripencc_abuse_contact/expert.py: Use HTTPS URLs for rest.db.ripe.net</li> <li>bots/outputs/file/output.py: properly close the file handle on shutdown</li> <li>bots/parser/shadowserver: If conversion of a value via conversion function fails, only log the function name, not the representation string (#1157).</li> </ul>"},{"location":"changelog/#core_30","title":"Core","text":"<ul> <li>lib/bot: Bots will now log the used intelmq version at startup</li> </ul>"},{"location":"changelog/#tools_27","title":"Tools","text":"<ul> <li>intelmqctl: To check the status of a bot, the command line of the running process is compared to the actual executable of the bot. Otherwise unrelated programs with the same PID are detected as running bot.</li> <li>intelmqctl: enable, disable, check, clear now support the JSON output</li> </ul>"},{"location":"changelog/#100-stable-release-2017-08-04","title":"1.0.0 Stable release (2017-08-04)","text":""},{"location":"changelog/#core_31","title":"Core","text":"<ul> <li>Fixes a thrown <code>FileNotFound</code> exception when stopping bots started with <code>intelmqctl run ...</code></li> </ul>"},{"location":"changelog/#harmonization_10","title":"Harmonization","text":"<ul> <li>leading dots in FQDNs are rejected and removed in sanitation (#1022, #1030)</li> </ul>"},{"location":"changelog/#bots_33","title":"Bots","text":"<ul> <li>shadowserver parser Accessible-SMB: smb_implant is converted to bool</li> </ul>"},{"location":"changelog/#100rc1-release-candidate-2017-07-05","title":"1.0.0.rc1 Release candidate (2017-07-05)","text":""},{"location":"changelog/#core_32","title":"Core","text":"<ul> <li>Changing the value of an existing field to <code>None</code> deletes the field.</li> <li><code>Message.update</code> now behaves like <code>dict.update</code>. The old behavior is implemented in <code>Message.change</code></li> <li>Deprecated <code>http_ssl_proxy</code> has been dropped, use <code>https_proxy</code> instead</li> <li>Deprecated <code>http_timeout</code> has been dropped, use <code>http_timeout_sec</code> instead</li> <li>Deprecated parameters force and ignore of <code>Message.add</code> have been removed</li> <li>Deprecated method <code>Message.contains</code> has been removed</li> <li>Drop support for deprecated configuration files <code>startup.conf</code> and <code>system.conf</code></li> </ul>"},{"location":"changelog/#development_11","title":"Development","text":"<ul> <li>We are now testing with and without optional libraries/lowest recommended versions and most current versions of required libraries</li> <li>Tests shadowserver with more data and checks for warnings and errors</li> <li>Tests: if bots log warnings this counts as failure if not allowed explicitly</li> <li>Tests: Bot preparation can be skipped</li> </ul>"},{"location":"changelog/#documentation_28","title":"Documentation","text":"<ul> <li>The branching/releasing mechanism has been documented</li> </ul>"},{"location":"changelog/#bots_34","title":"Bots","text":""},{"location":"changelog/#collectors_24","title":"Collectors","text":"<ul> <li>HTTP collectors: If <code>http_username</code> and <code>http_password</code> are both given and empty or null, 'None:None' has been used to authenticate. It is now checked that the username evaluates to non-false/null before adding the authentication. (fixes #1017)</li> <li>Dropped unmaintained and undocumented FTP(S) collectors <code>bots.collectors.ftp</code>. Also, the FTPS collector had a license conflict (#842).</li> <li><code>bots.collectors.http.collector_http_stream</code>: drop deprecated parameter <code>url</code> in favor of <code>http_url</code></li> </ul>"},{"location":"changelog/#parsers_29","title":"Parsers","text":"<ul> <li>Removed bots.parsers.openbl as the source is offline since end of may (#1018, https://twitter.com/sshblorg/status/854669263671615489)</li> <li>Removed bots.parsers.proxyspy as the source is offline (#1031)</li> <li>Shadowserver: Added Accessible SMB</li> <li><code>bots.experts.ripencc_abuse_contact</code> now has the two additional parameters <code>query_ripe_stat_asn</code> and <code>query_ripe_stat_ip</code>.   Deprecated parameter <code>query_ripe_stat</code>. New parameter <code>mode</code>.</li> <li><code>bots.experts.certat_contact</code> has been renamed to <code>bots.experts.national_cert_contact_certat</code> (#995)</li> <li><code>bots.experts.cymru_whois</code> ignores registry <code>other</code> (#996)</li> <li><code>bots.parsers.alienvault.parser_otx</code>: handle timestamps without floating point seconds</li> </ul>"},{"location":"changelog/#experts_30","title":"Experts","text":"<ul> <li>bots.experts.deduplicator: New parameter <code>bypass</code> to deactivate deduplication, default: False</li> </ul>"},{"location":"changelog/#v100dev8-beta-release-2017-06-14","title":"v1.0.0.dev8 Beta release (2017-06-14)","text":""},{"location":"changelog/#general-changes","title":"General changes","text":"<ul> <li>It's now configurable how often the bots are logging how much events they have sent, based on both the amount and time. (fixes #743)</li> <li>switch from pycodestyle to pep8</li> </ul>"},{"location":"changelog/#configuration_7","title":"Configuration","text":"<ul> <li>Added <code>log_processed_messages_count</code> (500) and <code>log_processed_messages_seconds</code> (900) to defaults.conf.</li> <li><code>http_timeout</code> has been renamed to <code>http_timeout_sec</code> and <code>http_timeout_max_tries</code> has been added.    This setting is honored by <code>bots.collectors.http.*</code> and <code>bots.collectors.mail.collector_mail_url</code>, <code>bots.collectors.rt</code> (only <code>http_timeout_sec</code>), <code>bots.outputs.restapi.output</code> and <code>bots.experts.ripencc_abuse_contact</code>.</li> </ul>"},{"location":"changelog/#documentation_29","title":"Documentation","text":"<ul> <li>Minor fixes</li> <li>Dropped install scripts, see INSTALL.md for more detailed instructions and explanations</li> <li>Better structure of INSTALL.md</li> <li>Better documentation of packages</li> </ul>"},{"location":"changelog/#tools_28","title":"Tools","text":"<ul> <li>added a bot debugger (#975)</li> <li>missing bot executable is detected and handled by intelmqctl (#979)</li> </ul>"},{"location":"changelog/#core_33","title":"Core","text":"<ul> <li>fix bug which prevented dumps to be written if the file did not exist (#986)</li> <li>Fix reload of bots regarding logging</li> <li>type annotations for all core libraries</li> </ul>"},{"location":"changelog/#bots_35","title":"Bots","text":"<ul> <li>added <code>bots.experts.idea</code>, bots.outputs.files</li> <li>possibility to split large csv Reports into Chunks, currently possible for mail url and file collector</li> <li>elasticsearch output supports HTTP Basic Auth</li> <li><code>bots.collectors.mail.collector_mail_url</code> and bots collectors.file.collector can split large reports (#680)</li> <li><code>bots.parsers.shadowserver</code> support the VNC feed</li> <li>handling of HTTP timeouts, see above #859</li> <li><code>bots.parsers.bambenek</code> saves the malware name</li> <li><code>bots.parsers.fraunhofer.parser_dga</code> saves the malware name</li> <li><code>bots.parsers.shadowserver</code> handles NULL bytes</li> <li><code>bots.parsers.abusech.parser_ransomware</code> handles the IP 0.0.0.0 specially</li> </ul>"},{"location":"changelog/#harmonization_11","title":"Harmonization","text":"<ul> <li>New field named <code>output</code> to support export to foreign formats</li> </ul>"},{"location":"changelog/#v100dev7-beta-release-2017-05-09","title":"v1.0.0.dev7 Beta release (2017-05-09)","text":""},{"location":"changelog/#documentation_30","title":"Documentation","text":"<ul> <li>more verbose installation and upgrade instructions</li> </ul>"},{"location":"changelog/#bots_36","title":"Bots","text":""},{"location":"changelog/#collectors_25","title":"Collectors","text":"<ul> <li><code>bots.collectors.alienvault_otx</code>: OTX library has been removed, install it as package instead</li> </ul>"},{"location":"changelog/#parsers_30","title":"Parsers","text":"<ul> <li>API keys will be removed from feed.url if possible</li> <li><code>intelmq.bots.parsers.shadowserver.config</code>:</li> <li>Added support for Compromised-Website, Open-Netis, NTP-Version, Sandbox-URL, Spam-URL, Vulnerable-ISAKMP, Botnet-CCIP, Accessible-RDP, Open-LDAP, Blacklisted-IP, Accessible-Telnet, Accessible-CWMP (#748).</li> </ul>"},{"location":"changelog/#experts_31","title":"Experts","text":"<ul> <li>added <code>bots.experts.field_reducer</code>, <code>bots.outputs.smtp</code>.</li> <li><code>bots.experts.deduplicator</code>: <code>ignore_keys</code> has been renamed to <code>filter_keys</code> and <code>filter_type</code> has been removed.</li> <li><code>bots.experts.modify</code>: The configuration is now list-based for a consistent ordering.</li> <li><code>bots.experts.tor_node</code> as an optional parameter <code>overwrite</code>.</li> </ul>"},{"location":"changelog/#harmonization_12","title":"Harmonization","text":"<ul> <li>New parameter and field named feed.documentation to link to documentation of the feed</li> <li><code>classification.taxonomy</code> is lower case only</li> </ul>"},{"location":"changelog/#v100dev6-beta-release-2017-01-11","title":"v1.0.0.dev6 Beta release (2017-01-11)","text":"<p>Changes between 0.9 and 1.0.0.dev6</p>"},{"location":"changelog/#general-changes_1","title":"General changes","text":"<ul> <li>Dropped support for Python 2, Python &gt;= 3.3 is needed</li> <li>Dropped startup.conf and system.conf. Sections in BOTS can be copied directly to runtime.conf now.</li> <li>Support two run modes: 'stream' which is the current implementation and a new one 'scheduled' which allows scheduling via cron or systemd.</li> <li>Helper classes for parser bots</li> <li>moved intelmq/conf to intelmq/etc</li> <li>cleanup in code and repository</li> <li>All bots capable of reloading on SIGHUP</li> <li>packages</li> <li>pip wheel format instead of eggs</li> <li>unittests for library and bots</li> <li>bots/BOTS now contains only generic and specific collectors. For a list of feeds, see docs/Feeds.md</li> </ul>"},{"location":"changelog/#tools_29","title":"Tools","text":"<ul> <li>DEV: <code>intelmq_gen_harm_docs</code>: added to generate Harmonization documentation</li> <li><code>intelmq_psql_initdb</code>: creates a table for a postgresql database using the harmonization fields</li> <li>intelmqctl: reworked argument parsing, many bugfixes</li> <li>intelmqdump: added to inspect dumped messages and reinsert them into the queues</li> <li>DEV: <code>rewrite_config_files</code>: added to rewrite configuration files with consistent style</li> </ul>"},{"location":"changelog/#bots_37","title":"Bots","text":""},{"location":"changelog/#collectors_26","title":"Collectors","text":"<ul> <li>added alienvault, alienvault otx, bitsight, blueiv, file, ftp, misp, n6, rtir, xmpp collector</li> <li>removed hpfeeds collector</li> <li>removed microsoft DCU collector</li> <li>renamed and reworked URL collector to HTTP</li> <li>reworked Mail collectors</li> </ul>"},{"location":"changelog/#parsers_31","title":"Parsers","text":"<ul> <li>source specific parsers added: abusech, alienvault, alienvault otx, anubisnetworks, autoshun, bambenek, bitcash, bitsight, blocklistde, blueliv, ci army, cleanmx, cymru_full_bogons, danger_rulez, dataplane, dshield (asn, block and domain), dyn, fraunhofer_dga, hphosts, malc0de, malwaredomains, misp, n6, netlab_360, nothink, openphish, proxyspy, spamhaus cert, taichung, turris, urlvir</li> <li>generic parsers added: csv, json</li> <li>specific parsers dropped: abusehelper (broken), arbor (source unavailable), bruteforceblocker, certeu, dragonresearchgroup parser (discontinued), hpfeeds, microsoft_dcu (broken), taichungcitynetflow, torexitnode parser</li> <li>renamed <code>intelmq.bots.parsers.spamhaus.parser</code> to <code>intelmq.bots.parsers.spamhaus.parser_drop</code>.   renamed <code>intelmq.bots.parsers.malwarepatrol.parser-dansguardian to</code>intelmq.bots.parsers.malwarepatrol.parser_dansguardian`</li> <li>renamed <code>intelmq.bots.parsers.taichungcitynetflow.parser to</code>intelmq.bots.parsers.taichung.parser`</li> <li>major rework of shadowserver parsers</li> <li>enhanced all parsers</li> </ul>"},{"location":"changelog/#experts_32","title":"Experts","text":"<ul> <li>Added experts: asnlookup, cert.at contact lookup, filter, generic db lookup, gethostbyname, modify, reverse dns, rfc1918, tor_nodes, url2fqdn</li> <li>removed experts: contactdb, countrycodefilter (obsolete), sanitizer (obsolete)</li> <li>renamed <code>intelmq.bots.experts.abusix.abusix</code> to <code>intelmq.bots.experts.abusix.expert</code> <code>intelmq.bots.experts.asnlookup.asnlookup</code> to <code>intelmq.bots.experts.asn_lookup.expert</code> <code>intelmq.bots.experts.cymru.expert</code> to <code>intelmq.bots.experts.cymru_whois.expert</code> <code>intelmq.bots.experts.deduplicator.deduplicator</code> to <code>intelmq.bots.experts.deduplicator.expert</code> <code>intelmq.bots.experts.geoip.geopip</code> to <code>intelmq.bots.experts.maxmind_geoip.expert</code> <code>intelmq.bots.experts.ripencc.ripencc</code> to <code>intelmq.bots.experts.ripencc_abuse_contact.expert</code> <code>intelmq.bots.experts.taxonomy.taxonomy</code> to <code>intelmq.bots.experts.taxonomy.expert</code></li> <li>enhanced all experts</li> <li>changed configuration syntax for <code>intelmq.bots.experts.modify</code> to a more simple variant</li> </ul>"},{"location":"changelog/#outputs_24","title":"Outputs","text":"<ul> <li>added: amqp, elasticsearch, redis, restapi, smtp, stomp, tcp, udp, xmpp</li> <li>removed: debug, intelmqmailer (broken), logcollector</li> <li>enhanced all outputs</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug fixes","text":"<ul> <li>FIX: all bots handle message which are None</li> <li>FIX: various encoding issues resolved in core and bots</li> <li>FIX: time.observation is generated in collectors, not in parsers</li> </ul>"},{"location":"changelog/#other-enhancements-and-changes","title":"Other enhancements and changes","text":"<ul> <li>TST: testing framework for core and tests. Newly introduced components should always come with proper unit tests.</li> <li>ENH: intelmqctl has shortcut parameters and can clear queues</li> <li>STY: code obeys PEP8, new code should always be properly formatted</li> <li>DOC: Updated user and dev guide</li> <li>Removed Message.contains, Message.update methods Message.add ignore parameter</li> </ul>"},{"location":"changelog/#configuration_8","title":"Configuration","text":"<ul> <li>ENH: New parameter and field named accuracy to represent the accuracy of each feed</li> <li>Consistent naming \"overwrite\" to switch overwriting capabilities of bots (as opposed to override)</li> <li>Renamed <code>http_ssl_proxy</code> to <code>https_proxy</code></li> <li>parameter <code>hierarchical_output</code> for many output bots</li> <li>deduplicator bot has a new required parameter to configure deduplication mode <code>filter_type</code></li> <li>deduplicator bot key ignore_keys was renamed to filter_keys</li> <li>The tor_nodes expert has a new parameter <code>overwrite</code>, which is by default <code>false</code>.</li> </ul>"},{"location":"changelog/#harmonization_13","title":"Harmonization","text":"<ul> <li>ENH: Additional data types: integer, float and Boolean</li> <li>ENH: Added descriptions and matching types to all fields</li> <li>DOC: harmonization documentation has same fields as configuration, docs are generated from configuration</li> <li>BUG: FQDNs are only allowed in IDN representation</li> <li>ENH: Removed UUID Type (duplicate of String)</li> <li>ENH: New type LowercaseString and UppercaseString, doing automatic conversion</li> <li>ENH: Removed UUID Type (duplicate of String)</li> <li>ENH: FQDNs are converted to lowercase</li> <li>ENH: regex, iregex and length checks when data is added to messages</li> </ul>"},{"location":"changelog/#most-important-changes","title":"Most important changes:","text":"<ul> <li><code>(source|destination).bgp_prefix</code> is now <code>(source|destination).network</code></li> <li><code>(source|destination).cc</code> is now <code>(source|destination).geolocation.cc</code></li> <li><code>(source|destination).reverse_domain_name</code> is <code>(source|destination).reverse_dns</code></li> <li><code>(source|destination).abuse_contact</code> is lower case only</li> <li><code>misp_id</code> changed to <code>misp.event_uuid</code></li> <li><code>protocol.transport</code> added, a fixed list of values is allowed</li> <li><code>protocol.application</code> is lower case only</li> <li><code>webshot_url</code> is now <code>screenshot_url</code></li> <li><code>additional_information</code> renamed to <code>extra</code>, must be JSON</li> <li><code>os.name</code>, <code>os.version</code>, <code>user_agent</code> removed in favor of <code>extra</code></li> <li>all hashes are lower case only</li> <li>added <code>malware.hash.(md5|sha1|sha256)</code>, removed <code>malware.hash</code></li> <li>New parameter and field named feed.accuracy to represent the accuracy of each feed</li> <li>New parameter and field named feed.provider to document the name of the source of each feed</li> <li>New field <code>classification.identifier</code> -<code>classification.taxonomy</code> is now lower case only</li> </ul>"},{"location":"changelog/#known-issues_29","title":"Known issues","text":"<ul> <li>Harmonization: hashes are not normalized and classified, see also issue #394 and pull #634</li> </ul>"},{"location":"changelog/#contrib_17","title":"Contrib","text":"<ul> <li>ansible and vagrant scripts added</li> <li>bash-completion for shells add</li> <li>cron job scripts to update lookup data added</li> <li>logcheck example rules added</li> <li>logrotate configuration added</li> </ul>"},{"location":"changelog/#20160618","title":"2016/06/18","text":"<ul> <li>improvements in pipeline:</li> <li>PipelineFactory to give possibility to easily add a new broker (Redis, ZMQ, etc..)</li> <li>Splitter feature: if this option is enable, will split the events in source queue to multiple destination queues</li> <li>add different messages support:</li> <li>the system is flexible to define a new type of message like 'tweet' without change anything in bot.py, pipeline.py. Just need to add a new class in message.py and harmonization.conf</li> <li>add harmonization support</li> <li>in harmonization.conf is possible to define the fields of a specific message in json format.</li> <li>the harmonization.py has data types witch contains sanitize and validation methods that will make sure that the values are correct to be part of an event.</li> <li>Error Handling</li> <li>multiple parameters in configuration which gives possibility to define how bot will handle some errors. Example of parameters:</li> <li><code>error_procedure</code> - retry or pass in case of error</li> <li><code>error_retry_delay</code> - time in seconds to retry</li> <li><code>error_max_retries</code> - number of retries</li> <li><code>error_log_message</code> - log or not the message in error log</li> <li><code>error_log_exception</code> - log or not the exception in error log</li> <li><code>error_dump_message</code> - log or not the message in dump log to be fixed and re-insert in pipeline</li> <li>Exceptions</li> <li>custom exceptions for IntelMQ</li> <li>Defaults configurations</li> <li>new configuration file to specify the default parameters which will be applied to all bots. Bots can overwrite the configurations.</li> <li>New bots/feeds</li> </ul>"},{"location":"changelog/#20150603-aaron","title":"2015/06/03 (aaron)","text":"<ul> <li>fixed the license to AGPL in setup.py</li> <li>moved back the documentation from the wiki repo to <code>docs/</code>. See #205.</li> <li>added python-zmq as a setup requirement in UserGuide . See #206</li> </ul>"},{"location":"community/","title":"Community","text":""},{"location":"community/#intelmq-organizational-structure","title":"IntelMQ Organizational Structure","text":"<p>The central IntelMQ components are maintained by multiple people and organizations in the IntelMQ community. Please note that some components of the IntelMQ Universe can have a different project governance, but all are part of the IntelMQ universe and community.</p>"},{"location":"community/#intelmq-enhancement-proposals-iep","title":"IntelMQ Enhancement Proposals (IEP)","text":"<p>Major changes, including architecture, strategy and the internal data format, require so-called IEPs, IntelMQ Enhancement Proposals. Their name is based on the famous \"PEPs\" of Python.</p> <p>IEPs are collected in the separate IEP Repository.</p>"},{"location":"community/#code-reviews-and-merging","title":"Code-Reviews and Merging","text":"<p>Every line of code checked in for the IntelMQ Core, is checked by at least one trusted developer (excluding the author of the changes) of the IntelMQ community. Afterwards, the code can be merged. Currently, these three contributors, have the permission to push and merging code to IntelMQ Core, Manager and API:</p> <ul> <li>Aaron Kaplan (aaronkaplan)</li> <li>Sebastian Wagner (sebix)</li> <li>Sebastian Waldbauer (waldbauer-certat)</li> </ul> <p>Additionally, these people significantly contributed to IntelMQ:</p> <ul> <li>Bernhard Reiter</li> <li>Birger Schacht</li> <li>Edvard Rejthar</li> <li>Filip Pokorn\u00fd</li> <li>Karl-Johan Karlsson</li> <li>Marius Karotkis</li> <li>Marius Urkus</li> <li>Mikk Margus M\u00f6ll</li> <li>navtej</li> <li>Pavel K\u00e1cha</li> <li>Robert \u0160efr</li> <li>Tomas Bellus</li> <li>Zach Stone</li> </ul>"},{"location":"community/#short-history","title":"Short history","text":"<p>In 2013 and 2014 Aaron Kaplan (back then working at CERT.at) was researching ways to improve the automation of handling and distributing (IT security) incident reports across a whole country as part of the job of a national CERT. We would get many notifications of vulnerable systems, hacked systems, phishing domains, etc etc. The amount of reports we were getting required an automated solution. Back then, Aaron and a couple of other people looked at a tool called \"Abusehelper\". There was an open source version of Abusehelper, but it was deemed quite complex and complicated at that time.</p> <p>Frustration with this tool led to discussions amongst multiple CERTs.</p> <p>The idea and overall concept of an free, truly open source, simple (KISS principle! Keep it simple, stupid) community owned and maintained, extendible software for automated incident handling was born at an meeting of several European CSIRTs in Heraklion, Greece, in 2014. Following the event, Tom\u00e1s Lima \"SYNchroACK\" (working at CERT.pt back then) created IntelMQ from scratch. IntelMQ was born on June 24th, 2014. A major support came from CERT.pt at this early stage. Aaron Kaplan (CERT.at until 2020) engaged in the long-term advancement and from 2015 on, CERT.at took the burden of the maintenance and development (Sebastian Wagner 2015-2021 at CERT.at). From 2016 onward, CERT.at started projects, initiated and lead by Aaron Kaplan, receiving CEFF-funding from the European Union to support IntelMQ's development. IntelMQ became a software component of the EU-funded MeliCERTes framework for CSIRTs. In 2020, IntelMQ's organizational structure and architectural development gained new thrive by the newly founded Board and the start of the IEP process, creating more structure and more transparency in the IntelMQ community's decisions.</p>"},{"location":"help/","title":"Help","text":""},{"location":"help/#getting-help","title":"Getting help","text":"<p>In case you are lost, you need assistance or something is not discussed in this guide, you can ask the community for help. To be most efficient in seeking help, please describe your problem or question with all necessary information, for example:</p> <ul> <li>Name and version of the operating system</li> <li>Way of installation (deb/rpm packages, PyPI, docker, local git repository)</li> <li>Used bots and configuration</li> <li>Logs of bots or terminal output</li> <li>Any other useful messages, screenshots</li> </ul> <p>Please report any errors and suggest improvements via issues. Thank you!</p>"},{"location":"help/#github","title":"GitHub","text":"<p>GitHub offers a discussion platform where you can ask questions and seek assistance.</p> <p>To report bugs, GitHub issues are the ideal place to do so. Every IntelMQ component has it's own repository on GitHub, with a separate Issue tracker.</p> <p>To participate on GitHub, you first need to create an account on the platform.</p>"},{"location":"help/#mailing-list","title":"Mailing list","text":"<p>The most traditional way is to ask your question, make a proposal or discuss a topic on the mailing IntelMQ Users mailing list. You need to subscribe to the mailing list before posting, but the archive is publicly available: IntelMQ Users Archive.</p>"},{"location":"help/#assistance","title":"Assistance","text":"<p>If your organisation is a member of the CSIRTs Network, you are eligible for support in the MeliCERTes project. You can also ask on for individual support, some members offer support, including, but not limited to:</p> <ul> <li>Aaron Kaplan (founder of IntelMQ)</li> <li>Institute for Common Good Technology (chairmen Sebastian Wager is an IntelMQ maintainer and developer)</li> <li>Intevation GmbH (Develops and maintains several IntelMQ components)</li> </ul>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":"<p>The complete IntelMQ universe consists of the following components:</p> <ul> <li>IntelMQ</li> <li>IntelMQ API</li> <li>IntelMQ Manager</li> <li>additional tools</li> <li>useful scripts</li> </ul>"},{"location":"overview/#intelmq","title":"IntelMQ","text":"<p>This project contains the core functionality.</p> <p>The Core includes all the components required for processing data feeds. This includes the bots, configuration, pipeline, the internal data format, management tools etc.</p> <p>\u2192 Repository: IntelMQ</p>"},{"location":"overview/#intelmq-api","title":"IntelMQ API","text":"<p>This is an extension of IntelMQ providing hug based REST API for remote management.</p> <p>\u2192 Repository: IntelMQ API</p>"},{"location":"overview/#intelmq-manager","title":"IntelMQ Manager","text":"<p>The Manager is the most known software and can be seen as the face of IntelMQ. It's goal is to provide an intuitive web interface to allow non-programmers to specify the data flow in IntelMQ.</p> <p>\u2192 Repository: IntelMQ Manager</p> <p></p>"},{"location":"overview/#additional-tools","title":"Additional tools","text":"<p>Here you can find a list of additional tools. If you think something is missing, please let us know!</p> <p>Unless stated otherwise, the tools are maintained by the IntelMQ community.</p>"},{"location":"overview/#intelmq-webinput-csv","title":"IntelMQ Webinput CSV","text":"<p>A web-based interface to ingest CSV data into IntelMQ with on-line validation and live feedback.</p> <p>This interface allows inserting \"one-shot\" data feeds into IntelMQ without the need to configure bots in IntelMQ.</p> <p>Developed and maintained by CERT.at.</p> <p>\u2192 Repository: intelmq-webinput-csv</p> <p></p>"},{"location":"overview/#intelmq-mailgen","title":"IntelMQ Mailgen","text":"<p>A solution allowing an IntelMQ setup with a complex contact database, managed by a web interface and sending out aggregated email reports. In different words: To send grouped notifications to network owners using SMTP.</p> <p>Developed and maintained by Intevation, initially funded by BSI.</p> <p>It consists of the following three components, which can also be used on their own.</p>"},{"location":"overview/#intelmq-certbund-contact","title":"IntelMQ CertBUND Contact","text":"<p>The certbund-contact consists of two IntelMQ expert bots, which fetch and process the information from the contact database, and scripts to import RIPE data into the contact database. Based on user-defined rules, the experts determine to which contact the event is to be sent to, and which e-mail template and attachment format to use.</p> <p>\u2192 Repository: intelmq-certbund-contact</p>"},{"location":"overview/#intelmq-fody","title":"IntelMQ Fody","text":"<p>Fody is a web based interface for Mailgen. It allows to read and edit contacts, query sent mails (tickets) and call up data from the PostgreSQL database.</p> <p>It can also be used to just query the database without using Mailgen.</p> <p></p> <p>\u2192 Repository: intelmq-fody</p> <p>\u2192 Repository: intelmq-fody-backend</p>"},{"location":"overview/#intelmq-mailgen_1","title":"intelmq-mailgen","text":"<p>Sends emails with grouped event data to the contacts determined by the certbund-contact. Mails can be encrypted with PGP.</p> <p>\u2192 Repository: intelmq-mailgen</p>"},{"location":"overview/#constituency-portal-tuency","title":"\"Constituency Portal\" tuency","text":"<p>A web application helping CERTs to enable members of their constituency to self-administrate how they get warnings related to their network objects (IP addresses, IP ranges, autonomous systems, domains). tuency is developed by Intevation for CERT.at.</p> <p>If features organizational hierarchies, contact roles, self-administration and network objects per organization (Autonomous systems, network ranges, (sub)domains, RIPE organization handles). A network object claiming and approval process prevents abuse. An hierarchical rule-system on the network objects allow fine-grained settings. The tagging system for contacts and organization complement the contact-management features of the portal. Authentication is based on keycloak, which enables the re-use of the user accounts in the portal. The integrated API enables IntelMQ to query the portal for the right abuse contact and notification settings with the <code>intelmq.bots.experts.tuency.expert</code> expert bot.</p> <p></p> <p>\u2192 Repository: tuency</p>"},{"location":"overview/#constituency-portal-do-portal-deprecated","title":"\"Constituency Portal\" do-portal (deprecated)","text":"<p>Warning</p> <p>The do-portal is deprecated and succeeded by tuency.</p> <p>A contact portal with organizational hierarchies, role functionality and network objects based on RIPE, allows self-administration by the contacts. Can be queried from IntelMQ and integrates the stats-portal.</p> <p>Originally developed by CERT-EU, then adapted by CERT.at.</p> <p>\u2192 Repository: do-portal</p>"},{"location":"overview/#stats-portal","title":"Stats Portal","text":"<p>A Grafana-based statistics portal for the <code>eventdb</code>{.interpreted-text role=\"doc\"}. Can be integrated into do-portal. It uses aggregated data to serve statistical data quickly.</p> <p></p> <p>\u2192 Repository: stats-portal</p>"},{"location":"overview/#malware-name-mapping","title":"Malware Name Mapping","text":"<p>A mapping for malware names of different feeds with different names to a common family name.</p> <p>\u2192 Repository: malware_name_mapping</p>"},{"location":"overview/#intelmq-docker","title":"IntelMQ-Docker","text":"<p>A repository with tools for IntelMQ docker instance.</p> <p>Developed and maintained by CERT.at.</p> <p>\u2192 Repository: intelmq-docker</p>"},{"location":"overview/#useful-scripts","title":"Useful scripts","text":"<p>The list of useful scripts contributed to the IntelMQ universe can be found in the main repository.</p> <p>\u2192 Repository: intelmq/contrib</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#found-a-security-issue","title":"Found a security issue?","text":"<p>In case you find security-relevant bugs in IntelMQ, please contact team@cert.at. More information including the PGP key can be found on CERT.at's website.</p>"},{"location":"admin/beta-features/","title":"Beta Features","text":""},{"location":"admin/beta-features/#beta-features","title":"Beta Features","text":""},{"location":"admin/beta-features/#using-supervisor-as-a-process-manager","title":"Using Supervisor as a Process Manager","text":"<p>Warning</p> <p>Do not use it in production environments yet! It has not been tested thoroughly yet.</p> <p>Supervisor is process manager written in Python. The main advantage is that it take care about processes, so if bot process exit with failure (exit code different than 0), supervisor try to run it again. Another advantage is that it not require writing PID files.</p> <p>This was tested on Ubuntu 18.04.</p> <p>Install supervisor. <code>supervisor_twiddler</code> is extension for supervisor, that makes possible to create process dynamically. (Ubuntu <code>supervisor</code> package is currently based on Python 2, so <code>supervisor_twiddler</code> must be installed with Python 2 <code>pip</code>.)</p> <pre><code>apt install supervisor python-pip\npip install supervisor_twiddler\n</code></pre> <p>Create default config <code>/etc/supervisor/conf.d/intelmq.conf</code> and restart <code>supervisor</code> service:</p> <pre><code>[rpcinterface:twiddler]\nsupervisor.rpcinterface_factory=supervisor_twiddler.rpcinterface:make_twiddler_rpcinterface\n\n[group:intelmq]\n</code></pre> <p>Change IntelMQ process manager in the global configuration:</p> <pre><code>process_manager: supervisor\n</code></pre> <p>After this it is possible to manage bots like before with <code>intelmqctl</code> command.</p>"},{"location":"admin/beta-features/#using-amqp-message-broker","title":"Using AMQP Message Broker","text":"<p>Starting with IntelMQ 1.2 the AMQP protocol is supported as message queue. To use it, install a broker, for example RabbitMQ. The configuration and the differences are outlined here. Keep in mind that it is slower, but has better monitoring capabilities and is more stable. The AMQP support is considered beta, so small problems might occur. So far, only RabbitMQ as broker has been tested.</p> <p>You can change the broker for single bots (set the parameters in the runtime configuration per bot) or for the whole botnet (using the global configuration).</p> <p>You need to set the parameter <code>source_pipeline_broker</code>/<code>destination_pipeline_broker</code> to <code>amqp</code>. There are more parameters available:</p> <p>Bug</p> <p>This section of the documentation is currently incomplete and will be updated later.</p> <p><code>destination_pipeline_broker</code></p> <p>(required, string) <code>\"amqp\"</code></p> <p><code>destination_pipeline_host</code></p> <p>()  (default: <code>'127.0.0.1'</code>)</p> <p><code>destination_pipeline_port</code></p> <p>() (default: 5672)</p> <p><code>destination_pipeline_username</code></p> <p>()</p> <p><code>destination_pipeline_password</code></p> <p>()</p> <p><code>destination_pipeline_socket_timeout</code></p> <p>() (default: no timeout)</p> <p><code>destination_pipeline_amqp_exchange</code></p> <p>() Only change/set this if you know what you do. If set, the destination queues are not declared as queues, but used as routing key. (default: <code>''</code>).</p> <p><code>destination_pipeline_amqp_virtual_host</code></p> <p>() (default: <code>'/'</code>)</p> <p><code>source_pipeline_host</code></p> <p>() (default: <code>'127.0.0.1'</code>)</p> <p><code>source_pipeline_port</code></p> <p>() (default: 5672)</p> <p><code>source_pipeline_username</code></p> <p>()</p> <p><code>source_pipeline_password</code></p> <p>()</p> <p><code>source_pipeline_socket_timeout</code></p> <p>() (default: no timeout)</p> <p><code>source_pipeline_amqp_exchange</code></p> <p>() Only change/set this if you know what you do. If set, the destination queues are not declared as queues, but used as routing key. (default: ['']).</p> <p><code>source_pipeline_amqp_virtual_host</code></p> <p>() (default: <code>'/'</code>)</p> <p><code>intelmqctl_rabbitmq_monitoring_url</code></p> <p>() string, see below (default: <code>\"http://{host}:15672\"</code>)</p> <p>For getting the queue sizes, <code>intelmqctl</code> needs to connect to the monitoring interface of RabbitMQ. If the monitoring interface is not available under <code>http://{host}:15672</code> you can manually set using the parameter <code>intelmqctl_rabbitmq_monitoring_url</code>. In a RabbitMQ's default configuration you might not provide a user account, as by default the administrator (<code>guest</code>:<code>guest</code>) allows full access from localhost. If you create a separate user account, make sure to add the tag \"monitoring\" to it, otherwise IntelMQ can't fetch the queue sizes.</p> <p></p> <p>Setting the statistics (and cache) parameters is necessary when the local redis is running under a non-default host/port. If this is the case, you can set them explicitly:</p> <p><code>statistics_database</code></p> <p>() <code>3</code></p> <p><code>statistics_host</code></p> <p>() <code>\"127.0.0.1\"</code></p> <p><code>statistics_password</code></p> <p>() <code>null</code></p> <p><code>statistics_port</code></p> <p>() <code>6379</code></p>"},{"location":"admin/beta-features/#multithreading","title":"Multithreading","text":"<p>First of all: Do not use it in production environments yet! There are a few bugs, see below</p> <p>Since IntelMQ 2.0 it is possible to provide the following runtime parameter:</p> <p><code>instances_threads</code></p> <p>Set it to a non-zero integer, then this number of worker threads will be spawn. This is useful if bots often wait for system resources or if network-based lookups are a bottleneck.</p> <p>However, there are currently a few cavecats:</p> <ul> <li>This is not possible for all bots, there are some exceptions (collectors and some outputs), see the <code>FAQ</code> for some reasons.</li> <li>Only use it with the AMQP pipeline, as with Redis, messages may get duplicated because there's only one internal   queue</li> <li>In the logs, you can see the main thread initializing first, then all of the threads which log with the   name <code>[bot-id].[thread-id]</code>.</li> </ul>"},{"location":"admin/common-problems/","title":"Common Problems","text":""},{"location":"admin/common-problems/#common-problems","title":"Common Problems","text":""},{"location":"admin/common-problems/#intelmq","title":"IntelMQ","text":""},{"location":"admin/common-problems/#permission-denied-when-using-redis-unix-socket","title":"Permission denied when using Redis Unix socket","text":"<p>If you get an error like this:</p> <pre><code>intelmq.lib.exceptions.PipelineError: pipeline failed - ConnectionError('Error 13 connecting to unix socket: /var/run/redis/redis.sock. Permission denied.',)\n</code></pre> <p>Make sure the intelmq user as sufficient permissions for the socket.</p> <p>In <code>/etc/redis/redis.conf</code> (or wherever your configuration is), check the permissions and set it for example to group-writeable:</p> <pre><code>unixsocketperm 770\n</code></pre> <p>And add the user intelmq to the redis-group:</p> <pre><code>usermod -aG redis intelmq\n</code></pre>"},{"location":"admin/common-problems/#my-bots-died-on-startup-with-no-errors-logged","title":"My bot(s) died on startup with no errors logged","text":"<p>Rather than starting your bot(s) with <code>intelmqctl start</code>, try <code>intelmqctl run [bot]</code>. This will provide valuable debug output you might not otherwise see, pointing to issues like system configuration errors.</p>"},{"location":"admin/common-problems/#orphaned-queues","title":"Orphaned Queues","text":"<p>This section has been moved to the Management Guide.</p>"},{"location":"admin/common-problems/#multithreading-is-not-available-for-this-bot","title":"Multithreading is not available for this bot","text":"<p>Multithreading is not available for some bots and AMQP broker is necessary. Possible reasons why a certain bot or a setup does not support Multithreading include:</p> <ul> <li>Multithreading is only available when using the AMQP broker.</li> <li>For most collectors, Multithreading is disabled. Otherwise this      would lead to duplicated data, as the data retrieval is not      atomic.</li> <li>Some bots use libraries which are not thread safe. Look a the      bot's documentation for more information.</li> <li>Some bots' operations are not thread safe. Look a the bot's      documentation for more information.</li> </ul> <p>If you think this mapping is wrong, please report a bug.</p>"},{"location":"admin/common-problems/#intelmq-api","title":"IntelMQ API","text":""},{"location":"admin/common-problems/#intelmqctlerror","title":"IntelMQCtlError","text":"<p>If the command is not configured correctly, you will see exceptions on startup like this:</p> <pre><code>intelmq_manager.runctl.IntelMQCtlError: &lt;ERROR_MESSAGE&gt;\n</code></pre> <p>This means the intelmqctl command could not be executed as a subprocess. The <code>&lt;ERROR_MESSAGE&gt;</code> should indicate why.</p>"},{"location":"admin/common-problems/#access-denied-authentication-required-please-provide-valid-token-verification-credentials","title":"Access Denied / Authentication Required \"Please provide valid Token verification credentials\"","text":"<p>If you see the IntelMQ Manager interface and menu, but the API calls to the back-end querying configuration and status of IntelMQ fail with \"Access Denied\" or \"Authentication Required: Please provide valid Token verification credentials\" errors, you are maybe not logged in while the API requires authentication.</p> <p>By default, the API requires authentication. Create user accounts and login with them or - if you have other protection means in place - deactivate the authentication requirement by removing or renaming the <code>session_store</code> parameter in the configuration.</p>"},{"location":"admin/common-problems/#internal-server-error","title":"Internal Server Error","text":"<p>There can be various reasons for internal server errors. You need to look at the error log of your web server, for example <code>/var/log/apache2/error.log</code> or <code>/var/log/httpd/error_log</code> for Apache 2. It could be that the sudo-setup is not functional, the configuration file or session database file can not be read or written or other errors in regards to the execution of the API program.</p>"},{"location":"admin/common-problems/#can-i-just-install-it-from-the-debrpm-packages-while-installing-intelmq-from-a-different-source","title":"Can I just install it from the deb/rpm packages while installing IntelMQ from a different source?","text":"<p>Yes, you can install the API and the Manager from the deb/rpm repositories, and install your IntelMQ from a somewhere else, e.g. a local repository. However, knowledge about Python and system administration experience is recommended if you do so.</p> <p>The packages install IntelMQ to <code>/usr/lib/python3*/site-packages/intelmq/</code>. Installing with <code>pip</code> results in <code>/usr/local/lib/python3*/site-packages/intelmq/</code> (and some other accompaning resources) which overrides the installation in <code>/usr/lib/</code>. You probably need to adapt the configuration parameter <code>intelmq_ctl_cmd</code> to the <code>/usr/local/bin/intelmqctl</code> executable and some other tweaks.</p>"},{"location":"admin/common-problems/#sqlite3operationalerror-attempt-to-write-a-readonly-database","title":"sqlite3.OperationalError: attempt to write a readonly database","text":"<p>SQLite does not only need write access to the database itself, but also the folder the database file is located in. Please check that the webserver has write permissions to the folder the session file is located in.</p>"},{"location":"admin/faq/","title":"FAQ","text":""},{"location":"admin/faq/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"admin/faq/#how-can-i-improve-the-speed","title":"How can I improve the speed?","text":"<p>In most cases the bottlenecks are look-up experts. In these cases you can easily use the integrated load balancing features.</p>"},{"location":"admin/faq/#multithreading","title":"Multithreading","text":"<p>When using the AMQP broker, you can make use of Multi-threading. See the <code>multithreading</code> section.</p>"},{"location":"admin/faq/#classic-load-balancing-multiprocessing","title":"\"Classic\" load-balancing (Multiprocessing)","text":"<p>Before Multithreading was available in IntelMQ, and in case you use Redis as broker, the only way to do load balancing involves more work. Create multiple instances of the same bot and connect them all to the same source and destination bots. Then set the parameter <code>load_balance</code> to <code>true</code> for the bot which sends the messages to the duplicated bot. Then, the bot sends messages to only one of the destination queues and not to all of them.</p> <p>True Multiprocessing is not available in IntelMQ. See also this <code>discussion on a possible enhanced load balancing &lt;186&gt;</code>.</p>"},{"location":"admin/faq/#other-options","title":"Other options","text":"<p>For any bottleneck based on (online) lookups, optimize the lookup itself and if possible use local databases.</p> <p>It is also possible to use multiple servers to spread the workload. To get the messages from one system to the other you can either directly connect to the other's pipeline or use a fast exchange mechanism such as the TCP Collector/Output (make sure to secure the network by other means).</p>"},{"location":"admin/faq/#removing-raw-data-for-higher-performance-and-less-space-usage","title":"Removing raw data for higher performance and less space usage","text":"<p>If you do not need the raw data, you can safely remove it. For events (after parsers), it keeps the original data, eg. a line of a CSV file. In reports it keeps the actual data to be parsed, so don't delete the raw field in Reports - between collectors and parsers.</p> <p>The raw data consumes about 50% - 30% of the messages' size. The size of course depends on how many additional data you add to it and how much data the report includes. Dropping it, will improve the speed as less data needs to be transferred and processed at each step.</p> <p>In a bot</p> <p>You can do this for example by using the Field Reducer Expert. The configuration could be:</p> <ul> <li><code>type</code>: <code>blacklist</code></li> <li><code>keys</code>: <code>raw</code></li> </ul> <p>Other solutions are the Modify bot and the Sieve bot. The last one is a good choice if you already use it and you only need to add the command:</p> <pre><code>remove raw\n</code></pre> <p>In the database</p> <p>In case you store data in the database and you want to keep its size small, you can (periodically) delete the raw data there.</p> <p>To remove the raw data for a events table of a PostgreSQL database, you can use something like:</p> <pre><code>UPDATE events SET raw = NULL WHERE \"time.source\" &lt; '2018-07-01';\n</code></pre> <p>If the database is big, make sure only update small parts of the database by using an appropriate <code>WHERE</code> clause. If you do not see any negative performance impact, you can increase the size of the chunks, otherwise the events in the output bot may queue up. The <code>id</code> column can also be used instead of the source's time.</p> <p>Another way of reducing the <code>raw</code>-data from the database is described in the EventDB documentation: <code>eventdb_raws_table</code>.</p>"},{"location":"admin/faq/#how-to-uninstall","title":"How to Uninstall","text":"<p>If you installed intelmq with native packages: Use the package management tool to remove the package <code>intelmq</code>. These tools do not remove configuration by default.</p> <p>If you installed manually via pip (note that this also deletes all configuration and possibly data):</p> <pre><code>pip3 uninstall intelmq\nrm -r /opt/intelmq\n</code></pre>"},{"location":"admin/hardware-requirements/","title":"Hardware Requirements","text":""},{"location":"admin/hardware-requirements/#hardware-requirements","title":"Hardware Requirements","text":"<p>Do you ask yourself how much RAM do you need to give your new IntelMQ virtual machine?</p> <p>The honest answer is simple and pointless: It depends ;)</p>"},{"location":"admin/hardware-requirements/#intelmq-and-the-messaging-queue-broker","title":"IntelMQ and the messaging queue (broker)","text":"<p>IntelMQ uses a messaging queue to move the messages between the bots. All bot instances can only process one message at a time, therefore all other messages need to wait in the queue. As not all bots are equally fast, the messages will naturally \"queue up\" before the slower ones. Further, parsers produce many events with just one message (the report) as input.</p> <p>The following estimations assume Redis as messaging broker which is the default for IntelMQ. When RabbitMQ is used, the required resources will differ, and RabbitMQ can handle system overload and therefore a shortage of memory.</p> <p>As Redis stores all data in memory, the data which is processed at any point in time must fit there, including overheads. Please note that IntelMQ does neither store nor cache any input data. These estimates therefore only relate to the processing step, not the storage.</p> <p>For a minimal system, these requirements suffice:</p> <ul> <li>4 GB of RAM</li> <li>2 CPUs</li> <li>10 GB disk size</li> </ul> <p>Depending on your data input, you will need the twentiethfold of the input data size as memory for processing.</p> <p>When using Redis persistence, you will additionally need twice as much memory for Redis.</p>"},{"location":"admin/hardware-requirements/#disk-space","title":"Disk space","text":"<p>Disk space is only relevant if you save your data to a file, which is not recommended for production setups, and only useful for testing and evaluation.</p> <p>Do not forget to rotate your logs or use syslog, especially if you use the logging level \"DEBUG\". logrotate is in use by default for all installation with deb/rpm packages. When other means of installation are used (pip, manual), configure log rotation manually. See logging configuration.</p>"},{"location":"admin/hardware-requirements/#background-on-memory","title":"Background on memory","text":"<p>For experimentation, we used multiple Shadowserver Poodle reports for demonstration purpose, totaling in 120 MB of data. All numbers are estimates and are rounded. In memory, the report data requires 160 MB. After parsing, the memory usage increases to 850 MB in total, as every data line is stored as JSON, with additional information plus the original data encoded in Base 64. The further processing steps depend on the configuration, but you can estimate that caches (for lookups and deduplication) and other added information cause an additional size increase of about 2x. Once a dataset finished processing in IntelMQ, it is no longer stored in memory. Therefore, the memory is only needed to catch high load.</p> <p>The above numbers result in a factor of 14 for input data size vs. memory required by Redis. Assuming some overhead and memory for the bots' processes, a factor of 20 seems sensible.</p> <p>To reduce the amount of required memory and disk size, you can optionally remove the <code>raw</code> data field, see this section in the FAQ.</p>"},{"location":"admin/hardware-requirements/#additional-components","title":"Additional components","text":"<p>If some of the optional components are in use, they can add additional hardware requirements.</p> <p>Those components do not add relevant requirements:</p> <ul> <li>IntelMQ API: It is just an API for <code>intelmqctl</code>.</li> <li>IntelMQ Manager: Only contains static files served by the webserver.</li> <li>IntelMQ Webinput CSV: Just a webinterface to insert data. Requires     the amount of processed data to fit in memory, see above.</li> <li>Stats Portal: The aggregation step and Graphana require some     resources, but no exact numbers are known.</li> <li>Malware Name Mapping</li> <li>Docker: The docker layer adds only minimal hardware requirements.</li> </ul>"},{"location":"admin/hardware-requirements/#database","title":"Database","text":"<p>When storing data in databases (such as MongoDB, PostgreSQL, ElasticSearch), it is recommended to do this on separate machines for operational reasons. Using a different machine results in a separation of stream processing to data storage and allows for a specialized system optimization for both use-cases.</p>"},{"location":"admin/hardware-requirements/#intelmq-cb-mailgen","title":"IntelMQ cb mailgen","text":"<p>While the Fody backend and frontend do not have significant requirements, the RIPE import tool of the certbund-contact requires about 8 GB of memory as of March 2021.</p>"},{"location":"admin/intro/","title":"Intro","text":""},{"location":"admin/intro/#intro","title":"Intro","text":"<p>This guide provides instructions on how to install, configure and manage IntelMQ and it's components.</p> <p>IntelMQ uses a message broker such as Redis. This is required for IntelMQ to run.</p> <p>IntelMQ doesn't handle long term storage of processed Events beyond writing to a file. However it provides connectors (output bots) for writing events to various database systems and log collectors. It is recommended to configure such system to preserve processed events.</p>"},{"location":"admin/intro/#base-requirements","title":"Base Requirements","text":"<p>The following instructions assume the following requirements. Python versions &gt;= 3.7 are supported.</p> <p>Supported and recommended operating systems are:</p> <ul> <li>Debian</li> <li>openSUSE Tumbleweed/Leap</li> <li>Ubuntu</li> <li>For the Docker-installation: Docker Engine: 18.x and higher</li> </ul> <p>Other distributions which are (most probably) supported include AlmaLinux, CentOS, Fedora, FreeBSD 12, RHEL and RockyLinux.</p> <p>A short guide on hardware requirements can be found on the page Hardware Requirements.</p>"},{"location":"admin/upgrade/","title":"Upgrade","text":""},{"location":"admin/upgrade/#upgrade-instructions","title":"Upgrade instructions","text":"<p>In order to upgrade your IntelMQ installation it is recommended to follow these five steps:</p>"},{"location":"admin/upgrade/#1-read-newsmd","title":"1. Read NEWS.md","text":"<p>Read the NEWS.md file to look for things you need to have a look at.</p>"},{"location":"admin/upgrade/#2-stop-intelmq-and-create-a-backup","title":"2. Stop IntelMQ and create a backup","text":"<ul> <li>Make sure that your IntelMQ system is completely stopped: <code>intelmqctl stop</code></li> <li>Create a backup of IntelMQ Home directory, which includes all configurations. They are not overwritten, but backups are always nice to have!</li> </ul> <pre><code>sudo cp -R /opt/intelmq /opt/intelmq-backup\n</code></pre>"},{"location":"admin/upgrade/#3-upgrade-intelmq","title":"3. Upgrade IntelMQ","text":"<p>Before upgrading, check that your setup is clean and there are no events in the queues:</p> <pre><code>intelmqctl check\nintelmqctl list queues -q\n</code></pre> <p>The upgrade depends on how you installed IntelMQ.</p>"},{"location":"admin/upgrade/#linux-packages","title":"Linux Packages","text":"<p>Use your system's package manager.</p>"},{"location":"admin/upgrade/#pypi","title":"PyPi","text":"<pre><code>pip install -U --no-deps intelmq\nsudo intelmqsetup\n</code></pre> <p>Using <code>--no-deps</code> will not upgrade dependencies, which would probably overwrite the system's libraries. Remove this option to also upgrade dependencies.</p>"},{"location":"admin/upgrade/#docker","title":"Docker","text":"<p>You can check out all current versions on our DockerHub.</p> <pre><code>docker pull certat/intelmq-full:latest\n\ndocker pull certat/intelmq-nginx:latest\n</code></pre> <p>Alternatively you can use <code>docker-compose</code>:</p> <pre><code>docker-compose pull\n</code></pre> <p>You can check the current versions from intelmq &amp; intelmq-manager &amp; intelmq-api via git commit ref.</p> <p>The Version format for each included item is <code>key=value</code> and they are saparated via <code>,</code>. I. e. <code>IntelMQ=ab12cd34f,IntelMQ-API=xy65z23</code>.</p> <pre><code>docker inspect --format '{{ index .Config.Labels \"org.opencontainers.image.version\" }}' intelmq-full:latest\n</code></pre> <p>Now restart your container, if you're using docker-compose you simply run:</p> <pre><code>docker-compose down\n</code></pre> <p>If you don't use <code>docker-compose</code>, you can restart a single container using:</p> <pre><code>docker ps | grep certat\n\ndocker restart CONTAINER_ID\n</code></pre>"},{"location":"admin/upgrade/#source-repository","title":"Source repository","text":"<p>If you have an editable installation, refer to the instructions in the <code>/dev/guide</code>.</p> <p>Update the repository depending on your setup (e.g. [git pull origin master]).</p> <p>And run the installation again:</p> <pre><code>pip install .\nsudo intelmqsetup\n</code></pre> <p>For editable installations (development only), run [pip install -e .] instead.</p>"},{"location":"admin/upgrade/#4-upgrade-configuration-and-check-the-installation","title":"4. Upgrade configuration and check the installation","text":"<p>Go through NEWS.md and apply necessary adaptions to your setup. If you have adapted IntelMQ's code, also read the CHANGELOG.md.</p> <p>Check your installation and configuration to detect any problems:</p> <pre><code>intelmqctl upgrade-config\nintelmqctl check\n</code></pre> <p><code>intelmqctl upgrade-config</code> supports upgrades from one IntelMQ version to the succeeding. If you skip one or more IntelMQ versions, some automatic upgrades may not work and manual intervention may be necessary.</p>"},{"location":"admin/upgrade/#5-start-intelmq","title":"5. Start IntelMQ","text":"<pre><code>intelmqctl start\n</code></pre>"},{"location":"admin/configuration/intelmq-api/","title":"IntelMQ API","text":""},{"location":"admin/configuration/intelmq-api/#configuring-intelmq-api","title":"Configuring IntelMQ API","text":"<p>Depending on your setup you might have to install <code>sudo</code> to make it possible for the <code>intelmq-api</code> to run the <code>intelmq</code> command as the user-account usually used to run <code>intelmq</code> (which is also often called <code>intelmq</code>).</p> <p><code>intelmq-api</code> is configured using a configuration file in <code>json</code> format. <code>intelmq-api</code> tries to load the configuration file from <code>/etc/intelmq/api-config.json</code> and <code>${PREFIX}/etc/intelmq/api-config.json</code>, but you can override the path setting the environment variable <code>INTELMQ_API_CONFIG</code>. (When using Apache, you can do this by modifying the Apache configuration file shipped with <code>intelmq-api</code>, the file contains an example)</p> <p>When running the API using <code>hug</code>, you can set the environment variable like this:</p> <pre><code>INTELMQ_API_CONFIG=/etc/intelmq/api-config.json hug -m intelmq_api.serve\n</code></pre> <p>The default configuration which is shipped with the packages is also listed here for reference:</p> <pre><code>{\n    \"intelmq_ctl_cmd\": [\"sudo\", \"-u\", \"intelmq\", \"intelmqctl\"],\n    \"allowed_path\": \"/opt/intelmq/var/lib/bots/\",\n    \"session_store\": \"/etc/intelmq/api-session.sqlite\",\n    \"session_duration\": 86400,\n    \"allow_origins\": [\"*\"]\n}\n</code></pre> <p>On Debian based systems, the default path for the <code>session_store</code> is <code>/var/lib/dbconfig-common/sqlite3/intelmq-api/intelmqapi</code>, because the Debian package uses the Debian packaging tools to manage the database file.</p> <p>The following configuration options are available:</p> <ul> <li><code>intelmq_ctl_cmd</code>: Your <code>intelmqctl</code> command. If this is not set in     a configuration file the default is used, which is     <code>[\"sudo\", \"-u\", \"intelmq\", \"/usr/local/bin/intelmqctl\"]</code> The option     <code>\"intelmq_ctl_cmd\"</code> is a list of strings so that we can avoid     shell-injection vulnerabilities because no shell is involved when     running the command. This means that if the command you want to use     needs parameters, they have to be separate strings.</li> <li><code>allowed_path</code>: intelmq-api can grant read-only access to     specific files - this setting defines the path those files can     reside in.</li> <li><code>session_store</code>: this is an optional path to a sqlite database,     which is used for session storage and authentication. If it is not     set (which is the default), no authentication is used!</li> <li><code>session_duration</code>: the maximal duration of a session, its 86400     seconds by default</li> <li><code>allow_origins</code>: a list of origins the responses of the API can be     shared with. Allows every origin by default.</li> </ul>"},{"location":"admin/configuration/intelmq-api/#permissions","title":"Permissions","text":"<p><code>intelmq-api</code> tries to write a couple of configuration files in the <code>${PREFIX}/etc/intelmq</code> directory - this is only possible if you set the permissions accordingly, given that <code>intelmq-api</code> runs under a different user. The user the API run as also needs write access to the folder the <code>session_store</code> is located in, otherwise there will be an error accessing the session data. If you\\'re using the default Apache 2 setup, you might want to set the group of the files to <code>www-data</code> and give it write permissions (<code>chmod -R g+w &lt;directoryname&gt;</code>). In addition to that, the <code>intelmq-manager</code> tries to store the bot positions via the API into the file <code>${PREFIX}/etc/intelmq/manager/positions.conf</code>. You should therefore create the folder <code>${PREFIX}/etc/intelmq/manager</code> and the file <code>positions.conf</code> in it.</p>"},{"location":"admin/configuration/intelmq-api/#adding-a-user","title":"Adding a user","text":"<p>If you enable the <code>session_store</code> you will have to create user accounts to be able to access the API functionality. You can do this using <code>intelmq-api-adduser</code>:</p> <pre><code>intelmq-api-adduser --user &lt;username&gt; --password &lt;password&gt;\n</code></pre>"},{"location":"admin/configuration/intelmq-api/#a-note-on-selinux","title":"A note on SELinux","text":"<p>On systems with SELinux enabled, the API will fail to call <code>intelmqctl</code>. Therefore, SELinux needs to be disabled:</p> <pre><code>setenforce 0\n</code></pre> <p>We welcome contributions to provide SELinux policies.</p>"},{"location":"admin/configuration/intelmq-manager/","title":"IntelMQ Manager","text":""},{"location":"admin/configuration/intelmq-manager/#configuring-intelmq-manager","title":"Configuring IntelMQ Manager","text":"<p>In the file <code>/usr/share/intelmq-manager/html/js/vars.js</code> set <code>ROOT</code> to the URL of your <code>intelmq-api</code> installation - by default that's on the same host as <code>intelmq-manager</code>.</p>"},{"location":"admin/configuration/intelmq-manager/#configuration-paths","title":"Configuration Paths","text":"<p>The IntelMQ Manager queries the configuration file paths and directory names from <code>intelmqctl</code> and therefore any global environment variables (if set) are effective in the Manager too. The interface for this query is <code>intelmqctl debug --get-paths</code>, the result is also shown in the <code>/about.html</code> page of your IntelMQ Manager installation.</p>"},{"location":"admin/configuration/intelmq-manager/#csp-headers","title":"CSP Headers","text":"<p>It is recommended to set these two headers for all requests:</p> <pre><code>Content-Security-Policy: script-src 'self'\nX-Content-Security-Policy: script-src 'self'\n</code></pre>"},{"location":"admin/configuration/intelmq-manager/#security-considerations","title":"Security considerations","text":"<p>Never ever run intelmq-manager on a public webserver without SSL and proper authentication!</p> <p>The way the current version is written, anyone can send a POST request and change intelmq's configuration files via sending HTTP POST requests. Intelmq-manager will reject non JSON data but nevertheless, we don't want anyone to be able to reconfigure an intelmq installation.</p> <p>Therefore you will need authentication and SSL. Authentication can be handled by the <code>intelmq-api</code>. Please refer to its documentation on how to enable authentication and setup accounts.</p> <p>Never ever allow unencrypted, unauthenticated access to IntelMQ Manager!</p>"},{"location":"admin/configuration/intelmq-manager/#docker-security-headers","title":"Docker: Security headers","text":"<p>If you run our docker image in production, we recommend you to set security headers. You can do this by creating a new file called <code>example_config/nginx/security.conf</code> in the cloned <code>intelmq-docker</code> repository.</p> <p>Write the following inside the configuration file, and change the <code>http(s)://&lt;your-domain&gt;</code> to your domain name.</p> <pre><code>server_tokens off; # turn off server_token, instead of nginx/13.2 now it will only show nginx\nadd_header X-Frame-Options SAMEORIGIN; # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\nadd_header X-Content-Type-Options nosniff; # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\nadd_header X-XSS-Protection \"1; mode=block\"; # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\nadd_header Content-Security-Policy \"script-src 'self' 'unsafe-inline' http(s)://&lt;your-domain&gt;; frame-src 'self' http(s)://&lt;your-domain&gt;; object-src 'self' http(s)://&lt;your-domain&gt;\"; # https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n</code></pre> <p>After you created the file, edit the <code>docker-compose.yml</code> and mount it to the <code>nginx</code> with</p> <pre><code>volumes:\n  - ./example_config/nginx/security.conf:/etc/nginx/conf.d/security.conf\n</code></pre> <p>IMPORTANT Mount the exact name &amp; not the directory, because otherwise you would overwrite the whole directory and the other files would be gone inside the container.</p>"},{"location":"admin/configuration/intelmq/","title":"IntelMQ","text":""},{"location":"admin/configuration/intelmq/#configuring-intelmq","title":"Configuring IntelMQ","text":""},{"location":"admin/configuration/intelmq/#directories","title":"Directories","text":""},{"location":"admin/configuration/intelmq/#lsb","title":"LSB","text":"<p>If you installed the packages, standard Linux paths (LSB paths) are used:</p> <ul> <li><code>/etc/intelmq/</code> (configurations)</li> <li><code>/var/log/intelmq/</code> (logs)</li> <li><code>/var/lib/intelmq/</code> (local states)</li> <li><code>/var/run/intelmq/</code> (PID files)</li> </ul> <p>Otherwise, the configuration directory is <code>/opt/intelmq/etc/</code>. Using the environment variable <code>INTELMQ_ROOT_DIR</code> allows setting any arbitrary root directory.</p> <p>You can switch this by setting the environment variables <code>INTELMQ_PATHS_NO_OPT</code> and <code>INTELMQ_PATHS_OPT</code>, respectively.</p> <ul> <li>When installing the Python packages, you can set <code>INTELMQ_PATHS_NO_OPT</code> to something non-empty to use LSB-paths.</li> <li>When installing the deb/rpm packages, you can set <code>INTELMQ_PATHS_OPT</code> to something non-empty to use <code>/opt/intelmq/</code> paths, or a path set with <code>INTELMQ_ROOT_DIR</code>.</li> </ul> <p>The environment variable <code>ROOT_DIR</code> is meant to set an alternative root directory instead of <code>/</code>. This is primarily meant for package build environments an analogous to setuptool's <code>--root</code> parameter. Thus it is only used in LSB-mode.</p>"},{"location":"admin/configuration/intelmq/#environment-variables","title":"Environment Variables","text":"Name Type Description <code>INTELMQ_PATHS_OPT</code> <code>INTELMQ_PATHS_NO_OPT</code> <code>INTELMQ_ROOT_DIR</code> <code>ROOT_DIR</code>"},{"location":"admin/configuration/intelmq/#configuration-files","title":"Configuration Files","text":""},{"location":"admin/configuration/intelmq/#runtimeyaml","title":"<code>runtime.yaml</code>","text":"<p>This is the main configuration file. It uses YAML format since IntelMQ 3.0. It consists of two parts:</p> <ul> <li>Global Configuration</li> <li>Individual Bot Configuration </li> </ul> <p>Warning</p> <p>Comments in YAML are currently not preserved by IntelMQ (known bug #2003).</p> <p>Example <code>runtime.yaml</code> configuration file is installed by the tool <code>intelmqsetup</code>. If this is not the case, make sure the program was run. It is shipped preconfigured with 4 collectors and parsers, 6 common experts and one output bot. The default collector and the parser handle data from malware domain list, the file output bot writes all data to one of these files (based on your installation):</p> <ul> <li> <p><code>/opt/intelmq/var/lib/bots/file-output/events.txt</code></p> </li> <li> <p><code>/var/lib/intelmq/bots/file-output/events.txt</code></p> </li> </ul> <p>The <code>runtime.yaml</code> configuration is divided into two sections:</p> <ul> <li>Global configuration which is applied to each bot.</li> <li>Individual bot configuration which overloads the global configuration and contains bot specific options.</li> </ul> <p>Example configuration snippet:</p> <pre><code>global: # global configuration section\n  # ...\n  http_timeout_max_tries: 3\n  http_timeout_sec: 30\n  http_user_agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\n  http_verify_cert: true\n\nblocklistde-apache-collector: # individual bot configuration section\n  group: Collector\n  name: Blocklist.de Apache List\n  module: intelmq.bots.collectors.http.collector_http\n  description: Blocklist.de Apache Collector fetches all IP addresses which have been reported within the last 48 hours as having run attacks on the service Apache, Apache-DDOS, RFI-Attacks.\n  parameters:\n    http_url: https://lists.blocklist.de/lists/apache.txt\n    name: Blocklist.de Apache\n    rate_limit: 3600\n    http_verify_cert: false # overriding the global configuration for this particular bot\n</code></pre>"},{"location":"admin/configuration/intelmq/#global-configuration","title":"Global Configuration","text":"<p>The global configuration parameters apply to all bots, however they can be overridden in the individual bot configuration.</p>"},{"location":"admin/configuration/intelmq/#logging","title":"Logging","text":"<p>The logging can be configured with the following parameters:</p> <p><code>logging_handler</code></p> <p>(required, string) Allowed values are <code>file</code> or <code>syslog</code>.</p> <p><code>logging_level</code></p> <p>(required, string) Allowed values are <code>CRITICAL</code>, <code>ERROR</code>, <code>WARNING</code>, <code>INFO</code> or <code>DEBUG</code>. Defines the system-wide log level that will be use by all bots and the intelmqctl tool. We recommend <code>logging_level</code> <code>WARNING</code> for production environments and <code>INFO</code> if you want more details. In any case, watch your free disk space!</p> <p><code>logging_path</code></p> <p>(required, string) When the <code>logging_handler</code> is <code>file</code> this parameter is used to set the logging directory for all the bots as well as the <code>intelmqctl</code> tool. Defaults to <code>/opt/intelmq/var/log/</code> or <code>/var/log/intelmq/</code> respectively.</p> <p><code>logging_syslog</code></p> <p>(required, string) When the <code>logging_handler</code> is <code>syslog</code>. Either a list with hostname and UDP port of syslog service, e.g. <code>[\"localhost\", 514]</code> or a device name/path. Defaults to <code>/var/log</code>.</p>"},{"location":"admin/configuration/intelmq/#log-rotation","title":"Log Rotation","text":"<p>To rotate the logs, you can use the standard Linux-tool logrotate. An example logrotate configuration is given in <code>contrib/logrotate/</code> and delivered with all deb/rpm-packages. When not using logrotate, IntelMQ can rotate the logs itself, which is not enabled by default! You need to set both values.</p> <p><code>logging_max_size</code></p> <p>(optional, integer) Maximum number of bytes to be stored in one logfile before the file is rotated. Defaults to 0 (log rotation disabled).</p> <p><code>logging_max_copies</code></p> <p>(optional, integer) Maximum number of logfiles to keep. Compression is not supported. Default is unset.</p> <p>Some information can as well be found in Python's documentation on the used RotatingFileHandler.</p>"},{"location":"admin/configuration/intelmq/#error-handling","title":"Error Handling","text":"<p><code>error_log_message</code></p> <p>(required, boolean) Whether to write the message (Event/Report) to the log file in case of an error.</p> <p><code>error_log_exception</code></p> <p>(required, boolean) Whether to write an error exception to the log file in case of an error.</p> <p><code>error_procedure</code></p> <p>(required, string) Allowed values are <code>stop</code> or <code>pass</code>. In case of an error, this option defines the procedure that the bot will adopt. Use the following values:</p> <ul> <li> <p><code>stop</code> - stop bot after retrying X times (as defined in <code>error_max_retries</code>) with a delay between retries (as defined in <code>error_retry_delay</code>). If the bot reaches the <code>error_max_retries</code> value, it will remove the message from the pipeline and stop. If the option <code>error_dump_message</code> is also enable, the bot will dump the removed message to its dump file (to be found in var/log).</p> </li> <li> <p><code>pass</code> - will skip this message and will process the next message after retrying X times, removing the current message from pipeline. If the option <code>error_dump_message</code> is also enable, then the bot will dump the removed message to its dump file. After max retries are reached, the rate limit is applied (e.g. a collector bot fetch an unavailable resource does not try forever).</p> </li> </ul> <p><code>error_max_retries</code></p> <p>(required, integer) In case of an error, the bot will try to re-start processing the current message X times as   defined by this option.</p> <p><code>error_retry_delay</code></p> <p>(required, integer) Defines the number of seconds to wait between subsequent re-tries in case of an error.</p> <p><code>error_dump_message</code></p> <p>(required, boolean) Specifies if the bot will write queued up messages to its dump file (use intelmqdump to   re-insert the message). </p> <p>If the path <code>_on_error</code> exists for a bot, the message is also sent to this queue, instead of (only) dumping the file if configured to do so.</p>"},{"location":"admin/configuration/intelmq/#miscellaneous","title":"Miscellaneous","text":"<p><code>load_balance</code></p> <p>(required, boolean) this option allows you to choose the behavior of the queue. Use the following values:</p> <ul> <li>true - splits the messages into several queues without duplication</li> <li>false - duplicates the messages into each queue - When using AMQP as message broker, take a look at the <code>multithreading</code>{.interpreted-text role=\"ref\"} section and the <code>instances_threads</code> parameter.</li> </ul> <p><code>rate_limit</code></p> <p>(required, integer) time interval (in seconds) between messages processing. int value.</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) trusted CA certificate for IMAP connections (supported by some bots).</p> <p><code>source_pipeline_broker</code></p> <p>(optional, string) Allowed values are <code>redis</code> and <code>amqp</code>. Selects the message broker IntelMQ should use. As this parameter can be overridden by each bot, this allows usage of different broker systems and hosts, as well as switching between them on the same IntelMQ instance. Defaults to <code>redis</code>.</p> <ul> <li>redis - Please note that persistence has to be manually activated. </li> <li>amqp - Using the AMQP broker is currently beta but there are no known issues. A popular AMQP broker is RabbitMQ.</li> </ul> <p><code>destination_pipeline_broker</code></p> <p>(required, string) See <code>source_pipeline_broker</code>.</p> <p><code>source_pipeline_host</code></p> <p>(required, string) Hostname or path to Unix socket that the bot will use to connect and receive messages.</p> <p><code>source_pipeline_port</code></p> <p>(optional, integer) Broker port that the bot will use to connect and receive messages. Can be empty for Unix socket.</p> <p><code>source_pipeline_password</code></p> <p>(optional, string) Broker password that the bot will use to connect and receive messages. Can be null for unprotected broker.</p> <p><code>source_pipeline_db</code></p> <p>(required, integer) broker database that the bot will use to connect and receive messages (requirement from   redis broker).</p> <p><code>destination_pipeline_host</code></p> <p>(optional, string) broker IP, FQDN or Unix socket that the bot will use to connect and send messages.</p> <p><code>destination_pipeline_port</code></p> <p>(optional, integer) broker port that the bot will use to connect and send messages. Can be empty for   Unix socket.</p> <p><code>destination_pipeline_password</code></p> <p>(optional, string) broker password that the bot will use to connect and send messages. Can be null   for unprotected broker.</p> <p><code>destination_pipeline_db</code></p> <p>(required, integer) broker database that the bot will use to connect and send messages (requirement from   redis broker).</p> <p><code>http_proxy</code></p> <p>(optional, string) Proxy to use for HTTP.</p> <p><code>https_proxy</code></p> <p>(optional, string) Proxy to use for HTTPS.</p> <p><code>http_user_agent</code></p> <p>(optional, string) User-Agent to be used for HTTP requests.</p> <p><code>http_verify_cert</code></p> <p>(optional, boolean) Verify the TLS certificate of the server. Defaults to true.</p>"},{"location":"admin/configuration/intelmq/#individual-bot-configuration","title":"Individual Bot Configuration","text":"<p>Info</p> <p>For the individual bot configuration please see the Bots document in the User Guide.</p>"},{"location":"admin/configuration/intelmq/#run-mode","title":"Run Mode","text":"<p>This sections provides more detailed explanation of the two run modes of the bots.</p>"},{"location":"admin/configuration/intelmq/#continuous","title":"Continuous","text":"<p>Most of the cases, bots will need to be configured as <code>continuous</code> run mode (the default) in order to have them always running and processing events. Usually, the types of bots that will require the continuous mode will be Parsers, Experts and Outputs. To do this, set <code>run_mode</code> to <code>continuous</code> in the <code>runtime.yaml</code> for the bot. Check the following example:</p> <pre><code>blocklistde-apache-parser:\n  name: Blocklist.de Parser\n  group: Parser\n  module: intelmq.bots.parsers.blocklistde.parser\n  description: Blocklist.DE Parser is the bot responsible to parse the report and sanitize the information.\n  enabled: false\n  run_mode: continuous\n  parameters: ...\n</code></pre> <p>You can now start the bot using the following command:</p> <pre><code>intelmqctl start blocklistde-apache-parser\n</code></pre> <p>Bots configured as <code>continuous</code> will never exit except if there is an error and the error handling configuration requires the bot to exit. See the Error Handling section for more details.</p>"},{"location":"admin/configuration/intelmq/#scheduled","title":"Scheduled","text":"<p>In many cases, it is useful to schedule a bot at a specific time (i.e. via cron(1)), for example to collect information from a website every day at midnight. To do this, set <code>run_mode</code> to <code>scheduled</code> in the <code>runtime.yaml</code> for the bot. Check out the following example:</p> <pre><code>blocklistde-apache-collector:\n  name: Generic URL Fetcher\n  group: Collector\n  module: intelmq.bots.collectors.http.collector_http\n  description: All IP addresses which have been reported within the last 48 hours as having run attacks on the service Apache, Apache-DDOS, RFI-Attacks.\n  enabled: false\n  run_mode: scheduled\n  parameters:\n    feed: Blocklist.de Apache\n    provider: Blocklist.de\n    http_url: https://lists.blocklist.de/lists/apache.txt\n    ssl_client_certificate: null\n</code></pre> <p>You can schedule the bot with a crontab-entry like this:</p> <pre><code>0 0 * * * intelmqctl start blocklistde-apache-collector\n</code></pre> <p>Bots configured as <code>scheduled</code> will exit after the first successful run. Setting <code>enabled</code> to <code>false</code> will cause the bot to not start with <code>intelmqctl start</code>, but only with an explicit start, in this example <code>intelmqctl start blocklistde-apache-collector</code>.</p>"},{"location":"admin/configuration/intelmq/#additional-runtime-parameters","title":"Additional Runtime Parameters","text":"<p>Some of the parameters are deliberately skipped from the User Guide because they are configured via graphical user interface provided by the IntelMQ Manager. These parameters have to do with configuring the pipeline: defining how the data is exchanged between the bots. Using the IntelMQ Manager for this have many benefits as it guarantees that the configuration is correct upon saving.</p> <p>However as an administrator you should be also familiar with the manual (and somewhat tedious) configuration. For each bot there are two parameters that need to be set:</p> <p><code>source_queue</code></p> <p>(optional, string) The name of the source queue from which the bot is going to processing data. Each bot has maximum one source queue (collector bots don't have any source queue as they fetch data from elsewhere). Defaults to the bot id appended with the string <code>-queue</code>.</p> <p>Example: a bot with id <code>example-bot</code> will have a default source queue named <code>example-bot-queue</code>.</p> <p><code>destination_queues</code></p> <p>(optional, object) Bots can have multiple destination queues. Destination queues can also be grouped into named paths. There are two special path names <code>_default</code> and <code>_on_error</code>.  The path <code>_default</code> is used if the path is not is specified by the bot itself (which is the most common case). In case of an error during the processing, the message will be sent to the <code>_on_error</code> path if specified (optional). </p> <p>Only few of the bots (mostly expert bots with filtering capabilities) can take advantage of arbitrarily named paths. Some expert bots are capable of sending messages to paths, this feature is explained in their documentation, e.g. the Filter expert and the Sieve expert.</p> <p>Example:</p> <pre><code>blocklistde-apache-collector:\n  # ...\n  parameters:\n    # ...\n    destination_queues:\n      _default:\n        - &lt;first destination pipeline name&gt;\n        - &lt;second destination pipeline name&gt;\n      _on_error:\n        - &lt;optional first destination pipeline name in case of errors&gt;\n        - &lt;optional second destination pipeline name in case of errors&gt;\n      other-path:\n        - &lt;second destination pipeline name&gt;\n        - &lt;third destination pipeline name&gt;\n</code></pre>"},{"location":"admin/configuration/intelmq/#harmonizationconf","title":"<code>harmonization.conf</code>","text":"<p>This configuration is used to specify the fields for all message types. The harmonization library will load this configuration to check, during the message processing, if the values are compliant to the configured harmonization format. Usually, this configuration doesn't need any change. It is mostly maintained by the IntelMQ maintainers.</p> <p>Template:</p> <pre><code>{\n  \"&lt;message type&gt;\": {\n    \"&lt;field 1&gt;\": {\n      \"description\": \"&lt;field 1 description&gt;\",\n      \"type\": \"&lt;field value type&gt;\"\n    },\n    \"&lt;field 2&gt;\": {\n      \"description\": \"&lt;field 2 description&gt;\",\n      \"type\": \"&lt;field value type&gt;\"\n    }\n  }\n}\n</code></pre> <p>Example:</p> <pre><code>{\n  \"event\": {\n    \"destination.asn\": {\n      \"description\": \"The autonomous system number from which originated the connection.\",\n      \"type\": \"Integer\"\n    },\n    \"destination.geolocation.cc\": {\n      \"description\": \"Country-Code according to ISO3166-1 alpha-2 for the destination IP.\",\n      \"regex\": \"^[a-zA-Z0-9]{2}$\",\n      \"type\": \"String\"\n    }\n  }\n}\n</code></pre>"},{"location":"admin/database/elasticsearch/","title":"Elasticsearch","text":""},{"location":"admin/database/elasticsearch/#using-elasticsearch-as-a-database-for-intelmq","title":"Using Elasticsearch as a database for IntelMQ","text":"<p>If you wish to run IntelMQ with Elasticsearch or full ELK stack (Elasticsearch, Logstash, Kibana) it is entirely possible. This guide assumes the reader is familiar with basic configuration of ELK and does not aim to cover using ELK in general. It is based on the version 6.8.0 (ELK is a fast moving train therefore things might change). Assuming you have IntelMQ (and Redis) installation in place, lets dive in.</p>"},{"location":"admin/database/elasticsearch/#configuration-without-logstash","title":"Configuration without Logstash","text":"<p>This case involves two steps:</p> <ol> <li> <p>Configure IntelMQ to output data directly into Elasticsearch.</p> </li> <li> <p>Configure Elasticsearch for ingesting the inserted data.</p> </li> </ol> <p>Bug</p> <p>This section of the documentation is currently incomplete and will be updated later.</p>"},{"location":"admin/database/elasticsearch/#configuration-with-logstash","title":"Configuration with Logstash","text":"<p>This case involves three steps:</p> <ol> <li> <p>Configuring IntelMQ to output data to Redis.</p> </li> <li> <p>Configure Logstash to collect data from Redis and insert them into Elasticsearch.</p> </li> <li> <p>Configure Elasticsearch for ingesting the inserted data.</p> </li> </ol> <p>Each step is described in detail in the following sections.</p>"},{"location":"admin/database/elasticsearch/#configuring-intelmq","title":"Configuring IntelMQ","text":"<p>In order to pass IntelMQ events to Logstash we will utilize already installed Redis. Add a new Redis Output Bot to your pipeline. As the minimum fill in the following parameters: <code>bot-id</code>, <code>redis_server_ip</code> (can be hostname) , <code>redis_server_port</code>, <code>redis_password</code> (if required, else set to empty!), <code>redis_queue</code> (name for the queue). It is recommended to use a different <code>redis_db</code> parameter than used by the IntelMQ (specified as <code>source_pipeline_db</code> , <code>destination_pipeline_db</code> and <code>statistics_database</code>).</p> <p>Example values:</p> <pre><code>bot-id: redis-output\nredis_server_ip: 10.10.10.10\nredis_server_port: 6379\nredis_db: 4\nredis_queue: logstash-queue\n</code></pre> <p>Warning</p> <p>You will not be able to monitor this redis queue via IntelMQ Manager.</p>"},{"location":"admin/database/elasticsearch/#configuring-logstash","title":"Configuring Logstash","text":"<p>Logstash defines pipelines as well. In the pipeline configuration of Logstash you need to specify where it should look for IntelMQ events, what to do with them and where to pass them.</p>"},{"location":"admin/database/elasticsearch/#input","title":"Input","text":"<p>This part describes how to receive data from Redis queue. See the example configuration and comments below:</p> <pre><code>input {\n  redis {\n    host =&gt; \"10.10.10.10\"\n    port =&gt; 6379\n    db =&gt; 4 \n    data_type =&gt; \"list\"\n    key =&gt; \"logstash-queue\"\n  }\n}\n</code></pre> <ul> <li><code>host</code> - same as redis_server_ip from the Redis Output Bot</li> <li><code>port</code> - the redis_server_port from the Redis Output Bot</li> <li><code>db</code> - the redis_db parameter from the Redis Output Bot</li> <li><code>data_type</code> - set to <code>list</code></li> <li><code>key</code> - same as redis_queue from the Redis Output Bot</li> </ul> <p>Tip</p> <p>You can use environment variables for the Logstash configuration, for example <code>host =&gt; \"${REDIS_HOST:10.10.10.10}\"</code>. The value will be taken from the environment variable <code>$REDIS_HOST</code>. If the environment variable is not set then the default value of <code>10.10.10.10</code> will be used instead.</p>"},{"location":"admin/database/elasticsearch/#filter-optional","title":"Filter (optional)","text":"<p>Before passing the data to the database you can apply certain changes. This is done with filters. See an example:</p> <pre><code>filter {\n  mutate {\n    lowercase =&gt; [\"source.geolocation.city\", \"classification.identifier\"]\n    remove_field =&gt; [\"__type\", \"@version\"]\n  }\n  date {\n    match =&gt; [\"time.observation\", \"ISO8601\"]\n  }\n}\n</code></pre> <p>Tip</p> <p>It is recommended to use the <code>date</code> filter: generally we have two timestamp fields - <code>time.source</code> (provided by the feed source this can be understood as when the event happened; however it is not always present) and <code>time.observation</code> (when IntelMQ collected this event). Logstash also adds another field <code>@timestamp</code> with time of processing by Logstash. While it can be useful for debugging, I recommend to set the <code>@timestamp</code> to the same value as <code>time.observation</code>.</p> <p>Warning</p> <p>It is not recommended to apply any modifications to the data (within the <code>mutate</code> key) outside of the IntelMQ. All necessary modifications should be done only by appropriate IntelMQ bots. This example only demonstrates the possibility.</p>"},{"location":"admin/database/elasticsearch/#output","title":"Output","text":"<p>The pipeline also needs output, where we define our database (Elasticsearch). The simplest way of doing so is defining an output like this:</p> <pre><code>output {\n  elasticsearch {\n    hosts =&gt; [\"http://10.10.10.11:9200\", \"http://10.10.10.12:9200\"]\n    index =&gt; \"intelmq-%{+YYYY.MM}\"\n  }\n}\n</code></pre> <ul> <li><code>hosts</code> - Elasticsearch host (or more) with the correct port (9200 by default)</li> <li><code>index</code> - name of the index where to insert data</li> </ul> <p>Tip</p> <p>Authors experience, hardware equipment and the amount of events collected led to having a separate index for each month. This might not necessarily suit your needs, but it is a suggested option.</p> <p>Warning</p> <p>By default the ELK stack uses insecure HTTP. It is possible to setup Security for secure connections and basic user management. This is possible with the Basic (free) licence since versions 6.8.0 and 7.1.0.</p>"},{"location":"admin/database/elasticsearch/#configuring-elasticsearch","title":"Configuring Elasticsearch","text":"<p>Configuring Elasticsearch is entirely up to you and should be consulted with the official documentation. What you will most likely need is something called index template mappings. IntelMQ provides a tool for generating such mappings. See ElasticMapper Tool.</p> <p>Danger</p> <p>Default installation of Elasticsearch database allows anyone with cURL and connection capability to have administrative access to the database. Make sure you secure your toys!</p>"},{"location":"admin/database/mssql/","title":"MSSQL","text":""},{"location":"admin/database/mssql/#mssql","title":"MSSQL","text":"<p>For MSSQL support, the library <code>pymssql&gt;=2.2</code> is required.</p> <p>To output data to MSSQL use SQL Output Bot with parameter <code>engine</code> set to <code>mssql</code>.</p> <p>For more information see SQL Output Bot documentation page.</p>"},{"location":"admin/database/postgresql/","title":"PostgreSQL","text":""},{"location":"admin/database/postgresql/#using-postgresql-as-a-database-for-intelmq","title":"Using PostgreSQL as a database for IntelMQ","text":"<p>The EventDB is a database (usually PostgreSQL) that gets filled with with data from IntelMQ using the SQL Output Bot.</p>"},{"location":"admin/database/postgresql/#intelmq_psql_initdb","title":"intelmq_psql_initdb","text":"<p>IntelMQ comes with the <code>intelmq_psql_initdb</code> command line tool designed to help with creating the EventDB. It creates in the first line:</p> <ul> <li>A <code>CREATE TABLE events</code> statement with all valid IntelMQ fields as columns and correct types</li> <li>Several indexes as examples for a good read &amp; search performance</li> </ul> <p>Having an <code>events</code> table as outlined in the SQL file, IntelMQ's SQL Output Bot can write all received events into this database table.</p> <p>In addition, the script supports some additional features supporting use cases described later in this document:</p> <ul> <li><code>--partition-key</code> - for generating schema aligned with TimescaleDB or partitioned tables,</li> <li><code>--separate-raws</code> - for generating views and triggers needed to <code>eventdb_raws_table</code> (works also together with adjustments for partitioning).</li> </ul> <p>For a full list of supported parameters, call the script help using <code>-h</code> parameter.</p> <p>All elements of the generated SQL file can be adapted and extended before running the SQL file against a database, especially the indexes. Please review the generated script before applying.</p> <p>Be aware that if you create tables using another DB user that is used later by the output bot, you may need to adjust ownership or privileges in the database. If you have problems with database permissions, refer to <code>PostgreSQL documentation &lt;https://www.postgresql.org/docs/current/ddl-priv.html&gt;</code>.</p>"},{"location":"admin/database/postgresql/#eventdb-utilities","title":"EventDB Utilities","text":"<p>Some scripts related to the EventDB are located in the contrib/eventdb folder in the IntelMQ git repository.</p>"},{"location":"admin/database/postgresql/#apply-malware-name-mapping","title":"Apply Malware Name Mapping","text":"<p>The <code>apply_mapping_eventdb.py</code> script applies the malware name mapping to the EventDB. Source and destination columns can be given, also a local file. If no local file is present, the mapping can be downloaded on demand. It queries the database for all distinct malware names with the taxonomy \"malicious-code\" and sets another column to the malware family name.</p>"},{"location":"admin/database/postgresql/#apply-domain-suffix","title":"Apply Domain Suffix","text":"<p>The <code>apply_domain_suffix.py</code> script writes the public domain suffix to the <code>source.domain_suffix</code> / <code>destination.domain_suffix</code> columns, extracted from <code>source.fqdn</code> / <code>destination.fqdn</code>.</p>"},{"location":"admin/database/postgresql/#usage","title":"Usage","text":"<p>The Python scripts can connect to a PostgreSQL server with an <code>eventdb</code> database and an <code>events</code> table. The command line arguments interface for both scripts are the same. See <code>--help</code> for more information:</p> <pre><code>apply_mapping_eventdb.py -h\napply_domain_suffix.py -h\n</code></pre>"},{"location":"admin/database/postgresql/#postgresql-trigger","title":"PostgreSQL trigger","text":"<p>PostgreSQL trigger is a trigger keeping track of the oldest inserted/updated \"time.source\" data. This can be useful to (re-)generate statistics or aggregation data.</p> <p>The SQL script can be executed in the database directly.</p>"},{"location":"admin/database/postgresql/#eventdb-statistics","title":"EventDB Statistics","text":"<p>The EventDB provides a great base for statistical analysis of the data.</p> <p>The eventdb-stats repository contains a Python script that generates an HTML file and includes the Plotly JavaScript Open Source Graphing Library. By modifying the configuration file it is possible to configure various queries that are then displayed using graphs:</p> <p></p>"},{"location":"admin/database/postgresql/#using-eventdb-with-timescale-db","title":"Using EventDB with Timescale DB","text":"<p>Timescale DB is a PostgreSQL extension to add time-series support, which is quite handy as you don't have to learn other syntaxes as you already know. You can use the SQL Queries as before, the extension will handle the rest. To see all limitations, please check the Timescale DB Documentation.</p>"},{"location":"admin/database/postgresql/#what-is-time-series","title":"What is time-series?","text":"<p>Time-series has been invented as traditional database design like relational or nosql are not made for time-based data. A big benefit of time-series instead of other database designs over a time-based search pattern is the performance. As IntelMQ uses data based upon time, this design is awesome &amp; will give you a performance boost.</p>"},{"location":"admin/database/postgresql/#how-to-choose-the-time-column","title":"How to choose the time column?","text":"<p>To utilize the time-series, choose a column containing the right time. This is then used by you for manual queries and graphs, and also by the database itself for organizing the data.</p> <p>An Event has two fields that can be used for this: <code>time.source</code> or <code>time.observation</code>. Depending on your needs (tracking when the event occurred or when it was detected, if different), choose one of them.</p> <p>You can use the :ref:<code>intelmq_psql_initdb</code> tool to generate SQL schema valid for TimescaleDB by passing the partitioning key:</p> <pre><code>intelmq_psql_initdb --partition-key \"time.source\"\n</code></pre>"},{"location":"admin/database/postgresql/#how-to-setup","title":"How to setup","text":"<p>Thanks to TimescaleDB its very easy to setup. </p> <ol> <li>Choose your preferred Timescale DB environment &amp; follow the installation instructions. 2. Now lets create a hypertable, which is the timescale DB time-series structure. <code>SELECT create_hypertable('', 'time.source');</code>. 3. Now our hypertable is setup &amp; timescaleDB takes care of the rest. You can perform queries as usual, for further information please check Timescale DB Documentation.</li> </ol>"},{"location":"admin/database/postgresql/#how-to-upgrade-from-my-existing-database","title":"How to upgrade from my existing database?","text":"<p>To update your existing database to use this awesome time-series feature, just follow the <code>How to setup</code> instruction. You can perform the <code>hypertable</code> command even on already existing databases. BUT there are some limitations from timescaleDB.</p>"},{"location":"admin/database/postgresql/#separating-raw-values-in-postgresql-using-view-and-trigger","title":"Separating raw values in PostgreSQL using view and trigger","text":"<p>In order to reduce the row size in the events table, the <code>raw</code> column's data can be separated from the other columns. While the raw-data is about 30-50% of the data row's size, it is not used in most database queries, as it serves only a backup functionality. Other possibilities to reduce or getting rid of this field are described in the FAQ, section <code>faq-remove-raw-data</code>.</p> <p>The steps described here are best performed before the <code>events</code> table is filled with data, but can as well be done with existing data.</p> <p>The approach requires four steps:</p> <ol> <li>An existing <code>events</code> table, see the first section of     this document.</li> <li>Deleting or renaming the <code>raw</code> column of the     <code>events</code> table.</li> <li>Creating a table <code>raws</code> which holds only the     <code>raw</code> field of the events and linking both tables using     the <code>event_id</code>.</li> <li>Creating the view <code>v_events</code> which joins the tables     <code>events</code> and <code>raws</code>.</li> <li>Creating the function <code>process_v_events_insert</code> and     <code>INSERT</code> trigger <code>tr_events</code>.</li> </ol> <p>The last steps brings us several advantages:</p> <ul> <li>All <code>INSERT</code> statements can contain all data, including     the <code>raw</code> field.</li> <li>No code changes are needed in the IntelMQ output bot or your own     scripts. A migration is seamless.</li> <li>PostgreSQL itself ensures that the data of both tables is consistent     and linked correctly.</li> </ul> <p>The complete SQL script can be generated using the <code>intelmq_psql_initdb</code>. It does not cover step 2 to avoid accidental data loss - you need to do this step manually.</p>"},{"location":"admin/database/postgresql/#other-docs","title":"Other docs","text":"<p>You have two basic choices to run PostgreSQL:</p> <ol> <li>on the same machine as intelmq, then you could use Unix sockets if available on your platform</li> <li>on a different machine. In which case you would need to use a TCP connection and make sure you give the right    connection parameters to each psql or client call.</li> </ol> <p>Make sure to consult your PostgreSQL documentation about how to allow network connections and authentication in case 2.</p> <p>PostgreSQL Version</p> <p>Any supported version of PostgreSQL should work (v&gt;=9.2 as of Oct 2016) [1].</p> <p>If you use PostgreSQL server v &gt;= 9.4, it gives you the possibility to use the time-zone formatting string \"OF\" for date-times and the GiST index for the CIDR type. This may be useful depending on how you plan to use the events that this bot writes into the database.</p> <p>How to install</p> <p>Use <code>intelmq_psql_initdb</code> to create initial SQL statements from <code>harmonization.conf</code>. The script will create the required table layout and save it as <code>/tmp/initdb.sql</code></p> <p>You need a PostgreSQL database-user to own the result database. The recommendation is to use the name <code>intelmq</code> . There may already be such a user for the PostgreSQL database-cluster to be used by other bots. (For example from setting up the expert/certbund_contact bot.)</p> <p>Therefore if still necessary: create the database-user as postgresql superuser, which usually is done via the system user <code>postgres</code>:</p> <pre><code>createuser --no-superuser --no-createrole --no-createdb --encrypted --pwprompt intelmq\n</code></pre> <p>Create the new database:</p> <pre><code>createdb --encoding='utf-8' --owner=intelmq intelmq-events\n</code></pre> <p>(The encoding parameter should ensure the right encoding on platform where this is not the default.)</p> <p>Now initialize it as database-user <code>intelmq</code> (in this example a network connection to localhost is used, so you would get to test if the user <code>intelmq</code> can authenticate):</p> <pre><code>psql -h localhost intelmq-events intelmq &lt;/tmp/initdb.sql\n</code></pre> <p>PostgreSQL and null characters</p> <p>While null characters (<code>0</code>, not SQL \"NULL\") in TEXT and JSON/JSONB fields are valid, data containing null characters can cause troubles in some combinations of clients, servers and each settings. To prevent unhandled errors and data which can't be inserted into the database, all null characters are escaped (<code>u0000</code>) before insertion.</p>"},{"location":"admin/database/splunk/","title":"Splunk","text":""},{"location":"admin/database/splunk/#sending-intelmq-events-to-splunk","title":"Sending IntelMQ events to Splunk","text":"<ol> <li>Go to Splunk and configure in order to be able to receive     logs (intelmq events) to a TCP port</li> <li>Use TCP output bot and configure accordingly to the Splunk     configuration that you applied.</li> </ol>"},{"location":"admin/database/sqlite/","title":"SQLite","text":""},{"location":"admin/database/sqlite/#sqlite","title":"SQLite","text":"<p>Similarly to PostgreSQL, you can use <code>intelmq_psql_initdb</code> to create initial SQL statements from <code>harmonization.conf</code>. The script will create the required table layout and save it as <code>/tmp/initdb.sql</code>.</p> <p>Create the new database (you can ignore all errors since SQLite doesn't know all SQL features generated for PostgreSQL):</p> <pre><code>sqlite3 your-db.db\nsqlite&gt; .read /tmp/initdb.sql\n</code></pre> <p>Then, set the <code>database</code> parameter to the <code>your-db.db</code> file path.</p> <p>To output data to SQLite use SQL Output Bot with parameter <code>engine</code> set to <code>sqlite</code>. For more information see SQL Output Bot documentation page.</p>"},{"location":"admin/installation/dockerhub/","title":"DockerHub","text":""},{"location":"admin/installation/dockerhub/#installation-from-dockerhub","title":"Installation from DockerHub","text":"<p>This guide provides instruction on how to install IntelMQ and it's components using Docker.</p> <p>Warning</p> <p>Docker installation is currently in Beta state and things might break. Consider this if you plan to use IntelMQ as a production level system.</p> <p>Warning</p> <p>Currently you can't manage your botnet via <code>intelmqctl</code> command line tool. You need to use IntelMQ-Manager currently!</p> <p>The latest IntelMQ image is hosted on Docker Hub and the image build instructions are in our intelmq-docker repository.</p> <p>Follow Docker Install and Docker-Compose Install instructions.</p> <p>Before you start using docker-compose or any docker related tools, make sure docker is running:</p> <pre><code># To start the docker daemon\nsystemctl start docker.service\n# To enable the docker daemon for the future\nsystemctl enable docker.service\n</code></pre>"},{"location":"admin/installation/dockerhub/#docker-with-docker-compose","title":"Docker with docker-compose","text":"<p>Now we can download IntelMQ and start the containers. Navigate to your preferred installation directory and run the following commands:</p> <pre><code>git clone https://github.com/certat/intelmq-docker.git --recursive\ncd intelmq-docker\nsudo docker-compose pull\nsudo docker-compose up\n</code></pre> <p>Your installation should be successful now. You're now able to visit <code>http://127.0.0.1:1337/</code> to access the intelmq-manager. You have to login with the username <code>intelmq</code> and the password <code>intelmq</code>, if you want to change the username or password, you can do this by adding the environment variables <code>INTELMQ_API_USER</code> for the username and <code>INTELMQ_API_PASS</code> for the password.</p> <p>Note</p> <p>If you get an Permission denied error, you should run <code>chown -R $USER:$USER example_config</code></p>"},{"location":"admin/installation/dockerhub/#docker-without-docker-compose","title":"Docker without docker-compose","text":"<p>If not already installed, please install Docker.</p> <p>Navigate to your preferred installation directory and run <code>git clone https://github.com/certat/intelmq-docker.git --recursive</code>.</p> <p>You need to prepare some volumes &amp; configs. Edit the left-side after -v, to change paths.</p> <p>Change <code>redis_host</code> to a running redis-instance. Docker will resolve it automatically. All containers are connected using Docker Networks.</p> <p>In order to work with your current infrastructure, you need to specify some environment variables</p> <pre><code>sudo docker pull redis:latest\n\nsudo docker pull certat/intelmq-full:latest\n\nsudo docker pull certat/intelmq-nginx:latest\n\nsudo docker network create intelmq-internal\n\nsudo docker run -v ~/intelmq/example_config/redis/redis.conf:/redis.conf \\\n                --network intelmq-internal \\\n                --name redis \\\n                redis:latest\n\nsudo docker run --network intelmq-internal \\\n                --name nginx \\\n                certat/intelmq-nginx:latest\n\nsudo docker run -e INTELMQ_IS_DOCKER=\"true\" \\\n                -e INTELMQ_SOURCE_PIPELINE_BROKER: \"redis\" \\\n                -e INTELMQ_PIPELINE_BROKER: \"redis\" \\\n                -e INTELMQ_DESTIONATION_PIPELINE_BROKER: \"redis\" \\\n                -e INTELMQ_PIPELINE_HOST: redis \\\n                -e INTELMQ_SOURCE_PIPELINE_HOST: redis \\\n                -e INTELMQ_DESTINATION_PIPELINE_HOST: redis \\\n                -e INTELMQ_REDIS_CACHE_HOST: redis \\\n                -v $(pwd)/example_config/intelmq/etc/:/etc/intelmq/etc/ \\\n                -v $(pwd)/example_config/intelmq-api/config.json:/etc/intelmq/api-config.json \\\n                -v $(pwd)/intelmq_logs:/etc/intelmq/var/log \\\n                -v $(pwd)/intelmq_output:/etc/intelmq/var/lib/bots \\\n                -v ~/intelmq/lib:/etc/intelmq/var/lib \\\n                --network intelmq-internal \\\n                --name intelmq \\\n                certat/intelmq-full:latest\n</code></pre> <p>If you want to use another username and password for the intelmq-manager / api login, additionally add two new environment variables.</p> <pre><code>-e INTELMQ_API_USER: \"your username\"\n-e INTELMQ_API_PASS: \"your password\"\n</code></pre>"},{"location":"admin/installation/linux-packages/","title":"Linux Package","text":""},{"location":"admin/installation/linux-packages/#installation-as-linux-package","title":"Installation as Linux package","text":"<p>This guide provides instructions on how to install IntelMQ and it's components from Linux distribution's package repository.</p> <p>Note</p> <p>Some bots may have additional dependencies which are mentioned in their own documentation.</p>"},{"location":"admin/installation/linux-packages/#supported-os","title":"Supported OS","text":"<p>Native packages are currently provided for the following Linux distributions:</p> <ul> <li>Debian 11 (bullseye)</li> <li>Debian 12 (bookworm)</li> <li>openSUSE Tumbleweed</li> <li>openSUSE Leap 15.5</li> <li>Ubuntu 20.04 (focal fossa)</li> <li>Ubuntu 22.04 (jammy jellyfish)</li> </ul>"},{"location":"admin/installation/linux-packages/#debian-11-and-12","title":"Debian 11 and 12","text":"<p>Add the repository to the package manager and install IntelMQ (packages <code>intelmq-api</code> and <code>intelmq-manager</code> are optional):</p> <pre><code>echo \"deb http://download.opensuse.org/repositories/home:/sebix:/intelmq/Debian_$(lsb_release -rs)/ /\" | sudo tee /etc/apt/sources.list.d/intelmq\ncurl -fsSL \"https://download.opensuse.org/repositories/home:sebix:intelmq/Debian_$(lsb_release -rs)/Release.key\" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/intelmq.gpg &gt; /dev/null\nsudo apt update\nsudo apt install intelmq intelmq-api intelmq-manager\n</code></pre>"},{"location":"admin/installation/linux-packages/#opensuse-tumbleweed","title":"openSUSE Tumbleweed","text":"<p>Add the repository to the package manager and install IntelMQ (packages <code>intelmq-api</code> and <code>intelmq-manager</code> are optional):</p> <pre><code>zypper addrepo https://download.opensuse.org/repositories/home:sebix:intelmq/openSUSE_Tumbleweed/home:sebix:intelmq.repo\nzypper refresh\nzypper install intelmq intelmq-api intelmq-manager\n</code></pre>"},{"location":"admin/installation/linux-packages/#ubuntu-2004-and-2204","title":"Ubuntu 20.04 and 22.04","text":"<p>For Ubuntu you must enable the Universe repository which provides community-maintained free and open-source software.</p> <p>Add the repository to the package manager and install IntelMQ (packages <code>intelmq-api</code> and <code>intelmq-manager</code> are optional):</p> <ol> <li> <p>Open the file <code>/etc/apt/sources.list</code> in an editor of your choice. Use <code>sudo</code> or the <code>root</code> user.</p> </li> <li> <p>Append <code>universe</code> to this line: <pre><code>deb http://[...].archive.ubuntu.com/ubuntu/ focal main universe\n</code></pre></p> </li> <li> <p>Update the list of available packages and install IntelMQ: <pre><code>sudo apt update\nsudo apt install intelmq intelmq-api intelmq-manager\n</code></pre></p> </li> </ol>"},{"location":"admin/installation/pypi/","title":"PyPI","text":""},{"location":"admin/installation/pypi/#installation-from-pypi","title":"Installation from PyPI","text":"<p>This guide provides instruction on how to install IntelMQ and it's components using the Python Package Index (PyPI) repository.</p> <p>Note</p> <p>Some bots may have additional dependencies which are mentioned in their own documentation.</p>"},{"location":"admin/installation/pypi/#installing-intelmq","title":"Installing IntelMQ","text":""},{"location":"admin/installation/pypi/#requirements","title":"Requirements","text":""},{"location":"admin/installation/pypi/#ubuntu-debian","title":"Ubuntu / Debian","text":"<pre><code>apt install python3-pip python3-dnspython python3-psutil python3-redis python3-requests python3-termstyle python3-tz python3-dateutil redis-server bash-completion jq\n# optional dependencies\napt install python3-pymongo python3-psycopg2\n</code></pre>"},{"location":"admin/installation/pypi/#opensuse","title":"openSUSE:","text":"<pre><code>zypper install python3-dateutil python3-dnspython python3-psutil python3-redis python3-requests python3-python-termstyle redis bash-completion jq\n# optional dependencies\nzypper in python3-psycopg2 python3-pymongo\n</code></pre>"},{"location":"admin/installation/pypi/#centos-8","title":"CentOS 8:","text":"<pre><code>dnf install epel-release\ndnf install python3-dateutil python3-dns python3-pip python3-psutil python3-redis python3-requests redis bash-completion jq\n# optional dependencies\ndnf install python3-psycopg2 python3-pymongo\n</code></pre>"},{"location":"admin/installation/pypi/#centos-7-rhel-7","title":"CentOS 7 / RHEL 7:","text":"<p>Warning</p> <p>We no longer support already end-of-life Python 3.6, which is the last Python version officially packaged for CentOS 7. You can either use alternative Python source, or stay on the IntelMQ 3.0.2.</p> <pre><code>yum install epel-release\nyum install python36 python36-dns python36-requests python3-setuptools redis bash-completion jq\nyum install gcc gcc-c++ python36-devel\n# optional dependencies\nyum install python3-psycopg2\n</code></pre>"},{"location":"admin/installation/pypi/#installation","title":"Installation","text":"<p>The default installation directory is <code>/opt/intelmq/</code>.</p> <p>If you prefer to use Linux Standard Base (LSB) paths, set the following environment variable:</p> <pre><code>export INTELMQ_PATHS_NO_OPT=1\n</code></pre> <p>If you want to use custom installation directory, set the following environment variable:</p> <pre><code>export INTELMQ_ROOT_DIR=/my-installation-directory-path\n</code></pre> <p>Run the following commands to install IntelMQ. The provided tool <code>intelmqsetup</code> will create all the necessary directories and installs a default configuration for new setups. If you are using the LSB paths installation, change the <code>--home-dir</code> parameter to <code>/var/lib/intelmq</code></p> <pre><code>sudo --preserve-env=INTELMQ_PATHS_NO_OPT,INTELMQ_ROOT_DIR -i\npip3 install intelmq\n[[ ! -z \"$INTELMQ_PATHS_NO_OPT\" ]] &amp;&amp; export HOME_DIR=/var/lib/intelmq || export HOME_DIR=${INTELMQ_ROOT_DIR:-/opt/intelmq}\nuseradd --system --user-group --home-dir $HOME_DIR --shell /bin/bash intelmq\nintelmqsetup\n</code></pre>"},{"location":"admin/installation/pypi/#installation-to-python-virtual-environment","title":"Installation to Python virtual environment","text":"<pre><code>sudo mkdir -m 755 /opt/intelmq\nsudo useradd --system --user-group --home-dir /opt/intelmq --shell /bin/bash intelmq\nsudo chown intelmq:intelmq /opt/intelmq/\nsudo -u intelmq python3 -m venv /opt/intelmq/venv\nsudo -u intelmq /opt/intelmq/venv/bin/pip install intelmq intelmq-api intelmq-manager\nsudo /opt/intelmq/venv/bin/intelmqsetup\n</code></pre>"},{"location":"admin/installation/pypi/#installing-intelmq-api-optional","title":"Installing IntelMQ API (optional)","text":"<p>The <code>intelmq-api</code> packages ships:</p> <ul> <li>api configuration file in <code>${PREFIX}/etc/intelmq/api-config.json</code></li> <li>positions configuration for the intelmq-manager in <code>{PREFIX}/etc/intelmq/manager/positions.conf</code></li> <li>virtualhost configuration file for Apache 2 in <code>${PREFIX}/etc/intelmq/api-apache.conf</code></li> <li>sudoers configuration file in <code>${PREFIX}/etc/intelmq/api-sudoers.conf</code></li> </ul> <p>The value of <code>${PREFIX}</code> depends on your environment and is something like <code>/usr/local/lib/pythonX.Y/dist-packages/</code> (where <code>X.Y</code> is your Python version).</p> <p>The virtualhost configuration file needs to be placed in the correct directory for your Apache 2 installation.</p> <ul> <li>On Debian or Ubuntu, move the file to <code>/etc/apache2/conf-available.d/</code> directory and then execute <code>a2enconf api-apache</code>.</li> <li>On CentOS, RHEL or Fedora, move the file to <code>/etc/httpd/conf.d/</code> directory.</li> <li>On openSUSE, move the file to <code>/etc/apache2/conf.d/</code> directory.</li> </ul> <p>Don't forget to reload your webserver afterwards.</p> <p>The api configuration file and the positions configuration file need to be placed in one of the following directories (based on your IntelMQ installation directory):</p> <ul> <li><code>/etc/intelmq/</code></li> <li><code>/opt/intelmq/etc/</code></li> <li><code>[my-installation-directory-path]/etc/</code></li> </ul> <p>The sudoers configuration file should be placed in the <code>/etc/sudoers.d/</code> directory and adapt the webserver username in this file. Set the file permissions to <code>0o440</code>.</p> <p>Afterwards continue with the section Permissions below.</p> <p>IntelMQ 2.3.1 comes with a tool <code>intelmqsetup</code> which performs these set-up steps automatically. Please note that the tool is very new and may not detect all situations correctly. Please report us any bugs you are observing. The tools is idempotent, you can execute it multiple times.</p>"},{"location":"admin/installation/pypi/#installing-intelmq-manager-optional","title":"Installing IntelMQ Manager (optional)","text":"<p>To use the IntelMQ Manager web interface, it is required to have a working IntelMQ and IntelMQ API installation.</p> <p>For installation via pip, the situation is more complex. The intelmq-manager package does not contain ready-to-use files, they need to be built locally. First, lets install the Manager itself:</p> <pre><code>pip3 install intelmq-manager\n</code></pre> <p>If your system uses wheel-packages, not the source distribution, you can use the <code>intelmqsetup</code> tool. <code>intelmqsetup</code> which performs these set-up steps automatically but it may not detect all situations correctly. If it finds <code>intelmq-manager</code> installed, calls its build routine is called. The files are placed in <code>/usr/share/intelmq_manager/html</code>, where the default Apache configuration expect it.</p> <p>If your system used the dist-package or if you are using a local source, the tool may not do all required steps. To call the build routine manually, use <code>intelmq-manager-build --output-dir your/preferred/output/directory/</code>.</p> <p><code>intelmq-manager</code> ships with a default configuration for the Apache webserver (<code>manager-apache.conf</code>):</p> <pre><code>Alias /intelmq-manager /usr/share/intelmq_manager/html/\n\n&lt;Directory /usr/share/intelmq_manager/html&gt;\n    &lt;IfModule mod_headers.c&gt;\n    Header set Content-Security-Policy \"script-src 'self'\"\n    Header set X-Content-Security-Policy \"script-src 'self'\"\n    &lt;/IfModule&gt;\n&lt;/Directory&gt;\n</code></pre> <p>This file needs to be placed in the correct place for your Apache 2 installation.</p> <ul> <li>On Debian and Ubuntu, the file needs to be placed at <code>/etc/apache2/conf-available.d/manager-apache.conf</code> and then execute   <code>a2enconf manager-apache</code>.</li> <li>On CentOS, RHEL and Fedora, the file needs to be placed at <code>/etc/httpd/conf.d/</code> and reload the webserver.</li> <li>On openSUSE, the file needs to be placed at <code>/etc/apache2/conf.d/</code> and reload the webserver.</li> </ul>"},{"location":"admin/integrations/cifv3/","title":"CIFv3","text":""},{"location":"admin/integrations/cifv3/#cifv3-integrations-in-intelmq","title":"CIFv3 integrations in IntelMQ","text":"<p>CIF creates an accessible indicator store. A REST API is exposed to interact with the store and quickly process/share indicators. CIFv3 can correlate indicators via the UUID attribute.</p>"},{"location":"admin/integrations/cifv3/#cif3-api-output","title":"CIF3 API Output","text":"<p>Can be used to submit indicators to a CIFv3 instance by using the CIFv3 API.</p> <p>Look at the CIFv3 API Output Bot for more information.</p>"},{"location":"admin/integrations/misp/","title":"MISP","text":""},{"location":"admin/integrations/misp/#misp-integrations-in-intelmq","title":"MISP integrations in IntelMQ","text":"<p>While MISP and IntelMQ seem to solve similar problems in the first hindsight, their intentions and strengths differ significantly.</p> <p>In a nutshell, MISP stores manually curated indicators (called attributes) grouped in events. An event can have an arbitrary number of attributes. MISP correlates these indicators with each other and can synchronize the data between multiple MISP instances.</p> <p>On the other side, IntelMQ in it's essence (not considering the <code>EventDB &lt;eventdb&gt;</code>) has no state or database, but is stream-oriented. IntelMQ acts as a toolbox which can be configured as needed to automate processes of mass data with little or no human interaction At the end of the processing the data may land in some database or be sent to other systems.</p> <p>Both systems do not intend to replace each other or do compete. They integrate seamless and combine each other enabling more use-cases and</p>"},{"location":"admin/integrations/misp/#misp-api-collector","title":"MISP API Collector","text":"<p>The MISP API Collector fetches data from MISP via the MISP API .</p> <p>Look at the Bots documentation page for more information.</p>"},{"location":"admin/integrations/misp/#misp-expert","title":"MISP Expert","text":"<p>The MISP Expert searches MISP by using the MISP API for attributes/events matching the <code>source.ip</code> of the event. The MISP Attribute UUID and MISP Event ID of the newest attribute are added to the event.</p> <p>Look at the Bots documentation page for more information.</p>"},{"location":"admin/integrations/misp/#misp-feed-output","title":"MISP Feed Output","text":"<p>This bot creates a complete MISP feed ready to be configured in MISP as incoming data source.</p> <p>Look at the Bots documentation page for more information.</p>"},{"location":"admin/integrations/misp/#misp-api-output","title":"MISP API Output","text":"<p>Can be used to directly create MISP events in a MISP instance by using the MISP API.</p> <p>Look at the Bots documentation page for more information.</p>"},{"location":"admin/integrations/n6/","title":"N6","text":""},{"location":"admin/integrations/n6/#intelmq-n6-integration","title":"IntelMQ - n6 Integration","text":"<p>n6 is an Open Source Tool with very similar aims as IntelMQ: processing and distributing IoC data. The use-cases, architecture and features differ and both tools have non-overlapping strengths. n6 is maintained and developed by CERT.pl.</p> <p>Information about n6 can be found here:</p> <ul> <li>Website: cert.pl/en/n6</li> <li>Source Code:   github.com/CERT-Polska/n6</li> <li>n6 documentation: n6.readthedocs.io</li> </ul> <p></p> <p></p>"},{"location":"admin/integrations/n6/#data-format","title":"Data format","text":"<p>The internal data representation differs between IntelMQ and n6, so any data exchange between the systems requires a format conversion. For example, in n6 one message can contain multiple IP addresses, but IntelMQ is intentionally restricted to one IP address per message. Therefore, one n6 event results in one or more IntelMQ events. Because of this, and some other naming differences and ambiguities, the format conversion is not bidirectional.</p>"},{"location":"admin/integrations/n6/#data-exchange-interface","title":"Data exchange interface","text":"<p>n6 offers a STOMP interface via the RabbitMQ broker, which can be used for both sending and receiving data. IntelMQ offers both a STOMP collector bot for receiving data from n6, as well as a STOMP output bot for sending data to n6 instances.</p> <ul> <li>Stomp Collector Bot</li> <li>N6 Parser Bot</li> <li>Stomp Output Bot</li> </ul>"},{"location":"admin/integrations/n6/#data-conversion","title":"Data conversion","text":"<p>IntelMQ can parse n6 data using the n6 parser and n6 can parse IntelMQ data using the Intelmq n6 parser.</p> <ul> <li>N6 Parser Bot</li> </ul>"},{"location":"admin/integrations/n6/#complete-example","title":"Complete example","text":""},{"location":"admin/integrations/n6/#data-flow-n6-to-intelmq","title":"Data flow n6 to IntelMQ","text":""},{"location":"admin/integrations/n6/#data-flow-intelmq-to-n6","title":"Data flow IntelMQ to n6","text":""},{"location":"admin/integrations/n6/#certpl-data-feed","title":"CERT.pl Data feed","text":"<p>CERT.pl offers data feed available to their partners through the STOMP interface. Our feeds documentation contains details how it can be enabled in IntelMQ: CERT.pl n6 STOMP stream</p>"},{"location":"admin/integrations/n6/#webinput-csv","title":"Webinput CSV","text":"<p>The IntelMQ Webinput CSV software can also be used together with n6. The documentation on this component can be found in the software's repository: https://github.com/certat/intelmq-webinput-csv/blob/master/docs/webinput-n6.md</p>"},{"location":"admin/management/intelmq-api/","title":"IntelMQ API","text":""},{"location":"admin/management/intelmq-api/#managing-intelmq-api","title":"Managing IntelMQ API","text":""},{"location":"admin/management/intelmq-api/#running","title":"Running","text":"<p>For development purposes and testing you can run directly using <code>hug</code>:</p> <pre><code>hug -m intelmq_api.serve\n</code></pre>"},{"location":"admin/management/intelmq/","title":"IntelMQ","text":""},{"location":"admin/management/intelmq/#managing-intelmq","title":"Managing IntelMQ","text":""},{"location":"admin/management/intelmq/#required-services","title":"Required services","text":"<p>You need to enable and start Redis if not already done. Using systemd it can be done with:</p> <pre><code>systemctl enable redis.service\nsystemctl start redis.service\n</code></pre>"},{"location":"admin/management/intelmq/#introduction","title":"Introduction","text":"<p><code>intelmqctl</code> is the main tool to handle a intelmq installation. It handles the bots themselves and has some tools to handle the installation.</p> <p>Should you get lost any time, just use the --help after any argument for further explanation.</p> <pre><code>&gt; intelmqctl run file-output --help\n</code></pre>"},{"location":"admin/management/intelmq/#manage-the-botnet","title":"Manage the botnet","text":"<p>In IntelMQ, the botnet is the set of all currently configured and enabled bots. All configured bots have their configuration in <code>runtime.yaml</code>. By default, all bots are enabled.</p> <p>If no bot id is given, the command applies to all bots / the botnet. All commands except the start action are applied to all bots. But only enabled bots are started.</p> <p>In the examples below, a very minimal botnet is used.</p>"},{"location":"admin/management/intelmq/#start","title":"start","text":"<p>The start action applies to all bots which are enabled.</p> <pre><code>&gt; intelmqctl start\nStarting abusech-domain-parser...\nabusech-domain-parser is running.\nStarting abusech-feodo-domains-collector...\nabusech-feodo-domains-collector is running.\nStarting deduplicator-expert...\ndeduplicator-expert is running.\nfile-output is disabled.\nBotnet is running.\n</code></pre> <p>As we can file-output is disabled and thus has not been started. You can always explicitly start disabled bots.</p>"},{"location":"admin/management/intelmq/#stop","title":"stop","text":"<p>The stop action applies to all bots. Assume that all bots have been running:</p> <pre><code>&gt; intelmqctl stop\nStopping Botnet...\nStopping abusech-domain-parser...\nabusech-domain-parser is stopped.\nStopping abusech-feodo-domains-collector...\nabusech-feodo-domains-collector is stopped.\nStopping deduplicator-expert...\ndeduplicator-expert is stopped.\nStopping file-output...\nfile-output is stopped.\nBotnet is stopped.\n</code></pre>"},{"location":"admin/management/intelmq/#status","title":"status","text":"<p>With this command we can see the status of all configured bots. Here, the botnet was started beforehand:</p> <pre><code>&gt; intelmqctl status\nabusech-domain-parser is running.\nabusech-feodo-domains-collector is running.\ndeduplicator-expert is running.\nfile-output is disabled.\n</code></pre> <p>And if the disabled bot has also been started:</p> <pre><code>&gt; intelmqctl status\nabusech-domain-parser is running.\nabusech-feodo-domains-collector is running.\ndeduplicator-expert is running.\nfile-output is running.\n</code></pre> <p>If the botnet is stopped, the output looks like this:</p> <pre><code>&gt; intelmqctl status\nabusech-domain-parser is stopped.\nabusech-feodo-domains-collector is stopped.\ndeduplicator-expert is stopped.\nfile-output is disabled.\n</code></pre>"},{"location":"admin/management/intelmq/#restart","title":"restart","text":"<p>The same as start and stop consecutively.</p>"},{"location":"admin/management/intelmq/#reload","title":"reload","text":"<p>The same as reload of every bot.</p>"},{"location":"admin/management/intelmq/#enable-disable","title":"enable / disable","text":"<p>The sub commands <code>enable</code> and <code>disable</code> set the corresponding flags in <code>runtime.yaml</code>.</p> <pre><code>&gt; intelmqctl status\nfile-output is stopped.\nmalware-domain-list-collector is stopped.\nmalware-domain-list-parser is stopped.\n&gt; intelmqctl disable file-output\n&gt; intelmqctl status\nfile-output is disabled.\nmalware-domain-list-collector is stopped.\nmalware-domain-list-parser is stopped.\n&gt; intelmqctl enable file-output\n&gt; intelmqctl status\nfile-output is stopped.\nmalware-domain-list-collector is stopped.\nmalware-domain-list-parser is stopped.\n</code></pre>"},{"location":"admin/management/intelmq/#manage-individual-bots","title":"Manage individual bots","text":"<p>As all init systems, intelmqctl has the methods start, stop, restart, reload and status.</p>"},{"location":"admin/management/intelmq/#start_1","title":"start","text":"<p>This will start the bot with the ID <code>file-output</code>. A file with it's PID will be created in <code>/opt/intelmq/var/run/[bot-id].pid</code>.</p> <pre><code>&gt; intelmqctl start file-output\nStarting file-output...\nfile-output is running.\n</code></pre> <p>If the bot is already running, it won't be started again:</p> <pre><code>&gt; intelmqctl start file-output\nfile-output is running.\n</code></pre>"},{"location":"admin/management/intelmq/#stop_1","title":"stop","text":"<p>If the PID file does exist, a SIGINT will be sent to the process. After 0.25s we check if the process is running. If not, the PID file will be removed.</p> <pre><code>&gt; intelmqctl stop file-output\nStopping file-output...\nfile-output is stopped.\n</code></pre> <p>If there's no running bot, there's nothing to do.</p> <pre><code>&gt; intelmqctl stop file-output\nfile-output was NOT RUNNING.\n</code></pre> <p>If the bot did not stop in 0.25s, intelmqctl will say it's still running:</p> <pre><code>&gt; intelmqctl stop file-output\nfile-output is still running\n</code></pre>"},{"location":"admin/management/intelmq/#status_1","title":"status","text":"<p>Checks for the PID file and if the process with the given PID is alive. If the PID file exists, but the process does not exist, it will be removed.</p> <pre><code>&gt; intelmqctl status file-output\nfile-output is stopped.\n&gt; intelmqctl start file-output\nStarting file-output...\nfile-output is running.\n&gt; intelmqctl status file-output\nfile-output is running.\n</code></pre>"},{"location":"admin/management/intelmq/#restart_1","title":"restart","text":"<p>The same as stop and start consecutively.</p> <pre><code>&gt; intelmqctl restart file-output\nStopping file-output...\nfile-output is stopped.\nStarting file-output...\nfile-output is running.\n</code></pre>"},{"location":"admin/management/intelmq/#reload_1","title":"reload","text":"<p>Sends a SIGHUP to the bot, which will then reload the configuration.</p> <pre><code>&gt; intelmqctl reload file-output\nReloading file-output ...\nfile-output is running.\n</code></pre> <p>If the bot is not running, we can't reload it:</p> <pre><code>&gt; intelmqctl reload file-output\nfile-output was NOT RUNNING.\n</code></pre>"},{"location":"admin/management/intelmq/#run","title":"run","text":"<p>This command is used for debugging purposes.</p> <p>If launched with no arguments, the bot will call its init method and start processing messages as usual -- but you see everything happens.</p> <pre><code>&gt; intelmqctl run file-output\nfile-output: RestAPIOutputBot initialized with id file-output and version 3.5.2 as process 12345.\nfile-output: Bot is starting.\nfile-output: Loading source pipeline and queue 'file-output-queue'.\nfile-output: Connected to source queue.\nfile-output: No destination queues to load.\nfile-output: Bot initialization completed.\nfile-output: Waiting for incoming message.\n</code></pre> <p>Note that if another instance of the bot is running, only warning will be displayed.</p> <pre><code>&gt; intelmqctl run file-output\nMain instance of the bot is running in the background. You may want to launch: intelmqctl stop file-output\n</code></pre> <p>You can set the log level with the <code>-l</code> flag, e.g. <code>-l DEBUG</code>. For the 'console' subcommand, 'DEBUG' is the default.</p>"},{"location":"admin/management/intelmq/#console","title":"console","text":"<p>This command is used for debugging purposes.</p> <p>If launched with console argument, you get a <code>pdb</code> live console; or <code>ipdb</code> or <code>pudb</code> consoles if they were previously installed (I.E. <code>pip3 install ipdb --user</code>).</p> <pre><code>&gt; intelmqctl run file-output console\n*** Using console ipdb. Please use 'self' to access to the bot instance properties. ***\nipdb&gt; self. ...\n</code></pre> <p>You may specify the desired console in the next argument.</p> <pre><code>&gt; intelmqctl run file-output console pudb\n</code></pre>"},{"location":"admin/management/intelmq/#message","title":"message","text":"<p>Operate directly with the input / output pipelines.</p> <p>If get is the parameter, you see the message that waits in the input (source or internal) queue. If the argument is pop, the message gets popped as well.</p> <pre><code>&gt; intelmqctl run file-output message get\nfile-output: Waiting for a message to get...\n{\n    \"classification.type\": \"c&amp;c\",\n    \"feed.url\": \"https://example.com\",\n    \"raw\": \"1233\",\n    \"source.ip\": \"1.2.3.4\",\n    \"time.observation\": \"2017-05-17T22:00:33+00:00\",\n    \"time.source\": \"2017-05-17T22:00:32+00:00\"\n}\n</code></pre> <p>To send directly to the bot's output queue, just as it was sent by <code>self.send_message()</code> in bot's <code>process()</code> method, use the send argument. In our case of <code>file-output</code>, it has no destination queue so that nothing happens.</p> <pre><code>&gt; intelmqctl run file-output message send '{\"time.observation\": \"2017-05-17T22:00:33+00:00\", \"time.source\": \"2017-05-17T22:00:32+00:00\"}'\nfile-output: Bot has no destination queues.\n</code></pre> <p>Note, if you would like to know possible parameters of the message, put a wrong one -- you will be prompted if you want to list all the current bot harmonization.</p>"},{"location":"admin/management/intelmq/#process","title":"process","text":"<p>With no other arguments, bot's <code>process()</code> method will be run one time.</p> <pre><code>&gt; intelmqctl run file-output process\nfile-output: Bot is starting.\nfile-output: Bot initialization completed.\nfile-output: Processing...\nfile-output: Waiting for incoming message.\nfile-output: Received message {'raw': '1234'}.\n</code></pre> <p>If run with --dryrun|-d flag, the message gets never really popped out from the source or internal pipeline, nor sent to the output pipeline. Plus, you receive a note about the exact moment the message would get sent, or acknowledged. If the message would be sent to a non-default path, the name of this path is printed on the console.</p> <pre><code>&gt; intelmqctl run file-output process -d\nfile-output:  * Dryrun only, no message will be really sent through.\n...\nfile-output: DRYRUN: Message would be acknowledged now!\n</code></pre> <p>You may trick the bot to process a JSON instead of the Message in its pipeline with --msg|-m flag.</p> <pre><code>&gt; intelmqctl run file-output process -m '{\"source.ip\":\"1.2.3.4\"}'\nfile-output:  * Message from cli will be used when processing.\n...\n</code></pre> <p>If you wish to display the processed message as well, you the --show-sent|-s flag. Then, if sent through (either with <code>--dryrun</code> or without), the message gets displayed as well.</p>"},{"location":"admin/management/intelmq/#disable","title":"disable","text":"<p>Sets the <code>enabled</code> flag in the runtime configuration of the bot to <code>false</code>. By default, all bots are enabled.</p> <p>Example output:</p> <pre><code>&gt; intelmqctl status file-output\nfile-output is stopped.\n&gt; intelmqctl disable file-output\n&gt; intelmqctl status file-output\nfile-output is disabled.\n</code></pre>"},{"location":"admin/management/intelmq/#enable","title":"enable","text":"<p>Sets the <code>enabled</code> flag in the runtime configuration of the bot to <code>true</code>.</p> <p>Example output:</p> <pre><code>&gt; intelmqctl status file-output\nfile-output is disabled.\n&gt; intelmqctl enable file-output\n&gt; intelmqctl status file-output\nfile-output is stopped.\n</code></pre>"},{"location":"admin/management/intelmq/#list-bots","title":"List bots","text":"<p><code>intelmqctl list bots</code> does list all configured bots and their description.</p>"},{"location":"admin/management/intelmq/#list-queues","title":"List queues","text":"<p><code>intelmqctl list queues</code> shows all queues which are currently in use according to the configuration and how much events are in it:</p> <pre><code>&gt; intelmqctl list queues\nabusech-domain-parser-queue - 0\nabusech-domain-parser-queue-internal - 0\ndeduplicator-expert-queue - 0\ndeduplicator-expert-queue-internal - 0\nfile-output-queue - 234\nfile-output-queue-internal - 0\n</code></pre> <p>Use the <code>-q</code> or <code>--quiet</code> flag to only show non-empty queues:</p> <pre><code>&gt; intelmqctl list queues -q\nfile-output-queue - 234\n</code></pre> <p>The <code>--sum</code> or <code>--count</code> flag will show the sum of events on all queues:</p> <pre><code>&gt; intelmqctl list queues --sum\n42\n</code></pre>"},{"location":"admin/management/intelmq/#logging","title":"Logging","text":"<p>intelmqctl can show the last log lines for a bot, filtered by the log level.</p> <p>Logs are stored in <code>/opt/intelmq/var/log/</code> or <code>/var/log/intelmq/</code> directory. In case of failures, messages are dumped to the same directory with the file extension <code>.dump</code>.</p> <p>See the help page for more information.</p>"},{"location":"admin/management/intelmq/#check","title":"Check","text":"<p>This command will do various sanity checks on the installation and especially the configuration.</p>"},{"location":"admin/management/intelmq/#orphaned-queues","title":"Orphaned Queues","text":"<p>The <code>intelmqctl check</code> tool can search for orphaned queues. \"Orphaned queues\" are queues that have been used in the past and are no longer in use. For example you had a bot which you removed or renamed afterwards, but there were still messages in it's source queue. The source queue won't be renamed automatically and is now disconnected. As this queue is no longer configured, it won't show up in the list of IntelMQ's queues too. In case you are using redis as message broker, you can use the <code>redis-cli</code> tool to examine or remove these queues:</p> <pre><code>redis-cli -n 2\nkeys * # lists all existing non-empty queues\nllen [queue-name] # shows the length of the queue [queue-name]\nlindex [queue-name] [index] # show the [index]'s message of the queue [queue-name]\ndel [queue-name] # remove the queue [queue-name]\n</code></pre> <p>To ignore certain queues in this check, you can set the parameter <code>intelmqctl_check_orphaned_queues_ignore</code> in the defaults configuration file. For example:</p> <pre><code>\"intelmqctl_check_orphaned_queues_ignore\": [\"Taichung-Parser\"]\n</code></pre>"},{"location":"admin/management/intelmq/#configuration-upgrade","title":"Configuration upgrade","text":"<p>The <code>intelmqctl upgrade-config</code> function upgrade, upgrade the configuration from previous versions to the current one. It keeps track of previously installed versions and the result of all \"upgrade functions\" in the \"state file\", locate in the <code>$var_state_path/state.json</code> <code>/opt/intelmq/var/lib/state.json</code> or <code>/var/lib/intelmq/state.json</code>).</p> <p>This function has been introduced in version 2.0.1.</p> <p>It makes backups itself for all changed files before every run. Backups are overridden if they already exists. So make sure to always have a backup of your configuration just in case.</p>"},{"location":"admin/management/intelmq/#output-type","title":"Output type","text":"<p>intelmqctl can be used as command line tool, as library and as tool by other programs. If called directly, it will print all output to the console (stderr). If used as python library, the python types themselves are returned. The third option is to use machine-readable JSON as output (used by other managing tools).</p>"},{"location":"admin/management/intelmq/#exit-code","title":"Exit code","text":"<p>In case of errors, unsuccessful operations, the exit code is higher than 0. For example, when running <code>intelmqctl start</code> and one enabled bot is not running, the exit code is 1. The same is valid for e.g. <code>intelmqctl status</code>, which can be used for monitoring, and all other operations.</p>"},{"location":"admin/management/intelmq/#error-handling","title":"Error Handling","text":"<p>When bots are failing due to bad input data or programming errors, they can dump the problematic message to a file along with a traceback, if configured accordingly. These dumps are saved at in the logging directory as <code>[botid].dump</code> as JSON files. IntelMQ comes with an inspection and reinjection tool, called <code>intelmqdump</code>. It is an interactive tool to show all dumped files and the number of dumps per file. Choose a file by bot-id or listed numeric id. You can then choose to delete single entries from the file with <code>e 1,3,4</code>, show a message in more readable format with <code>s 1</code> (prints the raw-message, can be long!), recover some messages and put them back in the pipeline for the bot by <code>a</code> or <code>r 0,4,5</code>. Or delete the file with all dumped messages using <code>d</code>.</p> <pre><code>intelmqdump -h\nusage:\n    intelmqdump [botid]\n    intelmqdump [-h|--help]\n\nintelmqdump can inspect dumped messages, show, delete or reinject them into\nthe pipeline. It's an interactive tool, directly start it to get a list of\navailable dumps or call it with a known bot id as parameter.\n\npositional arguments:\n  botid       botid to inspect dumps of\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --truncate TRUNCATE, -t TRUNCATE\n                        Truncate raw-data with more characters than given. 0 for no truncating. Default: 1000.\n\nInteractive actions after a file has been selected:\n- r, Recover by IDs\n  &gt; r id{,id} [queue name]\n  &gt; r 3,4,6\n  &gt; r 3,7,90 modify-expert-queue\n  The messages identified by a consecutive numbering will be stored in the\n  original queue or the given one and removed from the file.\n- a, Recover all\n  &gt; a [queue name]\n  &gt; a\n  &gt; a modify-expert-queue\n  All messages in the opened file will be recovered to the stored or given\n  queue and removed from the file.\n- d, Delete entries by IDs\n  &gt; d id{,id}\n  &gt; d 3,5\n  The entries will be deleted from the dump file.\n- d, Delete file\n  &gt; d\n  Delete the opened file as a whole.\n- s, Show by IDs\n  &gt; s id{,id}\n  &gt; s 0,4,5\n  Show the selected IP in a readable format. It's still a raw format from\n  repr, but with newlines for message and traceback.\n- e, Edit by ID\n  &gt; e id\n  &gt; e 0\n  &gt; e 1,2\n  Opens an editor (by calling `sensible-editor`) on the message. The modified message is then saved in the dump.\n- q, Quit\n  &gt; q\n\n$ intelmqdump\n id: name (bot id)                    content\n  0: alienvault-otx-parser            1 dumps\n  1: cymru-whois-expert               8 dumps\n  2: deduplicator-expert              2 dumps\n  3: dragon-research-group-ssh-parser 2 dumps\n  4: file-output2                     1 dumps\n  5: fraunhofer-dga-parser            1 dumps\n  6: spamhaus-cert-parser             4 dumps\n  7: test-bot                         2 dumps\nWhich dump file to process (id or name)? 3\nProcessing dragon-research-group-ssh-parser: 2 dumps\n  0: 2015-09-03T13:13:22.159014 InvalidValue: invalid value u'NA' (&lt;type 'unicode'&gt;) for key u'source.asn'\n  1: 2015-09-01T14:40:20.973743 InvalidValue: invalid value u'NA' (&lt;type 'unicode'&gt;) for key u'source.asn'\n(r)ecover by ids, recover (a)ll, delete (e)ntries, (d)elete file, (s)how by ids, (q)uit, edit id (v)? d\nDeleted file /opt/intelmq/var/log/dragon-research-group-ssh-parser.dump\n</code></pre> <p>Bots and the intelmqdump tool use file locks to prevent writing to already opened files. Bots are trying to lock the file for up to 60 seconds if the dump file is locked already by another process (intelmqdump) and then give up. Intelmqdump does not wait and instead only shows an error message.</p> <p>By default, the <code>show</code> command truncates the <code>raw</code> field of messages at 1000 characters to change this limit or disable truncating at all (value 0), use the <code>--truncate</code> parameter.</p>"},{"location":"admin/management/intelmq/#known-issues","title":"Known issues","text":"<p>The currently implemented process managing using PID files is very erroneous.</p>"},{"location":"admin/utilities/bash-completion/","title":"Bash Completion","text":""},{"location":"admin/utilities/bash-completion/#bash-completion","title":"Bash Completion","text":"<p>To enable bash completion on <code>intelmqctl</code> and <code>intelmqdump</code> in order to help you run the commands in an easy manner, follow the installation process here.</p> <p>Bug</p> <p>This section of the documentation is currently incomplete and will be added later.</p>"},{"location":"dev/adding-feeds/","title":"Adding Feeds","text":""},{"location":"dev/adding-feeds/#adding-feeds","title":"Adding Feeds","text":"<p>Adding a feed doesn't necessarily require any programming experience. There are several collector and parser bots intended for general use. Depending on the data source you are trying to add as a feed, it might be only a matter of creating a working combination of collector bot (such as URL Fetcher) configuration and a parser bot (such as CSV parser) configuration. When you are satisfied with the configurations, add it to the <code>intelmq/etc/feeds.yaml</code> file using the following template and open a pull request!</p> <pre><code>&lt;NAME OF THE FEED PROVIDER&gt;:\n    &lt;NAME OF THE FEED&gt;:\n      description: &lt;DESCRIPTION OF WHAT KIND OF DATA THE FEED PROVIDES&gt;\n      additional_information: &lt;ANY ADDITIONAL INFORMATION&gt;\n      documentation: &lt;FEED HOMEPAGE/DOCUMENTATION URL&gt;\n      revision: &lt;DATE WHEN YOU ADDED THIS FEED&gt;\n      public: &lt;TRUE/FALSE IF THE DATA SOURCE IS PUBLICLY AVAILABLE&gt;\n      bots:\n        collector:\n          module: &lt;MODULE USED FOR THE COLLECTOR BOT&gt;\n          parameters:\n            name: __FEED__ # KEEP AS IT IS\n            provider: __PROVIDER__  # KEEP AS IT IS\n            &lt;ADDITIONAL COLLECTOR BOT PARAMETERS&gt;\n        parser:\n          module: &lt;MODULE USED FOR THE PARSER BOT&gt;\n          parameters:\n            &lt;ADDITIONAL PARSER BOT PARAMETERS&gt;\n</code></pre> <p>If the data source utilizes some unusual way of distribution or uses a custom format for the data it might be necessary to develop specialized bot(s) for this particular data source. Always try to use existing bots before you start developing your own. Please also consider extending an existing bot if your use-case is close enough to it's features. If you are unsure which way to take, start an issue and you will receive guidance.</p>"},{"location":"dev/adding-feeds/#feeds-wishlist","title":"Feeds Wishlist","text":"<p>This is a list with potentially interesting data sources, which are either currently not supported or the usage is not clearly documented in IntelMQ. If you want to contribute new feeds to IntelMQ, this is a great place to start!</p> <p>Note</p> <p>Some of the following data sources might better serve as an expert bot for enriching processed events.</p> <ul> <li>Lists of feeds:<ul> <li>threatfeeds.io</li> <li>TheCyberThreat</li> <li>sbilly: Awesome Security</li> <li>pannoniait:Backlists</li> <li>hslatman:awesome-threat-intelligence</li> <li>Zeek Intelligence Feeds</li> <li>imuledx OSING feeds</li> </ul> </li> <li>Some third party intelmq bots: NRDCS IntelMQ fork</li> <li>List of potentially interesting data sources:<ul> <li>Abuse.ch SSL Blacklists</li> <li>AbuseIPDB</li> <li>Adblock Plus</li> <li>apivoid IP Reputation API</li> <li>Anomali Limo Free Intel Feed</li> <li>APWG's ecrimex</li> <li>Avast Threat Intel IoCs of dark matter repository</li> <li>Berkeley</li> <li>Binary Defense</li> <li>Bot Invaders Realtime tracker</li> <li>Botherder Targetedthreats</li> <li>Botscout Last Caught</li> <li>botvrij</li> <li>Carbon Black Feeds</li> <li>CERT.pl Phishing Warning List</li> <li>Chaos Reigns</li> <li>Critical Stack</li> <li>Cruzit</li> <li>Cyber Crime Tracker</li> <li>drb-ra C2IntelFeeds</li> <li>DNS DB API</li> <li>ESET Malware Indicators of Compromise</li> <li>Facebook Threat Exchange</li> <li>FilterLists</li> <li>Firehol IPLists</li> <li>Google Webmaster Alerts</li> <li>GPF Comics DNS Blacklist</li> <li>Greensnow</li> <li>Greynoise</li> <li>HP Feeds</li> <li>IBM X-Force Exchange</li> <li>ImproWare AntiSpam</li> <li>ISightPartners</li> <li>James Brine</li> <li>Joewein</li> <li>Maltrail:<ul> <li>Malware</li> <li>Suspicious</li> <li>Mass Scanners   (for whitelisting)</li> </ul> </li> <li>Malshare</li> <li>MalSilo Malware URLs</li> <li>Malware Config</li> <li>Malware DB (cert.pl)</li> <li>MalwareInt</li> <li>Malware Must Die</li> <li>Manity Spam IP addresses</li> <li>Marc Blanchard DGA Domains</li> <li>MaxMind Proxies</li> <li>mIRC Servers</li> <li>MISP Warning Lists</li> <li>Monzymerza</li> <li>Multiproxy</li> <li>Neo23x0 signature-base</li> <li>OpenBugBounty</li> <li>Phishing Army</li> <li>Phishstats (offers JSON API and CSV download)</li> <li>Project Honeypot (#284)</li> <li>RST Threat Feed (offers a free and a commercial feed)</li> <li>SANS ISC</li> <li>ShadowServer Sandbox API</li> <li>Shodan search API</li> <li>Snort</li> <li>stopforumspam Toxic IP addresses and domains</li> <li>Spamhaus Botnet Controller List</li> <li>SteveBlack Hosts File</li> <li>The Haleys</li> <li>Threat Crowd</li> <li>Threat Grid</li> <li>Threatstream</li> <li>TotalHash</li> <li>UCE Protect</li> <li>Unit 42 Public Report IOCs</li> <li>URI BL</li> <li>urlscan.io</li> <li>Virustotal</li> <li>virustream</li> <li>VoIP Blacklist</li> <li>YourCMC</li> </ul> </li> </ul>"},{"location":"dev/bot-development/","title":"Bot Development","text":""},{"location":"dev/bot-development/#bot-development","title":"Bot Development","text":"<p>Here you should find everything you need to develop a new bot.</p>"},{"location":"dev/bot-development/#steps","title":"Steps","text":"<ol> <li>Create appropriately placed and named python file.</li> <li>Use correct parent class.</li> <li>Code the functionality you want (with mixins, inheritance, etc).</li> <li>Create appropriately placed test file.</li> <li>Prepare code for testing your bot.</li> <li>Add documentation for your bot.</li> <li>Add changelog and news info.</li> </ol>"},{"location":"dev/bot-development/#layout-rules","title":"Layout Rules","text":"<pre><code>intelmq/\n  lib/\n    bot.py\n    cache.py\n    message.py\n    pipeline.py\n    utils.py\n  bots/\n    collector/\n      &lt;bot name&gt;/\n            collector.py\n    parser/\n      &lt;bot name&gt;/\n            parser.py\n    expert/\n      &lt;bot name&gt;/\n            expert.py\n    output/\n      &lt;bot name&gt;/\n            output.py\n  etc/\n    runtime.yaml\n</code></pre> <p>Assuming you want to create a bot for a new 'Abuse.ch' feed. It turns out that here it is necessary to create different parsers for the respective kind of events (e.g. malicious URLs). Therefore, the usual hierarchy <code>intelmq/bots/parser/&lt;FEED&gt;/parser.py</code> would not be suitable because it is necessary to have more parsers for each Abuse.ch Feed. The solution is to use the same hierarchy with an additional \"description\" in the file name, separated by underscore. Also see the section Directories and Files naming.</p> <p>Example (including the current ones):</p> <pre><code>/intelmq/bots/parser/abusech/parser_domain.py\n/intelmq/bots/parser/abusech/parser_ip.py\n/intelmq/bots/parser/abusech/parser_ransomware.py\n/intelmq/bots/parser/abusech/parser_malicious_url.py\n</code></pre>"},{"location":"dev/bot-development/#directories-hierarchy-on-default-installation","title":"Directories Hierarchy on Default Installation","text":"<ul> <li>Configuration Files Path: <code>/opt/intelmq/etc/</code></li> <li>PID Files Path: <code>/opt/intelmq/var/run/</code></li> <li>Logs Files and dumps Path: <code>/opt/intelmq/var/log/</code></li> <li>Additional Bot Files Path, e.g. templates or databases:   <code>/opt/intelmq/var/lib/bots/[bot-name]/</code></li> </ul>"},{"location":"dev/bot-development/#directories-and-files-naming","title":"Directories and Files naming","text":"<p>Any directory and file of IntelMQ has to follow the Directories and Files naming. Any file name or folder name has to:</p> <ul> <li>be represented with lowercase and in case of the name has multiple words, the spaces between them must be removed or replaced by underscores</li> <li>be self-explaining what the content contains.</li> </ul> <p>In the bot directories name, the name must correspond to the feed provider. If necessary and applicable the feed name can and should be used as postfix for the filename.</p> <p>Examples:</p> <pre><code>intelmq/bots/parser/taichung/parser.py\nintelmq/bots/parser/cymru/parser_full_bogons.py\nintelmq/bots/parser/abusech/parser_ransomware.py\n</code></pre>"},{"location":"dev/bot-development/#guide","title":"Guide","text":""},{"location":"dev/bot-development/#naming-your-bot-class","title":"Naming your bot class","text":"<p>Class name of the bot (ex: PhishTank Parser) must correspond to the type of the bot (ex: Parser) e.g. <code>PhishTankParserBot</code></p>"},{"location":"dev/bot-development/#choosing-the-parent-class","title":"Choosing the parent class","text":"<p>Please use the correct bot type as parent class for your bot. The <code>intelmq.lib.bot</code> module contains the following classes:</p> <ul> <li><code>CollectorBot</code></li> <li><code>ParserBot</code></li> <li><code>ExpertBot</code></li> <li><code>OutputBot</code></li> </ul>"},{"location":"dev/bot-development/#template","title":"Template","text":"<p>Please adjust the doc strings accordingly and remove the in-line comments (<code>#</code>).</p> <pre><code>\"\"\"\nSPDX-FileCopyrightText: 2021 Your Name\nSPDX-License-Identifier: AGPL-3.0-or-later\n\nParse data from example.com, be a nice ExampleParserBot.\n\nDocument possible necessary configurations.\n\"\"\"\nimport sys\n\n# imports for additional libraries and intelmq\nfrom intelmq.lib.bot import ParserBot\n\n\nclass ExampleParserBot(ParserBot):\n    option1: str = \"defaultvalue\"\n    option2: bool = False\n\n    def process(self):\n        report = self.receive_message()\n\n        event = self.new_event(report)  # copies feed.name, time.observation\n        ...  # implement the logic here\n        event.add('source.ip', '127.0.0.1')\n        event.add('extra', {\"os.name\": \"Linux\"})\n        if self.option2:\n            event.add('extra', {\"customvalue\": self.option1})\n\n        self.send_message(event)\n        self.acknowledge_message()\n\n\nBOT = ExampleParserBot\n</code></pre> <p>Any attributes of the bot that are not private can be set by the user using the IntelMQ configuration settings.</p> <p>There are some names with special meaning. These can be used i.e. called:</p> <ul> <li><code>stop</code>: Shuts the bot down.</li> <li><code>receive_message</code></li> <li><code>send_message</code></li> <li><code>acknowledge_message</code>: see next section</li> <li><code>start</code>: internal method to run the bot</li> </ul> <p>These can be defined:</p> <ul> <li><code>init</code>: called at startup, use it to set up the bot (initializing classes, loading files etc)</li> <li><code>process</code>: processes the messages</li> <li><code>shutdown</code>: To Gracefully stop the bot, e.g. terminate connections</li> </ul> <p>All other names can be used freely.</p>"},{"location":"dev/bot-development/#mixins","title":"Mixins","text":"<p>For common settings and methods you can use mixins from <code>intelmq.lib.mixins</code>. To use the mixins, just let your bot inherit from the Mixin class (in addition to the inheritance from the Bot class). For example:</p> <pre><code>class HTTPCollectorBot(CollectorBot, HttpMixin):\n</code></pre> <p>The following mixins are available:</p> <ul> <li><code>HttpMixin</code></li> <li><code>SqlMixin</code></li> <li><code>CacheMixin</code></li> </ul> <p>The <code>HttpMixin</code> provides the HTTP attributes described in <code>common-parameters</code> and the following methods:</p> <ul> <li><code>http_get</code> takes an URL as argument. Any other arguments get passed to the <code>request.Session.get</code> method. <code>http_get</code>   returns a   <code>requests.Response</code>.</li> <li><code>http_session</code> can be used if you ever want to work with the session object directly. It takes no arguments and   returns the bots request.Session.</li> </ul> <p>The <code>SqlMixin</code> provides methods to connect to SQL servers. Inherit this Mixin so that it handles DB connection for you. You do not have to bother:</p> <ul> <li>connecting database in the <code>self.init()</code> method, self.cur will be set in the <code>__init__()</code></li> <li>catching exceptions, just call <code>self.execute()</code> instead of   <code>self.cur.execute()</code></li> <li><code>self.format_char</code> will be set to '%s' in PostgreSQL and to '?' in SQLite</li> </ul> <p>The <code>CacheMixin</code> provides methods to cache values for bots in a Redis database. It uses the following attributes:</p> <ul> <li><code>redis_cache_host: str = \"127.0.0.1\"</code></li> <li><code>redis_cache_port: int = 6379</code></li> <li><code>redis_cache_db: int = 9</code></li> <li><code>redis_cache_ttl: int = 15</code></li> <li><code>redis_cache_password: Optional[str] = None</code></li> </ul> <p>and provides the methods:</p> <ul> <li><code>cache_exists</code></li> <li><code>cache_get</code></li> <li><code>cache_set</code></li> <li><code>cache_flush</code></li> <li><code>cache_get_redis_instance</code></li> </ul>"},{"location":"dev/bot-development/#pipeline-interactions","title":"Pipeline Interactions","text":"<p>We can call three methods related to the pipeline:</p> <ul> <li><code>self.receive_message()</code>: The pipeline handler pops one message     from the internal queue if possible. Otherwise one message from     the sources list is popped, and added it to an internal queue. In     case of errors in process handling, the message can still be found     in the internal queue and is not lost. The bot class unravels the     message a creates an instance of the Event or Report class.</li> <li><code>self.send_message(event, path=\"_default\")</code>: Processed     message is sent to destination queues. It is possible to change     the destination queues by optional <code>path</code> parameter.</li> <li><code>self.acknowledge_message()</code>: Message formerly received by     <code>receive_message</code> is removed from the internal     queue. This should always be done after processing and after the     sending of the new message. In case of errors, this function is     not called and the message will stay in the internal queue waiting     to be processed again.</li> </ul>"},{"location":"dev/bot-development/#logging","title":"Logging","text":""},{"location":"dev/bot-development/#log-messages-format","title":"Log Messages Format","text":"<p>Log messages have to be clear and well formatted. The format is the following:</p> <p>Format:</p> <pre><code>&lt;timestamp&gt; - &lt;bot id&gt; - &lt;log level&gt; - &lt;log message&gt;\n</code></pre> <p>Rules:</p> <ul> <li>the Log message MUST follow the common rules of a sentence, beginning with uppercase and ending with period.</li> <li>the sentence MUST describe the problem or has useful information to give to an inexperienced user a context. Pure stack traces without any further explanation are not helpful.</li> </ul> <p>When the logger instance is created, the bot id must be given as parameter anyway. The function call defines the log level, see below.</p>"},{"location":"dev/bot-development/#log-levels","title":"Log Levels","text":"<ul> <li>debug: Debugging information includes retrieved and sent messages, detailed status information. Can include   sensitive information like passwords and amount can be huge.</li> <li>info: Logs include loaded databases, fetched reports or waiting messages.</li> <li>warning: Unexpected, but handled behavior.</li> <li>error: Errors and Exceptions.</li> <li>critical Program is failing.</li> </ul>"},{"location":"dev/bot-development/#what-to-log","title":"What to Log","text":"<ul> <li>Try to keep a balance between obscuring the source code file with hundreds of log messages and having too little log   messages.</li> <li>In general, a bot MUST report error conditions.</li> </ul>"},{"location":"dev/bot-development/#how-to-log","title":"How to Log","text":"<p>The Bot class creates a logger with that should be used by bots. Other components won't log anyway currently. Examples:</p> <pre><code>self.logger.info('Bot start processing.')\nself.logger.error('Pipeline failed.')\nself.logger.exception('Pipeline failed.')\n</code></pre> <p>The <code>exception</code> method automatically appends an exception traceback. The logger instance writes by default to the file <code>/opt/intelmq/var/log/[bot-id].log</code> and to stderr.</p>"},{"location":"dev/bot-development/#string-formatting-in-logs","title":"String formatting in Logs","text":"<p>Parameters for string formatting are better passed as argument to the log function, see https://docs.python.org/3/library/logging.html#logging.Logger.debug In case of formatting problems, the error messages will be better. For example:</p> <pre><code>self.logger.debug('Connecting to %r.', host)\n</code></pre>"},{"location":"dev/bot-development/#error-handling","title":"Error handling","text":"<p>The bot class itself has error handling implemented. The bot itself is allowed to throw exceptions and intended to fail! The bot should fail in case of malicious messages, and in case of unavailable but necessary resources. The bot class handles the exception and will restart until the maximum number of tries is reached and fail then. Additionally, the message in question is dumped to the file <code>/opt/intelmq/var/log/[bot-id].dump</code> and removed from the queue.</p>"},{"location":"dev/bot-development/#initialization","title":"Initialization","text":"<p>Maybe it is necessary so setup a Cache instance or load a file into memory. Use the <code>init</code> function for this purpose:</p> <pre><code>class ExampleParserBot(Bot):\n    def init(self):\n        try:\n            self.database = pyasn.pyasn(self.database)\n        except IOError:\n            self.logger.error(\"pyasn data file does not exist or could not be \"\n                              \"accessed in '%s'.\" % self.database)\n            self.logger.error(\"Read 'bots/experts/asn_lookup/README.md' and \"\n                              \"follow the procedure.\")\n            self.stop()\n</code></pre>"},{"location":"dev/bot-development/#custom-configuration-checks","title":"Custom configuration checks","text":"<p>Every bot can define a static method <code>check(parameters)</code> which will be called by <code>intelmqctl check</code>. For example the check function of the ASNLookupExpert:</p> <pre><code>@staticmethod\ndef check(parameters):\n    if not os.path.exists(parameters.get('database', '')):\n        return [[\"error\", \"File given as parameter 'database' does not exist.\"]]\n    try:\n        pyasn.pyasn(parameters['database'])\n    except Exception as exc:\n        return [[\"error\", \"Error reading database: %r.\" % exc]]\n</code></pre>"},{"location":"dev/bot-development/#running","title":"Running","text":"<p>You can always start any bot directly from command line by calling the executable. The executable will be created during installation a directory for binaries. After adding new bots to the code, install IntelMQ to get the files created. Don't forget to give an bot id as first argument. Also, running bots with other users than <code>intelmq</code> will raise permission errors.</p> <pre><code>$ sudo -i intelmq\n$ intelmqctl run file-output  # if configured\n$ intelmq.bots.outputs.file.output file-output\n</code></pre> <p>You will get all logging outputs directly on stderr as well as in the log file.</p>"},{"location":"dev/bot-development/#examples","title":"Examples","text":"<ul> <li>Check Expert Bots</li> <li>Check Parser Bots</li> </ul>"},{"location":"dev/bot-development/#parsers","title":"Parsers","text":"<p>Parsers can use a different, specialized Bot-class. It allows to work on individual elements of a report, splitting the functionality of the parser into multiple functions:</p> <ul> <li><code>process</code>: getting and sending data, handling of failures etc.</li> <li><code>parse</code>: Parses the report and splits it into single elements (e.g. lines). Can be overridden.</li> <li><code>parse_line</code>: Parses elements, returns an Event. Can be overridden.</li> <li><code>recover_line</code>: In case of failures and for the field <code>raw</code>, this function recovers a fully functional report containing only one element. Can be overridden.</li> </ul> <p>For common cases, like CSV, existing function can be used, reducing the amount of code to implement. In the best case, only <code>parse_line</code> needs to be coded, as only this part interprets the data.</p> <p>You can have a look at the implementation <code>intelmq/lib/bot.py</code> or at examples, e.g. the DummyBot in <code>intelmq/tests/lib/test_parser_bot.py</code>. This is a stub for creating a new Parser, showing the parameters and possible code:</p> <pre><code>class MyParserBot(ParserBot):\n\n    def parse(self, report):\n        \"\"\"A generator yielding the single elements of the data.\n\n        Comments, headers etc. can be processed here. Data needed by\n        `self.parse_line` can be saved in `self.tempdata` (list).\n\n        Default parser yields stripped lines.\n        Override for your use or use an existing parser, e.g.:\n            parse = ParserBot.parse_csv\n        \"\"\"\n        for line in utils.base64_decode(report.get(\"raw\")).splitlines():\n            yield line.strip()\n\n    def parse_line(self, line, report):\n        \"\"\"A generator which can yield one or more messages contained in line.\n\n        Report has the full message, thus you can access some metadata.\n        Override for your use.\n        \"\"\"\n        raise NotImplementedError\n\n    def process(self):\n        self.tempdata = []  # temporary data for parse, parse_line and recover_line\n        self.__failed = []\n        report = self.receive_message()\n\n        for line in self.parse(report):\n            if not line:\n                continue\n            try:\n                # filter out None\n                events = list(filter(bool, self.parse_line(line, report)))\n            except Exception as exc:\n                self.logger.exception('Failed to parse line.')\n                self.__failed.append((exc, line))\n            else:\n                self.send_message(*events)\n\n        for exc, line in self.__failed:\n            self._dump_message(exc, self.recover_line(line))\n\n        self.acknowledge_message()\n\n    def recover_line(self, line):\n        \"\"\"Reverse of parse for single lines.\n\n        Recovers a fully functional report with only the problematic line.\n        \"\"\"\n        return 'n'.join(self.tempdata + [line])\n\n\nBOT = MyParserBot\n</code></pre>"},{"location":"dev/bot-development/#parse_line","title":"parse_line","text":"<p>One line can lead to multiple events, thus <code>parse_line</code> can't just return one Event. Thus, this function is a generator, which allows to easily return multiple values. Use <code>yield event</code> for valid Events and <code>return</code> in case of a void result (not parsable line, invalid data etc.).</p>"},{"location":"dev/bot-development/#tests","title":"Tests","text":"<p>In order to do automated tests on the bot, it is necessary to write tests including sample data. Have a look at some existing tests:</p> <ul> <li>The DummyParserBot in <code>intelmq/tests/lib/test_parser_bot.py</code>. This test has the example data (report and event) inside the file, defined as dictionary.</li> <li>The parser for malwaregroup at <code>intelmq/tests/bots/parsers/malwaregroup/test_parser_*.py</code>. The latter loads a sample HTML file from the same directory, which is the raw report.</li> <li>The test for ASNLookupExpertBot has two event tests, one is an expected fail (IPv6).</li> </ul> <p>Ideally an example contains not only the ideal case which should succeed, but also a case where should fail instead. (TODO: Implement assertEventNotEqual or assertEventNotcontainsSubset or similar) Most existing bots are only tested with one message. For newly written test it is appreciable to have tests including more then one message, e.g. a parser fed with an report consisting of multiple events.</p> <pre><code>import unittest\n\nimport intelmq.lib.test as test\nfrom intelmq.bots.parsers.exampleparser.parser import ExampleParserBot  # adjust bot class name and module\n\n\nclass TestExampleParserBot(test.BotTestCase, unittest.TestCase):  # adjust test class name\n    \"\"\"A TestCase for ExampleParserBot.\"\"\"\n\n    @classmethod\n    def set_bot(cls):\n        cls.bot_reference = ExampleParserBot  # adjust bot class name\n        cls.default_input_message = EXAMPLE_EVENT  # adjust source of the example event (dict), by default an empty event or report (depending on bot type)\n\n    # This is an example how to test the log output\n    def test_log_test_line(self):\n        \"\"\"Test if bot does log example message.\"\"\"\n        self.run_bot()\n        self.assertRegexpMatches(self.loglines_buffer,\n                                 \"INFO - Lorem ipsum dolor sit amet\")\n\n    def test_event(self):\n        \"\"\"Test if correct Event has been produced.\"\"\"\n        self.run_bot()\n        self.assertMessageEqual(0, EXAMPLE_REPORT)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    unittest.main()\n</code></pre> <p>When calling the file directly, only the tests in this file for the bot will be expected. Some default tests are always executed (via the <code>test.BotTestCase</code> class), such as pipeline and message checks, logging, bot naming or empty message handling.</p> <p>See the <code>testing</code> section about how to run the tests.</p>"},{"location":"dev/bot-development/#cache","title":"Cache","text":"<p>Bots can use a Redis database as cache instance. Use the <code>intelmq.lib.utils.Cache</code> class to set this up and/or look at existing bots, like the <code>cymru_whois</code> expert how the cache can be used. Bots must set a TTL for all keys that are cached to avoid caches growing endless over time. Bots must use the Redis databases &gt;= 10, but not those already used by other bots. Look at <code>find intelmq -type f -name '*.py' -exec grep -r 'redis_cache_db' {} +</code> to see which databases are already used.</p> <p>The databases &lt; 10 are reserved for the IntelMQ core:</p> <ul> <li>2: pipeline</li> <li>3: statistics</li> <li>4: tests</li> </ul>"},{"location":"dev/bot-development/#documentation","title":"Documentation","text":"<p>Please document your added/modified code.</p> <p>For doc strings, we are using the sphinx-napoleon-google-type-annotation.</p> <p>Additionally, Python's type hints/annotations are used, see PEP484.</p>"},{"location":"dev/bot-development/#testing-pre-releases","title":"Testing Pre-releases","text":""},{"location":"dev/bot-development/#installation","title":"Installation","text":"<p>The installation procedures need to be adapted only a little bit.</p> <p>For native packages, you can find the unstable packages of the next version here: Installation Unstable Native Packages . The unstable only has a limited set of packages, so enabling the stable repository can be activated in parallel. For CentOS 8 unstable, the stable repository is required.</p> <p>For the installation with pip, use the <code>--pre</code> parameter as shown here following command:</p> <pre><code>pip3 install --pre intelmq\n</code></pre> <p>All other steps are not different. Please report any issues you find in our Issue Tracker.</p>"},{"location":"dev/data-format/","title":"Data Format","text":""},{"location":"dev/data-format/#data-format","title":"Data Format","text":"<p>Data passed between bots is called a Message. There are two types of Messages: Report and Event. Report is produced by collector bots and consists of collected raw data (CSV, JSON, HTML, etc) and feed metadata. It is passed to a parser bot which parses Report into a single or multiple Events. Expert bots and output bots handle only Events.</p> <p>All Messages (Reports and Events) are Python dictionaries (or JSONs). The key names and according types are defined by the IntelMQ Data Format.</p> <p>The source code for the Data Format can be found in the Python module <code>intelmq.lib.harmonization</code> and the configuration is present inside the <code>harmonization.conf</code> file. (The term Harmonization is used for historical reasons.)</p>"},{"location":"dev/data-format/#rules-for-keys","title":"Rules for keys","text":"<p>The keys are grouped together in sub-fields, e.g. <code>source.ip</code> or <code>source.geolocation.latitude</code>.</p> <p>Only the lower-case alphabet, numbers and the underscore are allowed. Further, the field name must not begin with a number. Thus, keys must match <code>^[a-z_][a-z_0-9]+(\\.[a-z_0-9]+)*$</code>. These rules also apply for the otherwise unregulated <code>extra.</code> namespace.</p>"},{"location":"dev/data-format/#data-types","title":"Data Types","text":"<p>This document describes the IntelMQ data types used for individual events with a description of each allowed field.</p>"},{"location":"dev/data-format/#asn","title":"ASN","text":"<p>ASN type. Derived from Integer with forbidden values.</p> <p>Only valid are: 0 &lt; ASN &lt;= 4294967295</p> <p>See https://en.wikipedia.org/wiki/Autonomous_system_(Internet)</p> <p>The first and last ASNs of the original 16-bit integers, namely 0 and 65,535, and the last ASN of the 32-bit numbers, namely 4,294,967,295 are reserved and should not be used by operators.</p>"},{"location":"dev/data-format/#accuracy","title":"Accuracy","text":"<p>Accuracy type. A Float between 0 and 100.</p>"},{"location":"dev/data-format/#base64","title":"Base64","text":"<p>Base64 type. Always gives unicode strings.</p> <p>Sanitation encodes to base64 and accepts binary and unicode strings.</p>"},{"location":"dev/data-format/#boolean","title":"Boolean","text":"<p>Boolean type. Without sanitation only python bool is accepted.</p> <p>Sanitation accepts string 'true' and 'false' and integers 0 and 1.</p>"},{"location":"dev/data-format/#classificationtaxonomy","title":"ClassificationTaxonomy","text":"<p><code>classification.taxonomy</code> type.</p> <p>The mapping follows Reference Security Incident Taxonomy Working Group \u2013 RSIT WG: https://github.com/enisaeu/Reference-Security-Incident-Taxonomy-Task-Force/</p> <p>These old values are automatically mapped to the new ones:</p> <ul> <li>'abusive content' -&gt; 'abusive-content'</li> <li>'information gathering' -&gt; 'information-gathering'</li> <li>'intrusion attempts' -&gt; 'intrusion-attempts'</li> <li>'malicious code' -&gt; 'malicious-code'</li> </ul> <p>Allowed values are:</p> <ul> <li>abusive-content</li> <li>availability</li> <li>fraud</li> <li>information-content-security</li> <li>information-gathering</li> <li>intrusion-attempts</li> <li>intrusions</li> <li>malicious-code</li> <li>other</li> <li>test</li> <li>vulnerable</li> </ul>"},{"location":"dev/data-format/#classificationtype","title":"ClassificationType","text":"<p><code>classification.type</code> type.</p> <p>The mapping extends Reference Security Incident Taxonomy Working Group \u2013 RSIT WG:</p> <p>https://github.com/enisaeu/Reference-Security-Incident-Taxonomy-Task-Force/</p> <p>These old values are automatically mapped to the new ones:</p> <ul> <li>'botnet drone' -&gt; 'infected-system'</li> <li>'ids alert' -&gt; 'ids-alert'</li> <li>'c&amp;c' -&gt; 'c2-server'</li> <li>'c2server' -&gt; 'c2-server'</li> <li>'infected system' -&gt; 'infected-system'</li> <li>'malware configuration' -&gt; 'malware-configuration'</li> <li>'Unauthorised-information-access' -&gt; 'unauthorised-information-access'</li> <li>'leak' -&gt; 'data-leak'</li> <li>'vulnerable client' -&gt; 'vulnerable-system'</li> <li>'vulnerable service' -&gt; 'vulnerable-system'</li> <li>'ransomware' -&gt; 'infected-system'</li> <li>'unknown' -&gt; 'undetermined'</li> </ul> <p>These values changed their taxonomy: 'malware': In terms of the taxonomy 'malicious-code' they can be either 'infected-system' or 'malware-distribution' but in terms of malware actually, it is now taxonomy 'other'</p> <p>Allowed values are:</p> <ul> <li>application-compromise</li> <li>blacklist</li> <li>brute-force</li> <li>burglary</li> <li>c2-server</li> <li>copyright</li> <li>data-leak</li> <li>data-loss</li> <li>ddos</li> <li>ddos-amplifier</li> <li>dga-domain</li> <li>dos</li> <li>exploit</li> <li>harmful-speech</li> <li>ids-alert</li> <li>infected-system</li> <li>information-disclosure</li> <li>malware</li> <li>malware-configuration</li> <li>malware-distribution</li> <li>masquerade</li> <li>misconfiguration</li> <li>other</li> <li>outage</li> <li>phishing</li> <li>potentially-unwanted-accessible</li> <li>privileged-account-compromise</li> <li>proxy</li> <li>sabotage</li> <li>scanner</li> <li>sniffing</li> <li>social-engineering</li> <li>spam</li> <li>system-compromise</li> <li>test</li> <li>tor</li> <li>unauthorised-information-access</li> <li>unauthorised-information-modification</li> <li>unauthorized-use-of-resources</li> <li>undetermined</li> <li>unprivileged-account-compromise</li> <li>violence</li> <li>vulnerable-system</li> <li>weak-crypto</li> </ul>"},{"location":"dev/data-format/#datetime","title":"DateTime","text":"<p>Date and time type for timestamps.</p> <p>Valid values are timestamps with time zone and in the format '%Y-%m-%dT%H:%M:%S+00:00'. Invalid are missing times and missing timezone information (UTC). Microseconds are also allowed.</p> <p>Sanitation normalizes the timezone to UTC, which is the only allowed timezone.</p> <p>The following additional conversions are available with the convert function:</p> <ul> <li><code>timestamp</code></li> <li><code>windows_nt</code>: From Windows NT / AD / LDAP</li> <li><code>epoch_millis</code>: From Milliseconds since Epoch</li> <li><code>from_format</code>: From a given format, eg. 'from_format|%H %M %S %m %d %Y %Z'</li> <li><code>from_format_midnight</code>: Date from a given format and assume midnight, e.g. 'from_format_midnight|%d-%m-%Y'</li> <li><code>utc_isoformat</code>: Parse date generated by datetime.isoformat()</li> <li><code>fuzzy</code> (or None): Use dateutils' fuzzy parser, default if no specific parser is given</li> </ul>"},{"location":"dev/data-format/#fqdn","title":"FQDN","text":"<p>Fully qualified domain name type.</p> <p>All valid lowercase domains are accepted, no IP addresses or URLs. Trailing dot is not allowed.</p> <p>To prevent values like '10.0.0.1:8080' (#1235), we check for the non-existence of ':'.</p>"},{"location":"dev/data-format/#float","title":"Float","text":"<p>Float type. Without sanitation only python float/integer/long is accepted. Boolean is explicitly denied.</p> <p>Sanitation accepts strings and everything float() accepts.</p>"},{"location":"dev/data-format/#ipaddress","title":"IPAddress","text":"<p>Type for IP addresses, all families. Uses the ipaddress module.</p> <p>Sanitation accepts integers, strings and objects of ipaddress.IPv4Address and ipaddress.IPv6Address.</p> <p>Valid values are only strings. 0.0.0.0 is explicitly not allowed.</p>"},{"location":"dev/data-format/#ipnetwork","title":"IPNetwork","text":"<p>Type for IP networks, all families. Uses the ipaddress module.</p> <p>Sanitation accepts strings and objects of ipaddress.IPv4Network and ipaddress.IPv6Network. If host bits in strings are set, they will be ignored (e.g 127.0.0.1/32).</p> <p>Valid values are only strings.</p>"},{"location":"dev/data-format/#integer","title":"Integer","text":"<p>Integer type. Without sanitation only python integer/long is accepted. Bool is explicitly denied.</p> <p>Sanitation accepts strings and everything int() accepts.</p>"},{"location":"dev/data-format/#json","title":"JSON","text":"<p>JSON type.</p> <p>Sanitation accepts any valid JSON objects.</p> <p>Valid values are only unicode strings with JSON objects.</p>"},{"location":"dev/data-format/#jsondict","title":"JSONDict","text":"<p>JSONDict type.</p> <p>Sanitation accepts pythons dictionaries and JSON strings.</p> <p>Valid values are only unicode strings with JSON dictionaries.</p>"},{"location":"dev/data-format/#lowercasestring","title":"LowercaseString","text":"<p>Like string, but only allows lower case characters.</p> <p>Sanitation lowers all characters.</p>"},{"location":"dev/data-format/#registry","title":"Registry","text":"<p>Registry type. Derived from UppercaseString.</p> <p>Only valid values: AFRINIC, APNIC, ARIN, LACNIC, RIPE. RIPE-NCC and RIPENCC are normalized to RIPE.</p>"},{"location":"dev/data-format/#string","title":"String","text":"<p>Any non-empty string without leading or trailing whitespace.</p>"},{"location":"dev/data-format/#tlp","title":"TLP","text":"<p>TLP level type. Derived from UppercaseString.</p> <p>Only valid values: WHITE, GREEN, AMBER, RED.</p> <p>Accepted for sanitation are different cases and the prefix 'tlp:'.</p>"},{"location":"dev/data-format/#url","title":"URL","text":"<p>URI type. Local and remote.</p> <p>Sanitation converts hxxp and hxxps to http and https. For local URIs (file) a missing host is replaced by localhost.</p> <p>Valid values must have the host (network location part).</p>"},{"location":"dev/data-format/#uppercasestring","title":"UppercaseString","text":"<p>Like string, but only allows upper case characters.</p> <p>Sanitation uppers all characters.</p>"},{"location":"dev/documentation/","title":"Documentation","text":""},{"location":"dev/documentation/#documentation","title":"Documentation","text":"<p>The documentation is automatically published to https://docs.intelmq.org at every push to the develop branch of the repository.</p> <p>To build the documentation you need additional packages:</p> <pre><code>pip3 install .[development]\n</code></pre> <p>Then use the Makefile to build the documentation using mkdocs:</p> <pre><code>make docs\n</code></pre> <p>Some parts of the documentation are automatically generated using dedicated scripts. You can find them in the Makefile.</p>"},{"location":"dev/environment/","title":"Environment","text":""},{"location":"dev/environment/#development-environment","title":"Development Environment","text":""},{"location":"dev/environment/#directories","title":"Directories","text":"<p>For development purposes, you need two directories:</p> <ul> <li>directory with the local source code repository</li> <li>root directory of the IntelMQ installation</li> </ul> <p>The default root directory of the IntelMQ installation is <code>/opt/intelmq</code>. This directory is used for configurations (<code>/opt/intelmq/etc</code>), local states (<code>/opt/intelmq/var/lib</code>) and logs (<code>/opt/intelmq/var/log</code>). If you want to change it, please set the <code>INTELMQ_ROOT_DIR</code> environment variable with a desired location.</p> <p>For repository directory, you can use any path that is accessible by users you use to run IntelMQ. For globally installed IntelMQ, the directory has to be readable by other unprivileged users (e.g. home directories on Fedora can't be read by other users by default).</p> <p>To keep commands in the guide universal, we will use environmental variables for repository and installation paths. You can set them with following commands:</p> <pre><code># Adjust paths if you want to use non-standard directories\nexport INTELMQ_REPO=/opt/dev_intelmq\nexport INTELMQ_ROOT_DIR=/opt/intelmq\n</code></pre> <p>Note</p> <p>If using non-default installation directory, remember to keep the root directory variable set for every run of IntelMQ commands. If you don't, then the default location <code>/opt/intelmq</code> will be used.</p>"},{"location":"dev/environment/#installation","title":"Installation","text":"<p>Developers can create a fork repository of IntelMQ in order to commit the new code to this repository and then be able to do pull requests to the main repository. Otherwise you can just use the 'certtools' as username below.</p> <p>The following instructions will use <code>pip3 -e</code>, which gives you a so called editable installation. No code is copied in the libraries directories, there's just a link to your code. However, configuration files still required to be moved to <code>/opt/intelmq</code> as the instructions show.</p> <p>The traditional way to work with IntelMQ is to install it globally and have a separated user for running it. If you wish to separate your machine Python's libraries, e.g. for development purposes, you could alternatively use a Python virtual environment and your local user to run IntelMQ. Please use your preferred way from instructions below.</p>"},{"location":"dev/environment/#using-globally-installed-intelmq","title":"Using globally installed IntelMQ","text":"<pre><code>sudo -s\n\ngit clone https://github.com/&lt;your username&gt;/intelmq.git $INTELMQ_REPO\ncd $INTELMQ_REPO\n\npip3 install -e .\n\nuseradd -d $INTELMQ_ROOT_DIR -U -s /bin/bash intelmq\n\nintelmqsetup\n</code></pre>"},{"location":"dev/environment/#using-virtual-environment","title":"Using virtual environment","text":"<pre><code>git clone https://github.com/&lt;your username&gt;/intelmq.git $INTELMQ_REPO\ncd $INTELMQ_REPO\n\npython -m venv .venv\nsource .venv/bin/activate\n\npip install -e .\n\n# If you use a non-local directory as INTELMQ_ROOT_DIR, use following\n# command to create it and change the ownership.\nsudo install -g `whoami` -o `whoami` -d $INTELMQ_ROOT_DIR\n# For local directory, just create it with mkdir:\nmkdir $INTELMQ_ROOT_DIR\n\nintelmqsetup --skip-ownership\n</code></pre> <p>Note</p> <p>Please do not forget that configuration files, log files will be available on <code>$INTELMQ_ROOT_DIR</code>. However, if your development is somehow related to any shipped configuration file, you need to apply the changes in your repository <code>$INTELMQ_REPO/intelmq/etc/</code>.</p>"},{"location":"dev/environment/#additional-services","title":"Additional services","text":"<p>Some features require additional services, like message queue or database. The commonly used services are gained for development purposes in the Docker Compose file in <code>contrib/development-tools/docker-compose-common-services.yaml</code> in the repository. You can use them to run services on your machine in a docker containers, or decide to configure them in an another way. To run them using Docker Compose, use following command from the main repository directory:</p> <pre><code># For older Docker versions, you may need to use `docker-compose` command\ndocker compose -f contrib/development-tools/docker-compose-common-services.yaml up -d\n</code></pre> <p>This will start in the background containers with Redis, RabbitMQ, PostgreSQL and MongoDB.</p>"},{"location":"dev/environment/#how-to-develop","title":"How to develop","text":"<p>After you successfully setup your IntelMQ development environment, you can perform any development on any <code>.py</code> file on <code>$INTELMQ_REPO</code>. After you change, you can use the normal procedure to run the bots:</p> <pre><code>su - intelmq # Use for global installation\nsource .venv/bin/activate # Use for virtual environment installation\n\nintelmqctl start spamhaus-drop-collector\n\ntail -f $INTELMQ_ROOT_DIR/var/log/spamhaus-drop-collector.log\n</code></pre> <p>You can also add new bots, creating the new <code>.py</code> file on the proper directory inside <code>cd $INTELMQ_REPO/intelmq</code>. However, your IntelMQ installation with pip3 needs to be updated. Please check the following section.</p>"},{"location":"dev/environment/#update","title":"Update","text":"<p>In case you developed a new bot, you need to update your current development installation. In order to do that, please follow this procedure:</p> <ol> <li>Make sure that you have your new bot in the right place.</li> <li> <p>Update pip metadata and new executables: <pre><code>sudo -s # Use for global installation\nsource .venv/bin/activate # Use for virtual environment installation\n\ncd /opt/dev_intelmq\npip3 install -e .\n</code></pre></p> </li> <li> <p>If you're using the global installation, an additional step of changing permissions and ownership is necessary: <pre><code>find $INTELMQ_ROOT_DIR/ -type d -exec chmod 0770 {} \\+\nfind $INTELMQ_ROOT_DIR/ -type f -exec chmod 0660 {} \\+\nchown -R intelmq.intelmq $INTELMQ_ROOT_DIR\n## if you use the intelmq manager (adapt the webservers' group if needed):\nchown intelmq.www-data $INTELMQ_ROOT_DIR/etc/*.conf\n</code></pre></p> </li> </ol> <p>Now you can test run your new bot following this procedure:</p> <pre><code>su - intelmq              # Use for global installation\nsource .venv/bin/activate # Use for virtual environment installation\n\nintelmqctl start &lt;bot_id&gt;\n</code></pre>"},{"location":"dev/extensions-packages/","title":"Extensions Packages","text":""},{"location":"dev/extensions-packages/#creating-extensions-packages","title":"Creating extensions packages","text":"<p>IntelMQ supports adding additional bots using your own independent packages. You can use this to add a new integration that is special to you, or cannot be integrated into the main IntelMQ repository for some reason.</p>"},{"location":"dev/extensions-packages/#building-an-extension-package","title":"Building an extension package","text":"<p>A simple example of the package can be found in <code>contrib/example-extension-package</code>. To make your custom bots work with IntelMQ, you need to ensure that</p> <ul> <li>your bot's module exposes a <code>BOT</code> object of the class inherited from <code>intelmq.lib.bot.Bot</code>    or its subclasses,</li> <li>your package registers an entry point    in the <code>console_scripts</code> group with a name starting with <code>intelmq.bots.</code> followed by    the name of the group (collectors, experts, outputs, parsers), and then your original name.    The entry point must point to the <code>BOT.run</code> method,</li> <li>the module in which the bot resides must be importable by IntelMQ (e.g. installed in the same    virtualenv, if you use them).</li> </ul> <p>Apart from these requirements, your package can use any of the usual package features. We strongly recommend following the same principles and main guidelines as the official bots. This will ensure the same experience when using official and additional bots.</p>"},{"location":"dev/extensions-packages/#naming-convention","title":"Naming convention","text":"<p>Building your own extensions gives you a lot of freedom, but it's important to know that if your bot's entry point uses the same name as another bot, it may not be possible to use it, or to determine which one is being used. For this reason, we recommend that you start the name of your bot with an with an organization identifier and then the bot name.</p> <p>For example, if I create a collector bot for feed source <code>Special</code> and run it on behalf of the organization <code>Awesome</code>, the suggested entry point might be <code>intelmq.bots.collectors.awesome.special</code>. Note that the structure of your package doesn't matter, as long as it can be imported properly.</p> <p>For example, I could create a package called <code>awesome-bots</code> with the following file structure</p> <pre><code>   awesome_bots\n   \u251c\u2500\u2500 pyproject.toml\n   \u2514\u2500\u2500 awesome_bots\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 special.py\n</code></pre> <p>The pyproject.toml file would then have the following section:</p> <pre><code>   [project.scripts]\n   intelmq.bots.collectors.awesome.special = \"awesome_bots.special:BOT.run\"\n</code></pre> <p>Once you have installed your package, you can run <code>intelmqctl list bots</code> to check if your bot was properly registered.</p>"},{"location":"dev/guidelines/","title":"Guidelines","text":""},{"location":"dev/guidelines/#development-guidelines","title":"Development Guidelines","text":""},{"location":"dev/guidelines/#coding-rules","title":"Coding-Rules","text":"<p>Most important: KEEP IT SIMPLE! This can not be over-estimated. Feature creep can destroy any good software project. But if new folks can not understand what you wrote in 10-15 minutes, it is not good. It's not about the performance, etc. It's about readability.</p> <p>In general, we follow PEP8. We recommend reading it before committing code.</p> <p>There are some exceptions: sometimes it does not make sense to check for every PEP8 error (such as whitespace indentation when you want to make a dict=() assignment look pretty. Therefore, we do have some exceptions defined in the <code>setup.cfg</code> file.</p> <p>We support Python 3 only.</p>"},{"location":"dev/guidelines/#unicode","title":"Unicode","text":"<ul> <li>Each internal object in IntelMQ (Event, Report, etc) that has strings, their strings MUST be in UTF-8 Unicode format.</li> <li>Any data received from external sources MUST be transformed into UTF-8 Unicode format before add it to IntelMQ   objects.</li> </ul>"},{"location":"dev/guidelines/#back-end-independence-and-compatibility","title":"Back-end independence and Compatibility","text":"<p>Any component of the IntelMQ MUST be independent of the message queue technology (Redis, RabbitMQ, etc...).</p>"},{"location":"dev/guidelines/#license-header","title":"License Header","text":"<p>Please add a license and copyright header to your bots. There is a Github action that tests for reuse compliance of your code files.</p>"},{"location":"dev/guidelines/#intelmq-data-format-rules","title":"IntelMQ Data Format Rules","text":"<p>Any component of IntelMQ MUST respect the IntelMQ Data Format.</p>"},{"location":"dev/guidelines/#code-submission-rules","title":"Code Submission Rules","text":""},{"location":"dev/guidelines/#releases-repositories-and-branches","title":"Releases, Repositories and Branches","text":"<ul> <li>The main repository is in github.com/certtools/intelmq.</li> <li>We use semantic versioning.</li> <li>If you contribute something, please fork the repository, create a separate branch and use this for pull requests, see section below.</li> <li>There are a couple of forks which might be regularly merged into the main repository. They are independent and can have incompatible changes and can deviate from the upstream repository.</li> </ul>"},{"location":"dev/guidelines/#branching-model","title":"Branching model","text":"<ul> <li>\"master\" is the stable branch. It hold the latest stable release. Non-developers should only work on this branch. The recommended log level is WARNING. Code is only added by merges from the maintenance branches.</li> <li>\"maintenance/a.b.x\" branches accumulate (cherry-picked) patches for a maintenance release (a.b.x). Recommended for   experienced users which deploy intelmq themselves. No new features will be added to these branches.</li> <li>\"develop\" is the development branch for the next stable release   (a.x). New features must go there. Developers may want to work on this branch. This branch also holds all patches from   maintenance releases if applicable. The recommended log level is DEBUG.</li> <li>Separate branches to develop features or bug fixes may be used by any contributor.</li> </ul>"},{"location":"dev/guidelines/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Make separate pull requests / branches on GitHub for changes. This allows us to discuss things via GitHub.</li> <li>We prefer one Pull Request per feature or change. If you have a bunch of small fixes, please don't create one PR per fix :)</li> <li>Only very small and changes (docs, ...) might be committed directly to development branches without Pull Request by the core-team.</li> <li>Keep the balance between atomic commits and keeping the amount of commits per PR small. You can use interactive   rebasing to squash multiple small commits into one (<code>rebase -i [base-branch]</code>). Only do rebasing if the code you are rebasing is yet not used by others or is already merged - because then others may need to run into conflicts.</li> <li>Make sure your PR is merge able in the develop branch and all tests are successful.</li> <li>If possible sign your commits with GPG.</li> </ul>"},{"location":"dev/guidelines/#workflow","title":"Workflow","text":"<p>We assume here, that origin is your own fork. We first add the upstream repository:</p> <pre><code> git remote add upstream https://github.com/certtools/intelmq.git\n</code></pre> <p>Syncing develop:</p> <pre><code> git checkout develop\n git pull upstream develop\n git push origin develop\n</code></pre> <p>You can do the same with the branches <code>master</code> and <code>maintenance</code>.</p> <p>Create a separate feature-branch to work on, sync develop with upstream. Create working branch from develop:</p> <pre><code> git checkout develop\n git checkout -b bugfix\n# your work\n git commit\n</code></pre> <p>Or, for bugfixes create a separate bugfix-branch to work on, sync maintenance with upstream. Create working branch from maintenance:</p> <pre><code>git checkout maintenance\ngit checkout -b new-feature\n# your work\ngit commit\n</code></pre> <p>Getting upstream's changes for master or any other branch:</p> <pre><code>git checkout develop\ngit pull upstream develop\ngit push origin develop\n</code></pre> <p>There are 2 possibilities to get upstream's commits into your branch. Rebasing and Merging. Using rebasing, your history is rewritten, putting your changes on top of all other commits. You can use this if your changes are not published yet (or only in your fork).</p> <pre><code>git checkout bugfix\ngit rebase develop\n</code></pre> <p>Using the <code>-i</code> flag for rebase enables interactive rebasing. You can then remove, reorder and squash commits, rewrite commit messages, beginning with the given branch, e.g. develop.</p> <p>Or using merging. This doesn't break the history. It's considered more , but also pollutes the history with merge commits.</p> <pre><code>git checkout bugfix\ngit merge develop\n</code></pre> <p>You can then create a PR with your branch <code>bugfix</code> to our upstream repository, using GitHub's web interface.</p>"},{"location":"dev/guidelines/#commit-messages","title":"Commit Messages","text":"<p>If it fixes an existing issue, please use GitHub syntax, e.g.: <code>fixes certtools/intelmq#&lt;IssueID&gt;</code></p>"},{"location":"dev/guidelines/#prepare-for-discussion-in-github","title":"Prepare for Discussion in GitHub","text":"<p>If we don't discuss it, it's probably not tested.</p>"},{"location":"dev/guidelines/#license-and-author-files","title":"License and Author files","text":"<p>License and Authors files can be found at the root of repository.</p> <ul> <li>License file MUST NOT be modified except by the explicit written permission by CNCS/CERT.PT or CERT.at</li> <li>Credit to the authors file must be always retained. When a new contributor (person and/or organization) improves in   some way the repository content (code or documentation), he or she might add his name to the list of contributors.</li> </ul> <p>License and authors must be only listed in an external file but not inside the code files.</p>"},{"location":"dev/intro/","title":"Intro","text":""},{"location":"dev/intro/#intro","title":"Intro","text":"<p>This guide is for developers of IntelMQ. It explains the code architecture, coding guidelines as well as ways you can contribute code or documentation. If you have not done so, please read the User Guide and the Administrator Guide first. Once you feel comfortable running IntelMQ with open source bots and you feel adventurous enough to contribute to the project, this guide is for you. It does not matter if you are an experienced Python programmer or just a beginner. There is a lot of examples to help you out.</p> <p>However, before we go into the details, it is important to observe and internalize some overall project goals.</p>"},{"location":"dev/intro/#goals","title":"Goals","text":"<p>It is important, that all developers agree and stick to these meta-guidelines. IntelMQ tries to:</p> <ul> <li>Be well tested. For developers this means, we expect you to write unit tests for bots. Every time.</li> <li>Reduce the complexity of system administration.</li> <li>Reduce the complexity of writing new bots for new data feeds.</li> <li>Make your code easily and pleasantly readable.</li> <li>Reduce the probability of events lost in all process with persistence functionality (even system crash).</li> <li>Strictly adhere to the existing format for keys and values in events.</li> <li>Always use JSON format for all messages internally.</li> <li>Help and support the interconnection between IntelMQ and existing tools like AbuseHelper, CIF, etc. or new tools (in other words: we will not accept data-silos!).</li> <li>Provide an easy way to store data into log collectors such as ElasticSearch or Splunk.</li> <li>Provide an easy way to create your own black-lists.</li> <li>Provide easy to understand interfaces with other systems via HTTP RESTFUL API.</li> </ul> <p>The main take away point from the list above is: things MUST stay intuitive and easy. How do you ultimately test if things are still easy? Let them new programmers test-drive your features and if it is not understandable in 15 minutes, go back to the drawing board.</p> <p>Similarly, if code does not get accepted upstream by the main developers, it is usually only because of the ease-of-use argument. Do not give up, go back to the drawing board, and re-submit again.</p>"},{"location":"dev/intro/#mailing-list","title":"Mailing list","text":"<p>There is a separate mailing list for developers to discuss development topics: The IntelMQ-DevArchive is public as well.</p>"},{"location":"dev/intro/#github","title":"GitHub","text":"<p>The ideal way to propose changes and additions to IntelMQ is to open a Pull Request on GitHub.</p>"},{"location":"dev/library/","title":"Use as Library","text":""},{"location":"dev/library/#running-intelmq-as-library","title":"Running IntelMQ as Library","text":""},{"location":"dev/library/#introduction","title":"Introduction","text":"<p>The feature is specified in IEP007.</p>"},{"location":"dev/library/#quickstart","title":"Quickstart","text":"<p>First, import the Python module and a helper. More about the <code>BotLibSettings</code> later.</p> <pre><code>from intelmq.lib.bot import BotLibSettings\nfrom intelmq.bots.experts.domain_suffix.expert import DomainSuffixExpertBot\n</code></pre> <p>Then we need to initialize the bot's instance. We pass two parameters:</p> <ul> <li><code>bot_id</code>: The id of the bot</li> <li><code>settings</code>: A Python dictionary of runtime configuration parameters, see <code>runtime-configuration</code>. The bot first loads the runtime configuration file if it exists. Then we update them with the <code>BotLibSettings</code> which are some accumulated settings disabling the logging to files and configure the pipeline so that we can send and receive messages directly to/from the bot. Last by not least, the actual bot parameters, taking the highest priority.</li> </ul> <pre><code>domain_suffix = DomainSuffixExpertBot('domain-suffix',  # bot id\nsettings=BotLibSettings | {\n'field': 'fqdn',\n'suffix_file': '/usr/share/publicsuffix/public_suffix_list.dat'}\n</code></pre> <p>As the bot is not fully initialized, we can process messages now. Inserting a message as dictionary: </p> <pre><code>queues = domain_suffix.process_message({'source.fqdn': 'www.example.com'})\n</code></pre> <p>The return value is a dictionary of queues, e.g. the output queue and the error queue. More details below.</p> <p>The methods accepts multiple messages as positional argument:</p> <pre><code>domain_suffix.process_message(\n    {'source.fqdn': 'www.example.com'},\n    {'source.fqdn': 'www.example.net'}\n)\ndomain_suffix.process_message(*[\n    {'source.fqdn': 'www.example.com'},\n    {'source.fqdn': 'www.example.net'}\n])\n</code></pre> <p>Select the output queue (as defined in <code>destination_queues</code>), first message, access the field <code>source.domain_suffix</code>: <pre><code>&gt;&gt;&gt; output['output'][0]['source.domain_suffix']\n'com'\n</code></pre></p>"},{"location":"dev/library/#configuration","title":"Configuration","text":"<p>Configuration files are not required to run IntelMQ as library. Contrary to IntelMQ normal behavior, if the files <code>runtime.yaml</code> and <code>harmonization.conf</code> do not exist, IntelMQ won't raise any errors. For the harmonization configuration, internal defaults are loaded.</p>"},{"location":"dev/release/","title":"Release","text":""},{"location":"dev/release/#release-procedure","title":"Release procedure","text":"<p>General assumption: You are working on branch maintenance, the next version is a bug fix release. For feature releases it is slightly different.</p>"},{"location":"dev/release/#check-before","title":"Check before","text":"<ul> <li>Make sure the current state is really final ;) You can test most of     the steps described here locally before doing it real.</li> <li>Check the upgrade functions in <code>intelmq/lib/upgrades.py</code>.</li> <li>Close the milestone on GitHub and move any open issues to the next     one.</li> <li><code>docs/admin/installation/linux-packages.md</code>: Update supported operating systems.</li> </ul>"},{"location":"dev/release/#documentation","title":"Documentation","text":"<p>These apply to all projects:</p> <ul> <li>CHANGELOG.MD and NEWS.MD: Update the latest header, fix the order, remove empty sections and (re)group the entries if necessary.</li> <li>debian/changelog: Insert a new section for the new version with the tool <code>dch</code> or update the version of the existing last item if yet unreleased. Don't forget the revision after the version number!</li> </ul>"},{"location":"dev/release/#intelmq","title":"IntelMQ","text":"<ul> <li><code>intelmq/version.py</code>: Update the version.</li> </ul> <p>Eventually adapt the default log levels if necessary. Should be INFO for stable releases.</p>"},{"location":"dev/release/#intelmq-api","title":"IntelMQ API","text":"<ul> <li><code>intelmq_api/version.py</code>: Update the version.</li> </ul>"},{"location":"dev/release/#intelmq-manager","title":"IntelMQ Manager","text":"<ul> <li><code>intelmq_manager/version.py</code>: Update the version.</li> <li><code>intelmq_manager/static/js/about.js</code>: Update the version.</li> </ul>"},{"location":"dev/release/#commit-push-review-and-merge","title":"Commit, push, review and merge","text":"<p>Commit your changes in a separate branch, the final commit message should start with <code>REL:</code>. Push and create a pull request to the <code>develop</code> branch. Someone else should review the changes. Eventually fix them, make sure the <code>REL:</code> is the last commit, you can also push that one at last, after the reviews.</p> <p>Why a separate branch? Because if problems show up, you can still force-push to that one, keeping the release commit the latest one.</p>"},{"location":"dev/release/#tag-and-release","title":"Tag and release","text":"<p>Tag the commit with <code>git tag -s version HEAD</code>, merge it into <code>develop</code>, push the branches and the tag. The tag is just <code>a.b.c</code>, not prefixed with <code>v</code> (that was necessary only with SVN a long time ago...).</p> <p>Go to https://github.com/certtools/intelmq/tags and enter the release notes (from the CHANGELOG) for the new tag, then it's considered a release by GitHub.</p>"},{"location":"dev/release/#tarballs-and-pypi","title":"Tarballs and PyPI","text":"<ul> <li>Build the source and binary (wheel) distribution:</li> </ul> <pre><code>rm -r build/\npython3 setup.py sdist bdist_wheel\n</code></pre> <ul> <li>Upload the files including signatures to PyPI with e.g. twine: <code>twine upload -u __token__ -p $APITOKEN dist/intelmq...</code> (or set the API Token in <code>.pypirc</code>).</li> </ul>"},{"location":"dev/release/#documentation_1","title":"Documentation","text":"<p>Since using mkdocs (see https://docs.intelmq.org) nothing needs to be done anymore.</p>"},{"location":"dev/release/#packages","title":"Packages","text":"<p>We are currently using the public Open Build Service instance of openSUSE: http://build.opensuse.org/project/show/home:sebix:intelmq</p> <p>First, test all the steps first with the unstable-repository and check that at least installations succeed.</p> <ul> <li>Create the tarballs with the script <code>create-archives.sh</code>.</li> <li>Update the dsc and spec files for new filenames and versions.</li> <li>Update the .changes file</li> <li>Build locally for all distributions.</li> <li>Commit.</li> </ul>"},{"location":"dev/release/#docker-image","title":"Docker Image","text":"<p>Releasing a new Docker image is very easy.</p> <ul> <li>Clone IntelMQ Docker Repository with <code>git clone https://github.com/certat/intelmq-docker.git --recursive</code> as this repository contains submodules</li> <li>If the <code>intelmq-docker</code> repository is not updated yet, use <code>git pull --recurse-submodules</code> to pull the latest changes from their respective repository.</li> <li>Run <code>./build.sh</code>, check your console if the build was successful.</li> <li>Run <code>./test.sh</code> - It will run nosetests3 with the exotic flag. All     errors/warnings will be displayed.</li> <li>Change the <code>build_version</code> in <code>publish.sh</code> to the new version you     want to release.</li> <li>Change the <code>namespace</code> variable in <code>publish.sh</code>.</li> <li>If no error/warning was shown, you can release with <code>./publish.sh</code>.</li> <li>Update the DockerHub ReadMe and add the latest version.</li> <li>Commit and push the updates to the <code>intelmq-docker</code> repository</li> </ul>"},{"location":"dev/release/#announcements","title":"Announcements","text":"<p>Announce the new version at the mailinglists intelmq-users, intelmq-dev. For bigger releases, probably also at IHAP, Twitter, etc. Ask your favorite social media consultant.</p>"},{"location":"dev/release/#prepare-new-version","title":"Prepare new version","text":"<p>Increase the version in <code>intelmq/version.py</code> and declare it as alpha version. Add the new version in <code>intelmq/lib/upgrades.py</code>. Add a new entry in <code>debian/changelog</code> with <code>dch -v [version] -c debian/changelog</code>.</p> <p>Add new entries to <code>CHANGELOG.md</code> and <code>NEWS.md</code>.</p>"},{"location":"dev/release/#intelmq_1","title":"IntelMQ","text":"<p>For <code>CHANGELOG.md</code>:</p> <pre><code>### Configuration\n\n### Core\n\n### Development\n\n### Data Format\n\n### Bots\n#### Collectors\n\n#### Parsers\n\n#### Experts\n\n#### Outputs\n\n### Documentation\n\n### Packaging\n\n### Tests\n\n### Tools\n\n### Contrib\n\n### Known issues\n</code></pre> <p>And for <code>NEWS.md</code>:</p> <pre><code>### Requirements\n\n### Tools\n\n### Data Format\n\n### Configuration\n\n### Libraries\n\n### Postgres databases\n</code></pre>"},{"location":"dev/release/#intelmq-api_1","title":"IntelMQ API","text":"<p>An empty section of <code>CHANGELOG.rst</code>.</p>"},{"location":"dev/release/#intelmq-manager_1","title":"IntelMQ Manager","text":"<p>For <code>CHANGELOG.md</code>:</p> <pre><code>### Pages\n\n#### Landing page\n\n#### Configuration\n\n#### Management\n\n#### Monitor\n\n#### Check\n\n### Documentation\n\n### Third-party libraries\n\n### Packaging\n\n### Known issues\n</code></pre> <p>And an empty section in the <code>NEWS.md</code> file.</p>"},{"location":"dev/structure/","title":"Structure","text":""},{"location":"dev/structure/#system-overview","title":"System Overview","text":"<p>In the <code>intelmq/lib/</code> directory you can find some libraries:</p> <ul> <li>Bots: Defines base structure for bots and handling of startup, stop,     messages etc.</li> <li>Cache: For some expert bots it does make sense to cache external     lookup results. Redis is used here.</li> <li>Harmonization: For defined types, checks and sanitation methods are     implemented.</li> <li>Message: Defines Events and Reports classes, uses harmonization to     check validity of keys and values according to config.</li> <li>Pipeline: Writes messages to message queues. Implemented for     productions use is only Redis, AMQP is beta.</li> <li>Test: Base class for bot tests with predefined test and assert     methods.</li> <li>Utils: Utility functions used by system components.</li> </ul>"},{"location":"dev/structure/#code-architecture","title":"Code Architecture","text":""},{"location":"dev/testing/","title":"Testing","text":""},{"location":"dev/testing/#testing","title":"Testing","text":""},{"location":"dev/testing/#additional-test-requirements","title":"Additional test requirements","text":"<p>Libraries required for tests are listed in the <code>setup.py</code> file. You can install them with pip:</p> <pre><code>pip3 install -e .[development]\n</code></pre> <p>or the package management of your operating system.</p>"},{"location":"dev/testing/#run-the-tests","title":"Run the tests","text":"<p>All changes have to be tested and new contributions should be accompanied by according unit tests. Please do not run the tests as root just like any other IntelMQ component for security reasons. Any other unprivileged user is possible.</p> <p>You can run the tests by changing to the directory with IntelMQ repository and running either <code>unittest</code> or <code>pytest</code>. For virtual environment installation, please activate it and omit the <code>sudo -u</code> from examples below:</p> <pre><code>cd $INTELMQ_REPO\nsudo -u intelmq python3 -m unittest {discover|filename}  # or\nsudo -u intelmq pytest [filename]\nsudo -u intelmq python3 setup.py test  # uses a build environment (no external dependencies)\n</code></pre> <p>Some bots need local databases to succeed. If you only want to test one explicit test file, give the file path as argument.</p> <p>There are multiple GitHub Action Workflows setup for automatic testing, which are triggered on pull requests. You can also easily activate them for your forks.</p>"},{"location":"dev/testing/#environment-variables","title":"Environment variables","text":"<p>There are a bunch of environment variables which switch on/off some tests:</p> Environment\u00a0Variable\u00a0Name Description <code>INTELMQ_TEST_DATABASES</code> databases such as postgres, elasticsearch, mongodb are not tested by default. Set this environment variable to 1 to test those bots. These tests need preparation, e.g. running databases with users and certain passwords etc. Have a look at the <code>.github/workflows/unittests.yml</code> and the corresponding <code>.github/workflows/scripts/setup-full.sh</code> in IntelMQ's repository for steps to set databases up. <code>INTELMQ_SKIP_INTERNET</code> tests requiring internet connection will be skipped if this is set to 1. <code>INTELMQ_SKIP_REDIS</code> redis-related tests are ran by default, set this to 1 to skip those. <code>INTELMQ_TEST_EXOTIC</code> some bots and tests require libraries which may not be available, those are skipped by default. To run them, set this to 1. <code>INTELMQ_TEST_REDIS_PASSWORD</code> Set this value to the password for the local redis database if needed. <code>INTELMQ_LOOKYLOO_TEST</code> Set this value to run the lookyloo tests. Public lookyloo instance will be used as default. <code>INTELMQ_TEST_INSTALLATION</code> Set this value to run tests which require a local IntelMQ installation, such as for testing the command lines tools relying on configuration files, dump files etc. <p>For example, to run all tests you can use:</p> <pre><code>INTELMQ_TEST_DATABASES=1 INTELMQ_TEST_EXOTIC=1 pytest intelmq/tests/\n</code></pre>"},{"location":"dev/testing/#configuration-test-files","title":"Configuration test files","text":"<p>The tests use the configuration files in your working directory, not those installed in <code>/opt/intelmq/etc/</code> or <code>/etc/</code>. You can run the tests for a locally changed intelmq without affecting an installation or requiring root to run them.</p>"},{"location":"tutorials/intelmq-manager/","title":"Using IntelMQ Manager","text":""},{"location":"tutorials/intelmq-manager/#tutorial-on-using-intelmq-manager","title":"Tutorial on using IntelMQ Manager","text":"<p>Bug</p> <p>This section of the documentation is currently incomplete and will be updated later.</p>"},{"location":"unsorted/botnet-concept/","title":"Botnet concept","text":""},{"location":"unsorted/botnet-concept/#botnet-concept","title":"Botnet Concept","text":"<p>The \\\"botnet\\\" represents all currently configured bots which are explicitly enabled. It is, in essence, the graph of the bots which are connected together via their input source queues and destination queues.</p> <p>To get an overview which bots are running, use <code>intelmqctl status</code> or use the IntelMQ Manager. Set <code>\"enabled\": true</code> in the runtime configuration to add a bot to the botnet. By default, bots will be configured as <code>\"enabled\": true</code>. See <code>bots</code>{.interpreted-text role=\"doc\"} for more details on configuration.</p> <p>Disabled bots can still be started explicitly using <code>intelmqctl start &lt;bot_id&gt;</code>, but will remain in the state <code>disabled</code> if stopped (and not be implicitly enabled by the <code>start</code> command). They are not started by <code>intelmqctl start</code> in analogy to the behavior of widely used initialization systems.</p>"},{"location":"unsorted/intelmq-3.0-architecture/","title":"Intelmq 3.0 architecture","text":""},{"location":"unsorted/intelmq-3.0-architecture/#idea-list-and-architecture-of-intelmq-30","title":"Idea list and architecture of IntelMQ 3.0","text":"<p>Authors: Aaron Kaplan kaplan@cert.at, Sebastian Wagner wagner@cert.at</p>"},{"location":"unsorted/intelmq-3.0-architecture/#use-cases","title":"Use-cases","text":"<p>XXX fill in a complete list of use cases XXX</p>"},{"location":"unsorted/intelmq-3.0-architecture/#certs","title":"CERTs","text":"<p>No direct access to networks in constituency.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#data-collection","title":"Data collection","text":""},{"location":"unsorted/intelmq-3.0-architecture/#distribution-of-information","title":"Distribution of information","text":""},{"location":"unsorted/intelmq-3.0-architecture/#national-cert","title":"National CERT","text":"<p>Work is based heavily on Geolocation</p>"},{"location":"unsorted/intelmq-3.0-architecture/#sector-cert","title":"Sector CERT","text":"<p>Work is based on known constituents, sector information, lists of IP address ranges and domains, company &amp; organisation names.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#socs-and-nocs","title":"SOCs and NOCs","text":"<p>Goal is the protection of internal known networks only. Direct access to the networks.</p> <p>Involves collecting information from internal infrastructure, matching IoCs to internal infrastructure, using IoCs for active protection.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#data-science-and-research","title":"Data science and research","text":""},{"location":"unsorted/intelmq-3.0-architecture/#users","title":"Users","text":"<p>XXX fill in a complete list of use cases XXX</p>"},{"location":"unsorted/intelmq-3.0-architecture/#restful-api","title":"RESTful API","text":"<p>For automation purposes, we will need a typical RESTful API to manage, control, monitor the IntelMQ \"botnet\" and read and set configs. See #1424</p>"},{"location":"unsorted/intelmq-3.0-architecture/#ux","title":"UX","text":""},{"location":"unsorted/intelmq-3.0-architecture/#devops-sysadmin-perspective","title":"Devops/ Sysadmin perspective","text":""},{"location":"unsorted/intelmq-3.0-architecture/#docker","title":"Docker","text":"<p>Task: create a setup where each bot MAY run in a docker container</p> <p>Background: It might make sense to  be able to run each bot in a docker container since it fits with a lot of new paradigms in orchestration. With a proper template, each bot running in a docker container could send its logs to some central logger (for example splunk or similar) and  the sysadmin/devops teams which are already using these systems for monitoring alerts can properly fit the IntelMQ logs and alerts to their regular daily routine. Docker also allows the sysadmin/devops folks to centrally manage the system.</p> <p>Think about: how do we integrate the pipeline graph?</p> <p>Category: this feature should be OPTIONAL.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#tutorials-and-vms-dockers","title":"Tutorials and VMs / dockers","text":"<p>Task: create tutorials with VMs/docker images.</p> <p>Background: We are missing good tutorials (\"playbooks\") on how to run certain workflows via IntelMQ. Ideally, we would offer ready-made VMs/docker images where people who want to  try out IntelMQ (and consequently adapt the setup to their own needs). This also helps teachers/presenters who want to demo IntelMQ.</p> <p>Specifically we would like to have:   * how to process shadowserver feeds   * how to process shodan data   * how to process n6 data</p> <p>Think about: shadowserver already created some training material. Build on this.</p> <p>Category: OPTIONAL component, but highly needed.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#architecture","title":"Architecture","text":""},{"location":"unsorted/intelmq-3.0-architecture/#message-queue","title":"Message queue","text":"<p>Task: Create a Kafka MQ backend: add Kafka as a replaceable MQ for IntelMQ 3.0</p> <p>Background: IntelMQ 2.0 supports AMQP (RabbitMQ) next to redis as a message queue. Many organisations use Kafka internally. Support connecting to their other work flows.</p> <p>Think about: Using Apache Pulsar</p> <p>Category: SHOULD</p>"},{"location":"unsorted/intelmq-3.0-architecture/#notification-settings","title":"Notification settings","text":"<p>Task: Keep notification settings per event: Where to (destination mail/host address), how (protocol, authentication (SSL client certificate), etc), how often/time information (intervals etc.)</p> <p>Background: CERTs (and potentially other groups of users) need to specify where the events should be sent to, how often etc. Currently only destination email addresses can be saved (<code>source.abuse_contact</code>), which is not enough for most use-cases. There exist some custom solutions (e.g. <code>notify</code> boolean at cert.at (to be changed), <code>extra.processing</code> dictionary at BSI), but no least common denominator.</p> <p>See also https://github.com/certtools/intelmq/issues/758</p> <p>Category: this feature should be OPTIONAL but is NEEDED by several users.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#configuration-parameter-handling-in-bots-and-a-bots-unified-documentation","title":"Configuration parameter handling in Bots and a bot's unified documentation","text":"<p>Task: Handle bots' configuration parameters by the core, providing type sanitation, checks, default values and documentation.</p> <p>Background: Currently every bot needs to handle these issues itself, but many of these checks could be done centrally in a generic way. At upgrades, new configuration might get introduced and the bots need to provide defaults values although they are available in BOTS. Error handling on parameters must be done for every bot on itself. Documentation is not available to the Bots, not available in BOTS and the Manager. There are 3 places for parameters where the available information is spread: BOTS, <code>Bots.md</code> and the bots' code.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#automatic-monitoring-management-handling-full-load-situations","title":"Automatic Monitoring &amp; Management: Handling full load situations","text":"<p>Task: Create a solution to prevent system over-loading (only for Redis).</p> <p>Background: If too much data is ingested, collected or enriched, the system can easily run out of memory. This quickly causes major operation troubles and data loss, needing manual intervention.</p> <p>See also: https://github.com/certtools/intelmq/issues/709</p>"},{"location":"unsorted/intelmq-3.0-architecture/#making-intelmq-plug-able-and-getting-rid-of-bots","title":"Making intelmq plug-able and getting rid of BOTS","text":"<p>Task: Allow installation of IntelMQ bots, meaning the deprecation of the centralized BOTS file and a generated documentation.</p> <p>Background: Adapting IntelMQ to specific needs also means the development of specific bots which might not part of the public repository. Adding them to an existing IntelMQ installation is currently only possible by cloning the repository and adding the code there, not by just providing/installing the required code (because of BOTS and central documentation).</p> <p>See also https://github.com/certtools/intelmq/issues/972</p>"},{"location":"unsorted/intelmq-3.0-architecture/#exposing-a-plug-in-or-hooking-api","title":"Exposing a plug-in or hooking API","text":"<p>Task: Provide an hooking API for the core classes.</p> <p>Background: Adapting IntelMQ to specific can require adaptions in the Core classes' code. Instead of making the changes/extensions in the core itself, we can provide a hook system allowing to call (or replace?) functions at specific steps. For example custom monitoring.</p>"},{"location":"unsorted/intelmq-3.0-architecture/#grouping-of-events","title":"Grouping of events","text":"<p>Task: Provide possibilities to assign an event to a group of events.</p> <p>Background: Several IoCs part of one MISP Event. Grouping of similar events to one group for outputs (e.g. one CSV file per Network).</p> <p>See also: https://github.com/certtools/intelmq/issues/751</p>"},{"location":"unsorted/intelmq-3.0-architecture/#data-format-multiple-values","title":"Data Format: Multiple values","text":"<p>Task: Allow multiple values for (some) fields in the data format.</p> <p>Background: In some cases one value per field is not enough, for example for Domain -&gt; IP address lookups. Other formats like IDEA and n6 support this.</p> <p>See also: https://github.com/certtools/intelmq/issues/543 https://github.com/certtools/intelmq/issues/373</p>"},{"location":"unsorted/intelmqctl-more/","title":"Intelmqctl more","text":""},{"location":"unsorted/intelmqctl-more/#command-line-interface-intelmqctl","title":"Command-line interface: intelmqctl","text":"<p>Syntax see <code>intelmqctl -h</code></p> <ul> <li>Starting a bot: <code>intelmqctl start bot-id</code></li> <li>Stopping a bot: <code>intelmqctl stop bot-id</code></li> <li>Reloading a bot: <code>intelmqctl reload bot-id</code></li> <li>Restarting a bot: <code>intelmqctl restart bot-id</code></li> <li>Get status of a bot: <code>intelmqctl status bot-id</code></li> <li>Run a bot directly for debugging purpose and temporarily leverage the logging level to DEBUG: <code>intelmqctl run bot-id</code></li> <li>Get a pdb (or ipdb if installed) live console.   <code>intelmqctl run bot-id console</code></li> <li>See the message that waits in the input queue.   <code>intelmqctl run bot-id message get</code></li> <li>See additional help for further explanation.   <code>intelmqctl run bot-id --help</code></li> <li>Starting the botnet (all bots): <code>intelmqctl start</code></li> <li>Starting a group of bots: <code>intelmqctl start --group experts</code></li> <li>Get a list of all configured bots: <code>intelmqctl list bots</code></li> <li>Get a list of all queues: <code>intelmqctl list queues</code> If -q is given, only queues with more than one item are listed.</li> <li>Get a list of all queues and status of the bots:   <code>intelmqctl list queues-and-status</code></li> <li>Clear a queue: <code>intelmqctl clear queue-id</code></li> <li>Get logs of a bot: <code>intelmqctl log bot-id number-of-lines log-level</code>   Reads the last lines from bot log. Log level should be one of DEBUG, INFO, ERROR or CRITICAL. Default is INFO. Number   of lines defaults to 10, -1 gives all. Result can be longer due to our logging format!</li> <li>Upgrade from a previous version: <code>intelmqctl upgrade-config</code> Make a backup of your configuration first, also including   bot's configuration files.</li> </ul>"},{"location":"unsorted/intelmqctl-more/#reloading","title":"Reloading","text":"<p>Whilst restart is a mere stop &amp; start, performing <code>intelmqctl reload &lt;bot_id&gt;</code> will not stop the bot, permitting it to keep the state: the same common behavior as for ( Linux) daemons. It will initialize again (including reading all configuration again) after the current action is finished. Also, the rate limit/sleep is continued (with the new time) and not interrupted like with the restart command. So if you have a collector with a rate limit of 24 h, the reload does not trigger a new fetching of the source at the time of the reload, but just 24 h after the last run -- with the new configuration. Which state the bots are keeping depends on the bots of course.</p>"},{"location":"unsorted/intelmqctl-more/#forcing-reset-pipeline-and-cache-be-careful","title":"Forcing reset pipeline and cache (be careful)","text":"<p>If you are using the default broker (Redis), in some test situations you may need to quickly clear all pipelines and caches. Use the following procedure:</p> <pre><code>redis-cli FLUSHDB\nredis-cli FLUSHALL\n</code></pre>"},{"location":"unsorted/intelmqctl-more/#management","title":"Management","text":"<p>IntelMQ has a modular structure consisting of bots. There are four types of bots:</p> <ul> <li><code>collector bots</code> retrieve data from internal or external sources, the output are *   reports* consisting of many individual data sets / log lines.</li> <li><code>parser bots</code> parse the (report) data by splitting it into individual events (log lines) and giving them a defined   structure, see also <code>/dev/data-format</code> for the list of fields an event may be split up into.</li> <li><code>expert bots</code> enrich the existing events by e.g. lookup up information such as DNS reverse records, geographic   location information (country code) or abuse contacts for an IP address or domain name.</li> <li><code>output bots</code> write events to files, databases, (REST)-APIs or any other data sink that you might want to write to.</li> </ul> <p>Each bot has one source queue (except collectors) and can have multiple destination queues (except outputs). But multiple bots can write to the same pipeline (queue), resulting in multiple inputs for the next bot.</p> <p>Every bot runs in a separate process. A bot is identifiable by a bot id.</p> <p>Currently only one instance (i.e. with the same bot id) of a bot can run at the same time. Concepts for multiprocessing are being discussed, see this issue: <code>Multiprocessing per queue is not supported #186 &lt;186&gt;</code>. Currently you can run multiple processes of the same bot ( with different bot ids) in parallel.</p> <p>Example: multiple gethostbyname bots (with different bot ids) may run in parallel, with the same input queue and sending to the same output queue. Note that the bot providing the input queue must have the <code>load_balance</code> option set to <code>true</code>.</p>"},{"location":"user/abuse-contacts/","title":"Abuse Contacts","text":""},{"location":"user/abuse-contacts/#abuse-contact-look-ups","title":"Abuse-contact look-ups","text":"<p>The right decision whom to contact about a specific incident is vital to get the incident resolved as quick as possible. Different types of events may required different abuse-contact to be selected. For example, issues about a device, e.g. a vulnerability in the operating system or an application, is better sent to the hoster which can inform the server administrator. For website-related issues, like defacements or phishing, the domain owner (maintaining the content of the website) could be the better and more direct contact. Additionally, different CERT's have different approaches and different contact databases. Multiple information sources have different information, and some sources are more accurate than others. IntelMQ can query multiple sources of abuse-contacts and combine them. Internal databases, like a Constituency Portal provide high-quality and first-hand contact information. The RIPE document Sources of Abuse Contact Information for Abuse Handlers contains a good summary of the complex of themes.</p>"},{"location":"user/abuse-contacts/#sources-for-abuse-contacts","title":"Sources for abuse-contacts","text":"<p>All these bots add the queried contacts to the IntelMQ events in the field <code>source.abuse_contact</code> if not state otherwise in the documentation.</p>"},{"location":"user/abuse-contacts/#sources-for-domain-based-abuse-contacts","title":"Sources for domain-based abuse-contacts","text":"<p>These bots are suitable for domain-based abuse-contact look-ups.</p> <ul> <li><code>intelmq.bots.experts.rdap.expert</code> expert queries private and public RDAP servers for <code>source.fqdn</code> and add the contact information to the event as <code>source.abuse_contact</code>.</li> <li><code>intelmq.bots.experts.trusted_introducer_lookup.expert</code> expert queries a locally cached Trusted Introducer team directory for the TLD or domain (first match) of <code>source.fqdn</code>.</li> </ul>"},{"location":"user/abuse-contacts/#sources-for-ip-address-based-abuse-contacts","title":"Sources for IP address-based abuse-contacts","text":"<p>These bots are suitable for IP address and ASN based abuse-contact look-ups.</p> <ul> <li><code>intelmq.bots.experts.abusix.expert</code> expert queries the online Abusix service.</li> <li><code>intelmq.bots.experts.do_portal.expert</code> expert queries an instance of the do-portal software (deprecated).</li> <li><code>intelmq.bots.experts.tuency.expert</code> expert queries an instance of the tuency Constituency Portal for the IP address. The Portal also takes into account any notification rules, which are saved   additionally in the event.</li> <li><code>intelmq.bots.experts.ripe.expert</code> expert queries the online RIPE database for IP-Address and AS contacts.</li> <li><code>intelmq.bots.experts.trusted_introducer_lookup.expert</code> expert queries a locally   cached Trusted Introducer team directory   for the Autonomous system <code>source.asn</code>.</li> </ul>"},{"location":"user/abuse-contacts/#generic-sources-for-abuse-contacts","title":"Generic sources for abuse-contacts","text":"<ul> <li><code>intelmq.bots.experts.generic_db_lookup.expert</code> expert for local data sources, like   database tables mapping ASNs to abuse-contact or Country Codes to abuse-contact.</li> <li><code>intelmq.bots.experts.uwhoisd.expert</code> expert for fetching whois-data, not extracting   abuse-contact information</li> </ul>"},{"location":"user/abuse-contacts/#helpful-other-bots-for-pre-processing","title":"Helpful other bots for pre-processing","text":"<ul> <li><code>intelmq.bots.experts.asn_lookup.expert</code> queries locally cached database to lookup ASN.</li> <li><code>intelmq.bots.experts.cymru_whois.expert</code> to lookup ASN, Geolocation, and BGP prefix   for <code>*.ip</code>.</li> <li><code>intelmq.bots.experts.domain_suffix.expert</code> to lookup the public suffix of the domain   in <code>*.fqdn</code>.</li> <li><code>intelmq.bots.experts.format_field.expert</code></li> <li><code>intelmq.bots.experts.gethostbyname.expert</code> resolve <code>*.ip</code> from <code>*.fqdn</code>.</li> <li><code>intelmq.bots.experts.maxmind_geoip.expert</code> to lookup Geolocation information for <code>*.ip</code>   .</li> <li><code>intelmq.bots.experts.reverse_dns.expert</code> to resolve <code>*.reverse_dns</code> from <code>*.ip</code>.</li> <li><code>intelmq.bots.experts.ripe.expert</code> to lookup <code>*.asn</code> and Geolocation information   for <code>*.ip</code>.</li> <li><code>intelmq.bots.experts.tor_nodes.expert</code> for filtering out TOR nodes.</li> <li><code>intelmq.bots.experts.url2fqdn.expert</code> to extract <code>*.fqdn</code>/<code>*.ip</code> from <code>*.url</code>.</li> </ul>"},{"location":"user/abuse-contacts/#combining-the-lookup-approaches","title":"Combining the lookup approaches","text":"<p>In order to get the best contact, it may be necessary to combine multiple abuse-contact sources. IntelMQ's modularity provides methods to arrange and configure the bots as needed. Among others, the following bots can help in getting the best result:</p> <ul> <li><code>intelmq.bots.experts.filter.expert</code> Your lookup process may be different for different types of data. E.g. website-related issues may be better addressed at the domain owner and device-related issues may be better addressed to the hosting provider.</li> <li><code>intelmq.bots.experts.modify.expert</code> Allows you to set values based on filter and also format values based on the value of other fields.</li> <li><code>intelmq.bots.experts.sieve.expert</code> Very powerful expert which allows filtering, routing (to different subsequent bots) based on if-expressions . It support set-operations (field value is in list) as well as sub-network operations for IP address networks in CIDR notation for the expression-part. You can as well set the abuse-contact directly.</li> </ul>"},{"location":"user/api/","title":"API","text":""},{"location":"user/api/#using-intelmq-api","title":"Using IntelMQ API","text":"<p>Bug</p> <p>This section of the documentation is currently incomplete and will be added later.</p>"},{"location":"user/api/#usage-from-programs","title":"Usage from programs","text":"<p>The IntelMQ API can also be used from programs, not just browsers. To do so, first send a POST-Request with JSON-formatted data to http://localhost/intelmq/v1/api/login/</p> <pre><code>{\n    \"username\": \"$your_username\",\n    \"password\": \"$your_password\"\n}\n</code></pre> <p>With valid credentials, the JSON-formatted response contains the <code>login_token</code>. This token can be used like an API key in the Authorization header for the next API calls:</p> <pre><code>Authorization: $login_token\n</code></pre> <p>Here is a full example using curl:</p> <ol> <li> <p>Authentication step:    <pre><code>curl --location --request POST \"http://localhost/intelmq/v1/api/login/\" \\\n     --header \"Content-Type: application/x-www-form-urlencoded\" \\\n     --data-urlencode \"username=$username\"\\\n     --data-urlencode \"password=$password\"\n</code></pre> <pre><code>{\"login_token\":\"68b329da9893e34099c7d8ad5cb9c940\",\"username\":\"$username\"}\n</code></pre></p> </li> <li> <p>Using the login token to fetch data:    <pre><code>curl --location \"http://localhost/intelmq/v1/api/version\" \\\n     --header \"Authorization: 68b329da9893e34099c7d8ad5cb9c940\"\n</code></pre> <pre><code>{\"intelmq\":\"3.0.0rc1\",\"intelmq-manager\":\"2.3.1\"}\n</code></pre></p> </li> </ol> <p>The same approach also works for Ansible, as you can see here:</p> <ol> <li>https://github.com/schacht-certat/intelmq-vagrant/blob/7082719609c0aafc9324942a8775cf2f8813703d/ansible/tasks/api/00_registerauth.yml#L1-L9</li> <li>https://github.com/schacht-certat/intelmq-vagrant/blob/7082719609c0aafc9324942a8775cf2f8813703d/ansible/tasks/api/02_queuestatus.yml#L1-L5</li> </ol>"},{"location":"user/bots/","title":"Bots","text":""},{"location":"user/bots/#bots-inventory","title":"Bots Inventory","text":"<p>This document contains complete reference of bots implemented by IntelMQ and how to configure them from the users perspective (meaning via IntelMQ Manager). Some of the bots are intended for general use and some of them are for processing particular data sources.</p>"},{"location":"user/bots/#individual-bot-configuration","title":"Individual Bot Configuration","text":"<p>Each bot has it's own configuration. The configuration consists of two types of parameters:</p> <ul> <li> <p>Generic parameters that are common to all the bots and need to be set for each bot.</p> </li> <li> <p>Runtime parameters are needed by the bot itself during runtime. Some of these parameters can be inherited from the global configuration (which is applied to all the bots), but can be overridden in the individual bot configuration.</p> </li> </ul>"},{"location":"user/bots/#generic-parameters","title":"Generic Parameters","text":"<p>These parameters must be set for each bot (at least the required ones).</p>"},{"location":"user/bots/#id","title":"<code>id</code>","text":"<p>(required, string) This must be a unique identifier. Commonly it looks something like this: <code>abusech-feodo-tracker-collector</code>. It is safer to avoid using spaces.</p>"},{"location":"user/bots/#name","title":"<code>name</code>","text":"<p>(required, string) Human readable name of the bot.</p>"},{"location":"user/bots/#description","title":"<code>description</code>","text":"<p>(required, string) The description of the bot.</p>"},{"location":"user/bots/#module","title":"<code>module</code>","text":"<p>(required, string) The executable (should be in <code>PATH</code> environment variable) which will be started.</p>"},{"location":"user/bots/#group","title":"<code>group</code>","text":"<p>(optional, string) The group of the bot. Can be <code>Collector</code>, <code>Parser</code>, <code>Expert</code> or <code>Output</code>. Only used for visualization by other tools.</p>"},{"location":"user/bots/#enabled","title":"<code>enabled</code>","text":"<p>(optional, boolean) Whether the bot will start when the whole botnet is started. You can still start a disabled bot explicitly. Defaults to <code>true</code>.</p>"},{"location":"user/bots/#run_mode","title":"<code>run_mode</code>","text":"<p>(optional, string) There are two run modes, <code>continuous</code> or <code>scheduled</code>. In the first case, the bot will be running forever until stopped or exits because of errors (depending on the configuration). In the latter case, the bot will stop after one successful run. This is especially useful when scheduling bots via cron or systemd. Check Configuration section for more details. Defaults to <code>continuous</code>.</p>"},{"location":"user/bots/#http-parameters","title":"HTTP Parameters","text":"<p>Common HTTP runtime parameters used in multiple bots.</p>"},{"location":"user/bots/#http_timeout_sec","title":"<code>http_timeout_sec</code>","text":"<p>(optional, float) A tuple of floats or only one float describing the timeout (seconds) of the HTTP connection. Can be a tuple of two floats (read and connect timeout) or just one float (applies for both timeouts). See also https://requests.readthedocs.io/en/master/user/advanced/#timeouts. Defaults to 30.</p>"},{"location":"user/bots/#http_timeout_max_tries","title":"<code>http_timeout_max_tries</code>","text":"<p>(optional, integer) An integer depicting how many times a connection is retried, when a timeout occurred. Defaults to 3.</p>"},{"location":"user/bots/#http_username","title":"<code>http_username</code>","text":"<p>(optional, string) Username for basic HTTP authentication.</p>"},{"location":"user/bots/#http_password","title":"<code>http_password</code>","text":"<p>(optional, string) Password for basic HTTP authentication.</p>"},{"location":"user/bots/#http_proxy","title":"<code>http_proxy</code>","text":"<p>(optional, string) Proxy to use for HTTP.</p>"},{"location":"user/bots/#https_proxy","title":"<code>https_proxy</code>","text":"<p>(optional, string) Proxy to use for HTTPS.</p>"},{"location":"user/bots/#http_user_agent","title":"<code>http_user_agent</code>","text":"<p>(optional, string) User-Agent to be used for HTTP requests.</p>"},{"location":"user/bots/#http_verify_cert","title":"<code>http_verify_cert</code>","text":"<p>(optional, boolean/string) Path to trusted CA bundle or directory, <code>false</code> to ignore verifying SSL certificates, or <code>true</code> to verify SSL certificates. Defaults to <code>true</code>.</p>"},{"location":"user/bots/#ssl_client_certificate","title":"<code>ssl_client_certificate</code>","text":"<p>(optional, string) Path to client certificate to use for TLS connections.</p>"},{"location":"user/bots/#ssl_ca_certificate","title":"<code>ssl_ca_certificate</code>","text":"<p>(optional, string) Path to trusted CA certificate. Only used by some bots.</p>"},{"location":"user/bots/#cache-parameters","title":"Cache Parameters","text":"<p>Common Redis cache runtime parameters used in multiple bots (mainly lookup experts).</p>"},{"location":"user/bots/#redis_cache_host","title":"<code>redis_cache_host</code>","text":"<p>(required, string) Hostname of the Redis database.</p>"},{"location":"user/bots/#redis_cache_port","title":"<code>redis_cache_port</code>","text":"<p>(required, string) Port of the Redis database.</p>"},{"location":"user/bots/#redis_cache_db","title":"<code>redis_cache_db</code>","text":"<p>(required, integer) Database number.</p>"},{"location":"user/bots/#redis_cache_ttl","title":"<code>redis_cache_ttl</code>","text":"<p>(required, integer) TTL used for caching.</p>"},{"location":"user/bots/#redis_cache_password","title":"<code>redis_cache_password</code>","text":"<p>(optional, string) Password for the Redis database.</p>"},{"location":"user/bots/#collector-bots","title":"Collector Bots","text":"<p>Multihreading is disabled for all Collectors, as this would lead to duplicated data.</p>"},{"location":"user/bots/#feed-parameters","title":"Feed Parameters","text":"<p>These runtime parameters must be set for each collector bot (at least the required ones).</p>"},{"location":"user/bots/#name_1","title":"<code>name</code>","text":"<p>(required, string) Name of the feed (feed.name).</p>"},{"location":"user/bots/#accuracy","title":"<code>accuracy</code>","text":"<p>(optional, float) Accuracy of the data from the feed (feed.accuracy).</p>"},{"location":"user/bots/#code","title":"<code>code</code>","text":"<p>(optional, string) Code for the feed (feed.code).</p>"},{"location":"user/bots/#documentation","title":"<code>documentation</code>","text":"<p>(optional, string) Link to documentation for the feed (feed.documentation).</p>"},{"location":"user/bots/#provider","title":"<code>provider</code>","text":"<p>(optional, string) Name of the provider of the feed (feed.provider).</p>"},{"location":"user/bots/#rate_limit","title":"<code>rate_limit</code>","text":"<p>(optional, integer) Time interval (in seconds) between fetching data if applicable. Defaults to 0.</p>"},{"location":"user/bots/#alien-vault-otx","title":"Alien Vault OTX","text":"<p>Collects report messages from Alien Vault OTX.</p> <p>Module: <code>intelmq.bots.collectors.alienvault_otx.collector</code></p> <p>Requirements</p> <p>Install the library from GitHub, as there is no package in PyPi:</p> <pre><code>pip3 install -r intelmq/bots/collectors/alienvault_otx/REQUIREMENTS.txt\n</code></pre> <p>Parameters (also expects feed parameters):</p> <p><code>api_key</code></p> <p>(required, string) API Key</p> <p><code>modified_pulses_only</code></p> <p>(optional, boolean) Whether to get only modified pulses instead of all. Defaults to false.</p> <p><code>interval</code></p> <p>(optional, integer) When <code>modified_pulses_only</code> is set, define the time in hours (integer value) to get modified pulses since then. Defaults to 24 (hours).</p>"},{"location":"user/bots/#amqp","title":"AMQP","text":"<p>This bot collects data from (remote) AMQP servers, for both IntelMQ as well as external data. Currently only fetching from a queue is supported can be extended in the future. Messages will be acknowledge at AMQP after it is sent to the pipeline. Requires the pika library, minimum version 1.0.0.</p> <p>Module: <code>intelmq.bots.collectors.amqp.collector_amqp</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>connection_host</code></p> <p>(optional, string) Hostname of the AMQP server. Defaults to 127.0.0.1.</p> <p><code>connection_port</code></p> <p>(optional, integer) Port of the AMQP server. Defaults to 5672.</p> <p><code>connection_attempts</code></p> <p>(optional, integer) The number of connection attempts to the defined server. Defaults to 3.</p> <p><code>connection_heartbeat</code></p> <p>(optional, integer) Heartbeat to server (seconds). Defaults to 3600.</p> <p><code>connection_vhost</code></p> <p>(optional, string) Virtual host to connect, on an HTTP(S) connection would be . <p><code>expect_intelmq_message</code></p> <p>(optional, boolean) This parameter denotes whether the the data is from IntelMQ or not. If true, then the data can be any Report or Event and will be passed to the next bot as is. Otherwise a new Report is created with the raw data. Defaults to false.</p> <p><code>queue_name</code></p> <p>(optional, string) The name of the queue to fetch the data from.</p> <p><code>username</code></p> <p>(optional, string) Username for authentication to the AMQP server.</p> <p><code>password</code></p> <p>(optional, string) Password for authentication to the AMQP server.</p> <p><code>use_ssl</code></p> <p>(optional, boolean) Use of TLS for the connection. Make sure to also set the correct port. Defaults to false.</p>"},{"location":"user/bots/#api","title":"API","text":"<p>This bot collects data from HTTP or Socket REST API. The API is available at <code>/intelmq/push</code> when the HTTP interface is used. Requires the tornado library.</p> <p>Module: <code>intelmq.bots.collectors.api.collector</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>port</code></p> <p>(optional, integer) The local port at which the API is available. Defaults to 5000.</p> <p><code>use_socket</code></p> <p>(optional, boolean) If true, the socket will be opened at the location given with <code>socket_path</code>. Defaults to false.</p> <p><code>socket_path</code></p> <p>(optional, string) Location of the socket. Defaults to <code>/tmp/imq_api_default_socket</code>.</p> <p><code>socket_perms</code></p> <p>(optional, octal integer) Unix permissions to grant to the socket file. Default: <code>600</code></p> <p><code>socket_group</code></p> <p>(optional, string) Name of group to change group ownership of socket file to.</p>"},{"location":"user/bots/#generic-url-fetcher","title":"Generic URL Fetcher","text":"<p>This bot collects data from remote hosts using HTTP protocol. If the HTTP response' status code is not 2xx, this is treated as error. In Debug logging level, the request's and response's headers and body are logged for further inspection.</p> <p>Module: <code>intelmq.bots.collectors.http.collector_http</code></p> <p>Parameters (also expects feed parameters and HTTP parameters):</p> <p><code>http_url</code></p> <p>(required, string) Location of the resource to download.</p> <p><code>http_url_formatting</code></p> <p>(optional, boolean/object) When true, <code>{time[format]}</code> will be replaced by the current time in local timezone formatted by the given format. E.g. if the URL is <code>http://localhost/{time[%Y]}</code>, then the resulting URL is <code>http://localhost/2019</code> for the year 2019. ( Python's Format Specification Mini-Language is used for this.). You may use a JSON specifying time-delta parameters to shift the current time accordingly. For example use <code>days: -1</code> for the yesterday's date; the URL <code>http://localhost/{time[%Y-%m-%d]}</code> will get translated to <code>http://localhost/2018-12-31</code> for the 1st Jan of 2019. Defaults to false.</p> <p><code>extract_files</code></p> <p>(optional, boolean/array of strings) If true, the retrieved (compressed) file or archived will be uncompressed/unpacked and the files are extracted. If the parameter is a list of strings, only the files matching the filenames are extracted. Extraction handles gzipped files and both compressed and uncompressed tar-archives as well as zip archives. For extracted files, every extracted file is sent in it's own report. Every report has a field named <code>extra.file_name</code> with the file name in the archive the content was extracted from. Defaults to false.</p> <p><code>verify_pgp_signatures</code></p> <p>(optional, boolean) When true, signature file is downloaded and report file is checked. On error (missing signature, mismatch, ...), the error is logged and the report is not processed. Public key has to be imported in local keyring. This requires the python-gnupg library. Defaults to false.</p> <p><code>signature_url</code></p> <p>(optional, string) Location of the signature file for the downloaded content.</p> <p><code>signature_url_formatting</code></p> <p>(optional, boolean/object) Same as <code>http_url_formatting</code>. Defaults to false.</p> <p><code>gpg_keyring</code></p> <p>(optional, string) If specified, the string represents path to keyring file. Otherwise the PGP keyring file of the current <code>intelmq</code> user is used.</p>"},{"location":"user/bots/#generic-url-stream-fetcher","title":"Generic URL Stream Fetcher","text":"<p>Opens a streaming connection to the URL and collects the received lines.</p> <p>If the stream is interrupted, the connection will be aborted using the timeout parameter. No error will be logged if the number of consecutive connection fails does not reach the parameter <code>error_max_retries</code>. Instead of errors, an INFO message is logged. This is a measurement against too frequent ERROR logging messages. The consecutive connection fails are reset if a data line has been successfully transferred. If the consecutive connection fails reaches the parameter <code>error_max_retries</code>, an exception will be thrown and <code>rate_limit</code> applies, if not null.</p> <p>Module: <code>intelmq.bots.collectors.http.collector_http_stream</code></p> <p>Parameters (also expects feed parameters and HTTP parameters):</p> <p>Uses the same parameters as Generic URL Fetcher. The parameter <code>http_timeout_max_tries</code> is of no use in this collector.</p> <p><code>strip_lines</code></p> <p>(optional, boolean) Whether the single lines should be stripped (removing whitespace from the beginning and the end of the line) or not. Defaults to true.</p>"},{"location":"user/bots/#generic-mail-url-fetcher","title":"Generic Mail URL Fetcher","text":"<p>Extracts URLs from e-mail messages and downloads the content from the URLs.</p> <p>The resulting reports contain the following special fields:</p> <ul> <li><code>feed.url</code>: The URL the data was downloaded from.</li> <li><code>extra.email_date</code>: The content of the email's <code>Date</code> header.</li> <li><code>extra.email_subject</code>: The subject of the email.</li> <li><code>extra.email_from</code>: The email's from address.</li> <li><code>extra.email_message_id</code>: The email's message ID.</li> <li><code>extra.file_name</code>: The file name of the downloaded file (extracted from the HTTP Response Headers if possible).</li> </ul> <p>Chunking</p> <p>For line-based inputs the bot can split up large reports into smaller chunks. This is particularly important for setups that use Redis as a message queue which has a per-message size limitation of 512 MB. To configure chunking, set <code>chunk_size</code> to a value in bytes. <code>chunk_replicate_header</code> determines whether the header line should be repeated for each chunk that is passed on to a parser bot. Specifically, to configure a large file input to work around Redis size limitation set <code>chunk_size</code> to something like 384000000 (~384 MB).</p> <p>Module: <code>intelmq.bots.collectors.mail.collector_mail_url</code></p> <p>Parameters (also expects feed parameters and HTTP parameters):</p> <p><code>mail_host</code></p> <p>(required, string) Hostname of the mail server.</p> <p><code>mail_port</code></p> <p>(optional, integer) IMAP server port: 143 without TLS, 993 with TLS. Defaults to 143.</p> <p><code>mail_user</code></p> <p>(required, string) Username of the email account.</p> <p><code>mail_password</code></p> <p>(required, string) Password associated with the user account.</p> <p><code>mail_ssl</code></p> <p>(optional, boolean) Whether the mail server uses TLS or not. Defaults to true.</p> <p><code>folder</code></p> <p>(optional, string) Folder in which to look for e-mail messages. Defaults to INBOX.</p> <p><code>subject_regex</code></p> <p>(optional, string) Regular expression to look for in the e-mail subject.</p> <p><code>url_regex</code></p> <p>(optional, string) Regular expression of the feed URL to look for in the e-mail body.</p> <p><code>sent_from</code></p> <p>(optional, string) Filter messages by the sender.</p> <p><code>sent_to</code></p> <p>(optional, string) Filter messages by the recipient.</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) Path to trusted CA certificate. Applies only to IMAP connections, not HTTP. If the provided certificate is not found, the IMAP connection will fail on handshake. Defaults to no certificate.</p>"},{"location":"user/bots/#generic-mail-attachment-fetcher","title":"Generic Mail Attachment Fetcher","text":"<p>This bot collects messages from mailboxes and downloads the attachments.</p> <p>The resulting reports contains the following special fields:</p> <ul> <li><code>extra.email_date</code>: The content of the email's <code>Date</code> header</li> <li><code>extra.email_subject</code>: The subject of the email</li> <li><code>extra.email_from</code>: The email's from address</li> <li><code>extra.email_message_id</code>: The email's message ID</li> <li><code>extra.file_name</code>: The file name of the attachment or the file name in the attached archive if attachment is to   uncompress.</li> </ul> <p>Module: <code>intelmq.bots.collectors.mail.collector_mail_attach</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>mail_host</code></p> <p>(required, string) Hostname of the mail server.</p> <p><code>mail_port</code></p> <p>(optional, integer) IMAP server port: 143 without TLS, 993 with TLS. Defaults to 143.</p> <p><code>mail_user</code></p> <p>(required, string) Username of the email account.</p> <p><code>mail_password</code></p> <p>(required, string) Password associated with the user account.</p> <p><code>mail_ssl</code></p> <p>(optional, boolean) Whether the mail server uses TLS or not. Defaults to true.</p> <p><code>folder</code></p> <p>(optional, string) Folder in which to look for e-mail messages. Defaults to INBOX.</p> <p><code>subject_regex</code></p> <p>(optional, string) Regular expression to look for in the e-mail subject.</p> <p><code>attach_regex</code></p> <p>(optional, string) Regular expression of the name of the attachment. Defaults to csv.zip.</p> <p><code>extract_files</code></p> <p>(optional, boolean) Whether to extract compress files from the attachment. Defaults to true.</p> <p><code>sent_from</code></p> <p>(optional, string) Only process messages sent from this address. Defaults to null (any sender).</p> <p><code>sent_to</code></p> <p>(optional, string) Only process messages sent to this address. Defaults to null (any recipient).</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) Path to trusted CA certificate. Applies only to IMAP connections, not HTTP. If the provided certificate is not found, the IMAP connection will fail on handshake. By default, no certificate is used.</p>"},{"location":"user/bots/#generic-mail-body-fetcher","title":"Generic Mail Body Fetcher","text":"<p>This bot collect messages from mailboxes, forwards the bodies as reports. Each non-empty body with the matching content type is sent as individual report.</p> <p>The resulting reports contains the following special fields:</p> <ul> <li><code>extra.email_date</code>: The content of the email's <code>Date</code> header</li> <li><code>extra.email_subject</code>: The subject of the email</li> <li><code>extra.email_from</code>: The email's from address</li> <li><code>extra.email_message_id</code>: The email's message ID</li> </ul> <p>Module: <code>intelmq.bots.collectors.mail.collector_mail_body</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>mail_host</code></p> <p>(required, string) Hostname of the mail server.</p> <p><code>mail_port</code></p> <p>(optional, integer) IMAP server port: 143 without TLS, 993 with TLS. Defaults to 143.</p> <p><code>mail_user</code></p> <p>(required, string) Username of the email account.</p> <p><code>mail_password</code></p> <p>(required, string) Password associated with the user account.</p> <p><code>mail_ssl</code></p> <p>(optional, boolean) Whether the mail server uses TLS or not. Defaults to true.</p> <p><code>folder</code></p> <p>(optional, string) Folder in which to look for e-mail messages. Defaults to INBOX.</p> <p><code>subject_regex</code></p> <p>(optional, string) Regular expression to look for in the e-mail subject.</p> <p><code>url_regex</code></p> <p>(optional, string) Regular expression of the feed URL to look for in the e-mail body.</p> <p><code>sent_from</code></p> <p>(optional, string) Filter messages by the sender.</p> <p><code>sent_to</code></p> <p>(optional, string) Filter messages by the recipient.</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) Path to trusted CA certificate. Applies only to IMAP connections, not HTTP. If the provided certificate is not found, the IMAP connection will fail on handshake. Defaults to no certificate.</p> <p><code>content_types</code></p> <p>(optional, boolean/array of strings) Which bodies to use based on the content_type. Defaults to <code>true</code> (same as <code>['html', 'plain']</code>) for all:</p> <ul> <li>string with comma separated values, e.g. <code>['html', 'plain']</code></li> <li><code>true</code>, <code>false</code>, <code>null</code>: Same as default value - <code>string</code>, e.g. <code>plain</code></li> </ul>"},{"location":"user/bots/#github-api","title":"Github API","text":"<p>Collects files matched by regular expression from GitHub repository via the GitHub API. Optionally with GitHub credentials, which are used as the Basic HTTP authentication.</p> <p>Workflow</p> <p>The optional authentication parameters provide a high limit of the GitHub API requests. With the git hub user authentication, the requests are rate limited to 5000 per hour, otherwise to 60 requests per hour.</p> <p>The collector recursively searches for <code>regex</code>-defined files in the provided <code>repository</code>. Additionally it adds extra file metadata defined by the <code>extra_fields</code>.</p> <p>The bot always sets the url, from which downloaded the file, as <code>feed.url</code>.</p> <p>Module: <code>intelmq.bots.collectors.github_api.collector_github_contents_api</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>personal_access_token</code></p> <p>(required, string) GitHub account personal access token GitHub documentation: Creating a personal access token</p> <p><code>repository</code></p> <p>(required, string) GitHub target repository (<code>&lt;USER&gt;/&lt;REPOSITORY&gt;</code>)</p> <p><code>regex</code></p> <p>(optional, string) Valid regular expression of target files within the repository. Defaults to <code>.*.json</code>.</p> <p><code>extra_fields</code></p> <p>(optional, array of strings) Comma-separated list of extra fields from GitHub contents API.</p>"},{"location":"user/bots/#file","title":"File","text":"<p>This bot is capable of reading files from the local file-system. This is handy for testing purposes, or when you need to react to spontaneous events. In combination with the Generic CSV parser this should work great.</p> <p>The resulting reports contains the following special fields:</p> <ul> <li><code>feed.url</code>: The URI using the <code>file://</code> scheme and localhost, with the full path to the processed file.</li> <li><code>extra.file_name</code>: The file name (without path) of the processed file.</li> </ul> <p>Chunking</p> <p>Additionally, for line-based inputs the bot can split up large reports into smaller chunks.</p> <p>This is particularly important for setups that use Redis as a message queue which has a per-message size limitation of 512 MB.</p> <p>To configure chunking, set <code>chunk_size</code> to a value in bytes. <code>chunk_replicate_header</code> determines whether the header line should be repeated for each chunk that is passed on to a parser bot.</p> <p>Specifically, to configure a large file input to work around Redis' size limitation set <code>chunk_size</code> to something like 384000, i.e., ~384 MB.</p> <p>Workflow</p> <p>The bot loops over all files in <code>path</code> and tests if their file name matches *postfix, e.g. <code>*.csv</code>. If yes, the file will be read and inserted into the queue.</p> <p>If <code>delete_file</code> is set, the file will be deleted after processing. If deletion is not possible, the bot will stop.</p> <p>To prevent data loss, the bot also stops when no <code>postfix</code> is set and <code>delete_file</code> was set. This cannot be overridden.</p> <p>The bot always sets the file name as <code>feed.url</code>.</p> <p>Module: <code>intelmq.bots.collectors.file.collector_file</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>path</code></p> <p>(required, string) Path to file.</p> <p><code>postfix</code></p> <p>(required, string) The postfix (file ending) of the files to look for. For example [.csv].</p> <p><code>delete_file</code></p> <p>(optional, boolean) Whether to delete the file after reading. Defaults to false.</p>"},{"location":"user/bots/#fireeye","title":"FireEye","text":"<p>This bot is capable of collecting hashes and URLs from a FireEye MAS appliance.</p> <p>The Python library <code>xmltodict</code> is required to run this bot.</p> <p>Workflow</p> <p>The bot collects all alerts which occurred during specified duration. After this we make a second call and check if there is additional information like domains and hashes available. After collecting the openioc data we send this information to the Fireeye parser.</p> <p>Module: <code>intelmq.bots.collectors.fireeye.collector_fireeye</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>host</code></p> <p>(required, string) DNS name of the target appliance.</p> <p><code>request_duration</code></p> <p>(required, string) Allowed values: <code>24_hours</code> or <code>48_hours</code>. Length of the query in past eg. collect alerts from last 24hours/48hours.</p> <p><code>http_username</code></p> <p>(required, string) Password for authentication.</p> <p><code>http_password</code></p> <p>(required, string) Username for authentication.</p>"},{"location":"user/bots/#kafka","title":"Kafka","text":"<p>Requires the kafka python library.</p> <p>Module: <code>intelmq.bots.collectors.kafka.collector</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>topic</code></p> <p>(required, string) Kafka topic the collector should get messages from.</p> <p><code>bootstrap_servers</code></p> <p>(required, string) Kafka server(s) and port the collector should connect to. Defaults to <code>localhost:9092</code></p> <p><code>ssl_check_hostname</code></p> <p>(optional, boolean) Whether to verify TLS certificates. Defaults to true.</p> <p><code>ssl_client_certificate</code></p> <p>(optional, string) Path to client certificate to use for TLS connections.</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) Path to trusted CA certificate.</p>"},{"location":"user/bots/#misp-generic","title":"MISP Generic","text":"<p>Collects messages from MISP, a malware information sharing platform server.</p> <p>Workflow</p> <p>This collector will search for events on a MISP server that have a [to_process] tag attached to them (see the [misp_tag_to_process] parameter) and collect them for processing by IntelMQ. Once the MISP event has been processed the [to_process] tag is removed from the MISP event and a [processed] tag is then attached (see the [misp_tag_processed] parameter).</p> <p>NB. The MISP tags must be configured to be 'exportable' otherwise they will not be retrieved by the collector.</p> <p>Module: <code>intelmq.bots.collectors.misp.collector</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>misp_url</code></p> <p>(required, string) URL of MISP server (with trailing '/').</p> <p><code>misp_key</code></p> <p>(required, string) MISP Authkey.</p> <p><code>misp_tag_to_process</code></p> <p>(required, string) MISP tag for events to be processed.</p> <p><code>misp_tag_processed</code></p> <p>(optional, string) MISP tag for processed events.</p> <p><code>http_verify_cert</code></p> <p>(optional, boolean) Verify the TLS certificate of the server. Defaults to true.</p>"},{"location":"user/bots/#request-tracker","title":"Request Tracker","text":"<p>Request Tracker Collector fetches attachments from an RTIR instance.</p> <p>This rt bot will connect to RT and inspect the given <code>search_queue</code> for tickets matching all criteria in <code>search_*</code>, Any matches will be inspected. For each match, all (RT-) attachments of the matching RT tickets are iterated over and within this loop, the first matching filename in the attachment is processed. If none of the filename matches apply, the contents of the first (RT-) \"history\" item is matched against the regular expression for the URL (<code>url_regex</code>).</p> <p>The parameter <code>http_timeout_max_tries</code> is of no use in this collector.</p> <p>Search</p> <p>The parameters prefixed with <code>search_</code> allow configuring the ticket search.</p> <p>Empty strings and null as value for search parameters are ignored.</p> <p>File downloads</p> <p>Attachments can be optionally unzipped, remote files are downloaded with the <code>http_*</code> settings applied.</p> <p>If <code>url_regex</code> or <code>attachment_regex</code> are empty strings, false or null, they are ignored.</p> <p>Ticket processing</p> <p>Optionally, the RT bot can \"take\" RT tickets (i.e. the <code>user</code> is assigned this ticket now) and/or the status can be changed (leave <code>set_status</code> empty in case you don't want to change the status). Please note however that you MUST do one of the following: either \"take\" the ticket or set the status (<code>set_status</code>). Otherwise, the search will find the ticket every time and get stuck in an endless loop.</p> <p>In case a resource needs to be fetched and this resource is permanently not available (status code is 4xx), the ticket status will be set according to the configuration to avoid processing the ticket over and over. For temporary failures the status is not modified, instead the ticket will be skipped in this run.</p> <p>Time search</p> <p>To find only tickets newer than a given absolute or relative time, you can use the <code>search_not_older_than</code> parameter. Absolute time specification can be anything parseable by dateutil, best use a ISO format.</p> <p>Relative must be in this format: <code>[NUMBER] [TIMESPAN]s</code>, e.g. <code>3 days</code>. Timespan can be hour, day, week, month or year. Trailing 's' is supported for all timespans. Relative times are subtracted from the current time directly before the search is performed.</p> <p>The resulting reports contains the following special fields:</p> <ul> <li><code>rtir_id</code>: The ticket ID</li> <li><code>extra.email_subject</code> and <code>extra.ticket_subject</code>: The subject of the ticket</li> <li><code>extra.email_from</code> and <code>extra.ticket_requestors</code>: Comma separated list of the ticket's requestor's email addresses.</li> <li><code>extra.ticket_owner</code>: The ticket's owner name</li> <li><code>extra.ticket_status</code>: The ticket's status</li> <li><code>extra.ticket_queue</code>: The ticket's queue</li> <li><code>extra.file_name</code>: The name of the extracted file, the name of the downloaded file or the attachments' filename without <code>.gz</code> postfix.</li> <li><code>time.observation</code>: The creation time of the ticket or attachment.</li> </ul> <p>Requirements</p> <p>You need the rt-library &gt;= 1.9 and &lt; 3.0 from from nic.cz, available via pypi: <code>pip3 install rt&lt;3</code></p> <p>Module: <code>intelmq.bots.collectors.rt.collector_rt</code></p> <p>Parameters (also expects feed parameters and HTTP parameters):</p> <p><code>extract_attachment</code></p> <p>(optional, boolean/array of strings) See documentation of the Generic URL Fetcher parameter <code>extract_files</code> for more details.</p> <p><code>extract_download</code></p> <p>(optional, boolean/array of strings) See documentation of the Generic URL Fetcher parameter <code>extract_files</code> for more details.</p> <p><code>uri</code></p> <p>(optional, string) URL of the REST interface of the RT. Defaults to <code>http://localhost/rt/REST/1.0</code>.</p> <p><code>user</code></p> <p>(optional, string) RT username. Defaults to intelmq.</p> <p><code>password</code></p> <p>(optional, string) RT password. Defaults to password.</p> <p><code>search_not_older_than</code></p> <p>(optional, string) Absolute time (use ISO format) or relative time, e.g. <code>3 days</code>.</p> <p><code>search_owner</code></p> <p>(optional, string) Owner of the ticket to search for. Defaults to nobody.</p> <p><code>search_queue</code></p> <p>(optional, string) Queue of the ticket to search for. Defaults to Incident Reports.</p> <p><code>search_requestor</code></p> <p>(optional, string) E-mail address of the requestor.</p> <p><code>search_status</code></p> <p>(optional, string) Status of the ticket to search for. Defaults to new.</p> <p><code>search_subject_like</code></p> <p>(optional, string/array of strings) Part of the subject of the ticket to search for. Defaults to \"Report\".</p> <p><code>search_subject_notlike</code></p> <p>(optional, string/array of strings) Exclude subject containing given value, use list for multiple excluding values.</p> <p><code>set_status</code></p> <p>(optional, string) Status to set the ticket to after processing. Use false or null to keep current status. Defaults to open.</p> <p><code>take_ticket</code></p> <p>(optional, boolean) Whether to take the ticket. Defaults to true.</p> <p><code>url_regex</code></p> <p>(optional, string) Regular expression of an URL to search for in the ticket. Defaults to <code>https://dl.shadowserver.org/[a-zA-Z0-9?_-]*</code>.</p> <p><code>attachment_regex</code></p> <p>(optional, string) Eegular expression of an attachment in the ticket. Defaults to <code>\\.csv\\.zip$</code>.</p>"},{"location":"user/bots/#rsync","title":"Rsync","text":"<p>This bot downloads a file via rsync and then load data from downloaded file. Downloaded file is located in <code>var/lib/bots/rsync_collector</code>.</p> <p>Requires the rsync executable.</p> <p>Module: <code>intelmq.bots.collectors.rsync.collector_rsync</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>file</code></p> <p>(required, string) The filename to process, combined with <code>rsync_path</code>.</p> <p><code>rsync_path</code></p> <p>(required, string) Path to the directory of the file. Allowed values are local directory (such as <code>/home/username/</code>) or remote directory (such as <code>&lt;username@remote_host&gt;:/home/username/directory</code>).</p> <p><code>rsync_file_path_formatting</code></p> <p>(optional, boolean) Whether the file and rsync_path should be formatted by the given format. E.g. if the path is <code>/path/to_file/{time[%Y]}</code>, then the resulting path is <code>/path/to/file/2023</code> for the year 2023. (Python's <code>Format Specification Mini-Language &lt;https://docs.python.org/3/library/string.html#formatspec&gt;</code> is used for this.). You may use a <code>JSON</code> specifying <code>time-delta &lt;https://docs.python.org/3/library/datetime.html#datetime.timedelta&gt;</code> parameters to shift the current time accordingly. For example use <code>{\"days\": -1}</code> for the yesterday's date; the path <code>/path/to/file/{time[%Y-%m-%d]}</code> will get translated to \"/path/to/file/2018-12-31\" for the 1st Jan of 2023. Defaults to false.</p> <p><code>extra_params</code></p> <p>(optional, array of strings) A list of extra parameters to pass to rsync.</p> <p><code>private_key</code></p> <p>(optional, string) Private key to use for rsync authentication.</p> <p><code>private_key_path</code></p> <p>(optional, string) Path to private key to use for rsync authentication. Use <code>private_key</code> or <code>private_key_path</code>, not both.</p> <p><code>strict_host_key_checking</code></p> <p>(optional, boolean) Whether the host key should be checked. Defaults to false.</p> <p><code>temp_directory</code></p> <p>(optional, string) The temporary directory for rsync to use for collected files. Defaults to <code>/opt/intelmq/var/run/{BOT-ID}</code> or <code>/var/run/intelmq/{BOT-ID}</code>.</p>"},{"location":"user/bots/#shadowserver-reports-api","title":"Shadowserver Reports API","text":"<p>Connects to the Shadowserver API, requests a list of all the reports for a specific country and processes the ones that are new.</p> <p>The Cache is required to memorize which files have already been processed (TTL needs to be high enough to cover the oldest files available!).</p> <p>The resulting reports contain the following special field:</p> <ul> <li><code>extra.file_name</code>: The name of the downloaded file, with fixed filename extension.</li> </ul> <p>Module: <code>intelmq.bots.collectors.shadowserver.collector_reports_api</code></p> <p>Parameters (also expects feed parameters and cache parameters):</p> <p><code>apikey</code></p> <p>(required, string) Your Shadowserver API key.</p> <p><code>secret</code></p> <p>(required, string) Your Shadowserver API secret.</p> <p><code>reports</code></p> <p>(required, string/array of strings) An array of strings (or a list of comma-separated values) of the mailing lists you want to process.</p> <p><code>types</code></p> <p>(optional, string/array of strings) An array of strings (or a list of comma-separated values) with the names of report types you want to process. If you leave this empty, all the available reports will be downloaded and processed (i.e. 'scan', 'drones', 'intel', 'sandbox_connection', 'sinkhole_combined'). The possible report types are equivalent to the file names defined the the schema.  Please see the Supported Reports of the Shadowserver parser for details.</p> <p>Sample configuration</p> <pre><code>  shadowserver-collector:\n    description: Our bot responsible for getting reports from Shadowserver\n    enabled: true\n    group: Collector\n    module: intelmq.bots.collectors.shadowserver.collector_reports_api\n    name: Shadowserver_Collector\n    parameters:\n      destination_queues:\n        _default: [shadowserver-parser-queue]\n      file_format: csv\n      api_key: \"$API_KEY_received_from_the_shadowserver_foundation\"\n      secret: \"$SECRET_received_from_the_shadowserver_foundation\"\n    run_mode: continuous\n</code></pre>"},{"location":"user/bots/#shodan-stream","title":"Shodan Stream","text":"<p>Queries the Shodan Streaming API.</p> <p>Requires the shodan library to be installed:</p> <ul> <li> <p>https://github.com/achillean/shodan-python/</p> </li> <li> <p>https://pypi.org/project/shodan/</p> </li> </ul> <p>Module: <code>intelmq.bots.collectors.shodan.collector_stream</code></p> <p>Parameters (also expects feed parameters and HTTP parameters):</p> <p>Only the proxy is used (requires <code>shodan-python &gt; 1.8.1</code>). Certificate is always verified.</p> <p><code>countries</code></p> <p>() A list of countries to query for. If it is a string, it will be spit by <code>,</code>.</p> <p><code>alert</code></p> <p>() Alert ID from monitor.shodan.io.</p> <p>If the stream is interrupted, the connection will be aborted using the timeout parameter. No error will be logged if the number of consecutive connection fails does not reach the parameter <code>error_max_retries</code>. Instead of errors, an INFO message is logged. This is a measurement against too frequent ERROR logging messages. The consecutive connection fails are reset if a data line has been successfully transferred. If the consecutive connection fails reaches the parameter <code>error_max_retries</code>, an exception will be thrown and <code>rate_limit</code> applies, if not null.</p>"},{"location":"user/bots/#tcp","title":"TCP","text":"<p>TCP is the bot responsible to receive events on a TCP port (ex: from TCP Output of another IntelMQ instance). Might not be working on Python 3.4.6.</p> <p>Response</p> <p>TCP collector just sends an \"OK\" message after every received message, this should not pose a problem for an arbitrary input. If you intend to link two IntelMQ instance via TCP, have a look at the TCP output bot documentation.</p> <p>Module: <code>intelmq.bots.collectors.tcp.collector</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>ip</code></p> <p>(required, string) IP of the destination server.</p> <p><code>port</code></p> <p>(required, integer) Port of destination server.</p>"},{"location":"user/bots/#blueliv-crimeserver","title":"Blueliv Crimeserver","text":"<p>Collects report messages from Blueliv API.</p> <p>For more information visit https://github.com/Blueliv/api-python-sdk</p> <p>Module: <code>intelmq.bots.collectors.blueliv.collector_crimeserver</code></p> <p>Requirements</p> <p>Install the required library:</p> <pre><code>pip3 install -r intelmq/bots/collectors/blueliv/REQUIREMENTS.txt\n</code></pre> <p>Parameters (also expects feed parameters):</p> <p><code>api_key</code></p> <p>(required, string) location of information resource, see https://map.blueliv.com/?redirect=get-started#signup</p> <p><code>api_url</code></p> <p>(optional, string) The optional API endpoint. Defaults to <code>https://freeapi.blueliv.com</code>.</p>"},{"location":"user/bots/#calidog-certstream","title":"Calidog Certstream","text":"<p>A Bot to collect data from the Certificate Transparency Log (CTL). This bot works based on certstream library (https://github.com/CaliDog/certstream-python)</p> <p>Module: <code>intelmq.bots.collectors.calidog.collector_certstream</code></p> <p>Parameters (also expects feed parameters):</p>"},{"location":"user/bots/#eset-eti","title":"ESET ETI","text":"<p>Collects data from ESET ETI TAXII server.</p> <p>For more information visit https://www.eset.com/int/business/services/threat-intelligence/.</p> <p>Module: <code>intelmq.bots.collectors.eset.collector</code></p> <p>Requirements</p> <p>Install the required <code>cabby</code> library:</p> <pre><code>pip3 install -r intelmq/bots/collectors/eset/REQUIREMENTS.txt\n</code></pre> <p>Parameters (also expects feed parameters):</p> <p><code>username</code></p> <p>(required, string) Your username.</p> <p><code>password</code></p> <p>(required, string) Your password.</p> <p><code>endpoint</code></p> <p>(optional, string) Defaults to <code>eti.eset.com</code>.</p> <p><code>time_delta</code></p> <p>(optional, integer) The time (in seconds) span to look back. Default to 3600.</p> <p><code>collection</code></p> <p>(required, string) The collection to fetch.</p>"},{"location":"user/bots/#mcafee-opendxl","title":"McAfee openDXL","text":"<p>Collects messages via McAfee openDXL.</p> <p>Module: <code>intelmq.bots.collectors.opendxl.collector</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>dxl_config_file</code></p> <p>(required, string) Path to the the configuration file containing required information to connect.</p> <p><code>dxl_topic</code></p> <p>(optional, string) Name of the DXL topic to subscribe to. Defaults to <code>/mcafee/event/atd/file/report</code>.</p>"},{"location":"user/bots/#microsoft-azure","title":"Microsoft Azure","text":"<p>Collects blobs from Microsoft Azure using their library.</p> <p>Iterates over all blobs in all containers in an Azure storage. The Cache is required to memorize which files have already been processed (TTL needs to be high enough to cover the oldest files available!).</p> <p>This bot significantly changed in a backwards-incompatible way in IntelMQ Version 2.2.0 to support current versions of the Microsoft Azure Python libraries. <code>azure-storage-blob&gt;=12.0.0</code> is required.</p> <p>Module: <code>intelmq.bots.collectors.microsoft.collector_azure</code></p> <p>Parameters (also expects feed parameters and cache parameters):</p> <p><code>connection_string</code></p> <p>(required, string) Connection string as given by Microsoft.</p> <p><code>container_name</code></p> <p>(required, string) Name of the container to connect to.</p>"},{"location":"user/bots/#microsoft-interflow","title":"Microsoft Interflow","text":"<p>This bot collects files from Microsoft Interflow API.</p> <p>Iterates over all files available by this API. Make sure to limit the files to be downloaded with the parameters, otherwise you will get a lot of data! The cache is used to remember which files have already been downloaded. Make sure the TTL is high enough, higher than <code>not_older_than</code>.</p> <p>Module: <code>intelmq.bots.collectors.microsoft.collector_interflow</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>api_key</code></p> <p>(required, string) API generated in their portal.</p> <p><code>file_match</code></p> <p>(optional, string) Regular expression to match file names.</p> <p><code>not_older_than</code></p> <p>(optional, integer/datetime) an optional relative (minutes) or absolute time (UTC is assumed) expression to determine the oldest time of a file to be downloaded.</p> <p><code>redis_cache_*</code> and especially <code>redis_cache_ttl</code></p> <p>Settings for the cache where file names of downloaded files are saved. The cache's TTL must always be bigger than <code>not_older_than</code>.</p> <p>Additional functionalities</p> <p>Files are automatically ungzipped if the filename ends with <code>.gz</code>.</p>"},{"location":"user/bots/#stomp","title":"STOMP","text":"<p>Collects messages from a STOMP server.</p> <p>Module: <code>intelmq.bots.collectors.stomp.collector</code></p> <p>Requirements</p> <p>Install the <code>stomp.py</code> library from PyPI:</p> <pre><code>pip3 install -r intelmq/bots/collectors/stomp/REQUIREMENTS.txt\n</code></pre> <p>Alternatively, you may want to install it using your OS's native packaging tools, e.g.:</p> <pre><code>apt install python3-stomp\n</code></pre> <p>Apart from that, depending on what STOMP server you connect to, you may need to obtain, from the organization or company owning the server, one or more of the following security/authentication-related resources:</p> <ul> <li>CA certificate file;</li> <li>either: client certificate and client certificate's key files,   or: username (STOMP login) and password (STOMP passcode).</li> </ul> <p>Also, you will need to know an appropriate STOMP destination (aka exchange point), e.g. <code>/exchange/my.example.org/*.*.*.*</code>.</p> <p>Parameters (also expects feed parameters):</p> <p><code>server</code></p> <p>(required, string) STOMP server's hostname or IP, e.g. \"n6stream.cert.pl\" (which is default)</p> <p><code>port</code></p> <p>(optional, integer) STOMP server's port number (default: 61614)</p> <p><code>exchange</code></p> <p>(required, string) STOMP destination to subscribe to, e.g. <code>\"/exchange/my.org/*.*.*.*\"</code></p> <p><code>heartbeat</code></p> <p>(optional, integer) default: 6000</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) Path to CA file, or empty string to load system's default CA certificates</p> <p><code>auth_by_ssl_client_certificate</code></p> <p>(optional, boolean) Default: true (note: false is needed for new n6 auth)</p> <p><code>ssl_client_certificate</code></p> <p>(optional, string) Path to client certificate to use for TLS connections.</p> <p><code>ssl_client_certificate_key</code></p> <p>(optional, string) Path to client private key to use for TLS connections.</p> <p><code>username</code></p> <p>(optional, string) Username to use.</p> <p><code>password</code></p> <p>(optional, string) Password to use.</p>"},{"location":"user/bots/#twitter-remove","title":"Twitter (REMOVE?)","text":"<p>Collects tweets.</p> <p>Collects tweets from target_timelines. Up to tweet_count tweets from each user and up to timelimit back in time. The tweet text is sent separately and if allowed, links to pastebin are followed and the text sent in a separate report</p> <p>Module: <code>intelmq.bots.collectors.twitter.collector_twitter</code></p> <p>Parameters (also expects feed parameters):</p> <p><code>target_timelines</code></p> <p>() screen_names of twitter accounts to be followed</p> <p><code>tweet_count</code></p> <p>() number of tweets to be taken from each account</p> <p><code>timelimit</code></p> <p>() maximum age of the tweets collected in seconds</p> <p><code>follow_urls</code></p> <p>() list of screen_names for which URLs will be followed</p> <p><code>exclude_replies</code></p> <p>() exclude replies of the followed screen_names</p> <p><code>include_rts</code></p> <p>() whether to include retweets by given screen_name</p> <p><code>consumer_key</code></p> <p>() Twitter API login data</p> <p><code>consumer_secret</code></p> <p>() Twitter API login data</p> <p><code>access_token_key</code></p> <p>() Twitter API login data</p> <p><code>access_token_secret</code></p> <p>() Twitter API login data</p>"},{"location":"user/bots/#parser-bots","title":"Parser Bots","text":""},{"location":"user/bots/#common-parameters","title":"Common parameters","text":""},{"location":"user/bots/#default_fields","title":"<code>default_fields</code>","text":"<p>(optional, object) Map of statically added fields to each event (only applied if parsing the event doesn't set the value).</p> <p>example usage:</p> <pre><code>defaults_fields:\n  classification.type: c2-server\n  protocol.transport: tcp\n</code></pre>"},{"location":"user/bots/#abusech-feodo-tracker","title":"Abuse.ch Feodo Tracker","text":"<p>Parses data from Abuse.ch Feodo Tracker (JSON format).</p> <p>Module: <code>intelmq.bots.parsers.abusech.parser_feodotracker</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#alienvault-api","title":"AlienVault API","text":"<p>Parses data from AlienVault API.</p> <p>Module: <code>intelmq.bots.parsers.alienvault.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#alienvault-otx","title":"AlienVault OTX","text":"<p>Parses data from AlientVault Open Threat Exchange (OTX).</p> <p>Module: <code>intelmq.bots.parsers.alienvault.parser_otx</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#anubisnetworks-cyberfeed-stream","title":"AnubisNetworks Cyberfeed Stream","text":"<p>Parses data from AnubisNetworks Cyberfeed Stream.</p> <p>The feed format changes over time. The parser supports at least data from 2016 and 2020.</p> <p>Events with the Malware \"TestSinkholingLoss\" are ignored, as they are for the feed provider's internal purpose only and should not be processed at all.</p> <p>Module: <code>intelmq.bots.parsers.anubisnetworks.parser</code></p> <p>Parameters:</p> <p><code>use_malware_family_as_classification_identifier</code></p> <p>(optional, boolean) Use the <code>malw.family</code> field as <code>classification.type</code>. If false, check if the same as <code>malw.variant</code>. If it is the same, it is ignored. Otherwise saved as <code>extra.malware.family</code>. Defaults to true.</p>"},{"location":"user/bots/#bambenek","title":"Bambenek","text":"<p>Parses data from Bambenek DGA, Domain, and IP feeds.</p> <p>Module: <code>intelmq.bots.parsers.bambenek.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#blocklistde","title":"Blocklist.de","text":"<p>Parses data from Blocklist.de feeds.</p> <p>Module: <code>intelmq.bots.parsers.blocklistde.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#blueliv-crimeserver_1","title":"Blueliv Crimeserver","text":"<p>Parses data from Blueliv Crimeserver feed.</p> <p>Module: <code>intelmq.bots.parsers.blueliv.parser_crimeserver</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#calidog-certstream_1","title":"Calidog Certstream","text":"<p>Parses data from Certificate Transparency Log.</p> <p>For each domain in the <code>leaf_cert.all_domains</code> object one event with the domain in <code>source.fqdn</code> (and <code>source.ip</code> as fallback) is produced. The seen-date is saved in <code>time.source</code> and the classification type is <code>other</code>.</p> <p>Module: <code>intelmq.bots.parsers.calidog.parser_certstream</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#cert-eu","title":"CERT-EU","text":"<p>Parses data from CERT-EU feed (CSV).</p> <p>Module: <code>intelmq.bots.parsers.certeu.parser_csv</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#ci-army","title":"CI Army","text":"<p>Parses data from CI Army feed.</p> <p>Module: <code>intelmq.bots.parsers.ci_army.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#cleanmx","title":"CleanMX","text":"<p>Parses data from CleanMX feed.</p> <p>Module: <code>intelmq.bots.parsers.cleanmx.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#team-cymru-cap","title":"Team Cymru CAP","text":"<p>Parses data from Team Cymru's CSIRT Assistance Program (CAP) feed.</p> <p>There are two different feeds available:</p> <ul> <li><code>infected_$date.txt</code> (\"old\")</li> <li><code>$certname_$date.txt</code> (\"new\")</li> </ul> <p>The new will replace the old at some point in time, currently you need to fetch both. The parser handles both formats.</p> <p>Old feed</p> <p>As little information on the format is available, the mappings might not be correct in all cases. Some reports are not implemented at all as there is no data available to check if the parsing is correct at all. If you do get errors like <code>Report ... not implement</code> or similar please open an issue and report the (anonymized) example data. Thanks.</p> <p>The information about the event could be better in many cases but as Cymru does not want to be associated with the report, we can't add comments to the events in the parser, because then the source would be easily identifiable for the recipient.</p> <p>Module: <code>intelmq.bots.parsers.cymru.parser_cap_program</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#team-cymru-full-bogons","title":"Team Cymru Full Bogons","text":"<p>Parses data from full bogons feed.</p> <p>http://www.team-cymru.com/bogon-reference.html</p> <p>Module: <code>intelmq.bots.parsers.cymru.parser_full_bogons</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#cznic-haas","title":"CZ.NIC HaaS","text":"<p>Parses data from CZ.NIC Honeypot as a service (HaaS) feed.</p> <p>Module: <code>intelmq.bots.parsers.cznic.parser_haas</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#cznic-proki","title":"CZ.NIC PROKI","text":"<p>Parses data from CZ.NIC PROKI API.</p> <p>Module: <code>intelmq.bots.parsers.cznic.parser_proki</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#danger-rulez","title":"Danger Rulez","text":"<p>Parses data from Danger Rulez SSH blocklist.</p> <p>Module: <code>intelmq.bots.parsers.danger_rulez.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#dataplane","title":"Dataplane","text":"<p>Parses data from Dataplane feed.</p> <p>Module: <code>intelmq.bots.parsers.dataplane.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#dshield-asn","title":"DShield ASN","text":"<p>Parses data from DShield ASN feed.</p> <p>Module: <code>intelmq.bots.parsers.dshield.parser_asn</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#dshield-block","title":"DShield Block","text":"<p>Parses data from DShield Block feed.</p> <p>Module: <code>intelmq.bots.parsers.dshield_parser_block</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#eset","title":"ESET","text":"<p>Parses data from ESET ETI TAXII server.</p> <p>Supported collections:</p> <ul> <li>\"ei.urls (json)\"</li> <li>\"ei.domains v2 (json)\"</li> </ul> <p>Module: <code>intelmq.bots.parsers.eset.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#dyn-todo","title":"Dyn (TODO)","text":""},{"location":"user/bots/#fireeye_1","title":"FireEye","text":"<p>Parses data from FireEye MAS appliance.</p> <p>Module: <code>intelmq.bots.parsers.fireeye.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#fraunhofer-dga","title":"Fraunhofer DGA","text":"<p>Parses data from Fraunhofer DGA feed.</p> <p>Module: <code>intelmq.bots.parsers.fraunhofer.parser_dga</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#generic-csv","title":"Generic CSV","text":"<p>Parses CSV data.</p> <p>Lines starting with <code>#</code> are skipped. Headers won't be interpreted.</p> <p>Module: <code>intelmq.bots.parsers.generic.parser_csv</code></p> <p>Parameters</p> <p><code>columns</code></p> <p>(required, string/array of strings) A list of strings or a string of comma-separated values with field names. The names must match the IntelMQ Data Format field names. Empty column specifications and columns named <code>__IGNORE__</code> are ignored. E.g.</p> <pre><code>columns:\n  - \"source.ip\"\n  - \"source.fqdn\"\n  - \"extra.http_host_header\"\n  - \"__IGNORE__\"\n</code></pre> <p>is equivalent to:</p> <pre><code>columns: \"source.ip,source.fqdn,extra.http_host_header,__IGNORE__\"\n</code></pre> <p>The fourth column is not used in this example.</p> <p>It is possible to specify multiple columns using the <code>|</code> character. E.g.</p> <pre><code>columns:\n  - \"source.url|source.fqdn|source.ip\"\n  - \"source.fqdn\"\n  - \"extra.http_host_header\"\n  - \"__IGNORE__\"\n</code></pre> <p>First, the bot will try to parse the value as URL, if it fails, it will try to parse it as FQDN, if that fails, it will try to parse it as IP, if that fails, an error will be raised. Some use cases:</p> <ul> <li>Mixed data set, e.g. URL/FQDN/IP/NETMASK:</li> </ul> <pre><code>columns:\n  - \"source.url|source.fqdn|source.ip|source.network\"\n</code></pre> <ul> <li>Parse a value and ignore if it fails:</li> </ul> <pre><code>columns:\n  - \"source.url|__IGNORE__\"\n</code></pre> <p><code>column_regex_search</code></p> <p>(optional, object) A dictionary mapping field names (as given per the columns parameter) to regular expression. The field is evaluated using <code>re.search</code>. Eg. to get the ASN out of <code>AS1234</code> use: <code>{\"source.asn\": \"[0-9]*\"}</code>. Make sure to properly escape any backslashes in your regular expression (see also this issue).</p> <p><code>compose_fields</code></p> <p>(optional, object) Compose fields from multiple columns, e.g. with data like this:</p> <pre><code># Host,Path\nexample.com,/foo/\nexample.net,/bar/\n</code></pre> <p>Using this parameter:</p> <pre><code>compose_fields:\n  source.url: \"http://{0}{1}\"\n</code></pre> <p>You get:</p> <pre><code>http://example.com/foo/\nhttp://example.net/bar/\n</code></pre> <p>in the respective <code>source.url</code> fields. The value in the dictionary mapping is formatted whereas the columns are available with their index.</p> <p><code>default_url_protocol</code></p> <p>(optional, string) For URLs you can give a default protocol which will be prepended to the data. Defaults to null.</p> <p><code>delimiter</code></p> <p>(optional, string) Character used for columns separation. Defaults to <code>,</code> (comma).</p> <p><code>skip_header</code></p> <p>(optional, boolean/integer) Whether to skip the first N lines of the input (True -&gt; 1, False -&gt; 0). Lines starting with <code>#</code> will be skipped additionally, make sure you do not skip more lines than needed!</p> <p><code>time_format</code></p> <p>(optional, string) Allowed values: <code>timestamp</code>, <code>windows_nt</code> or <code>epoch_millis</code>. When <code>null</code> then fuzzy time parsing is used. Defaults to null.</p> <p><code>type</code></p> <p>(optional, string) Set the <code>classification.type</code> statically. Deprecated in favour of <code>default_fields</code> . Will be removed in IntelMQ 4.0.0.</p> <p><code>data_type</code></p> <p>(optional, object) Sets the data of specific type, currently only <code>json</code> is a supported value.</p> <p>Example:</p> <pre><code>columns:\n  - source.ip\n  - source.url\n  - extra.tags\ndata_type:\n  extra.tags: json\n</code></pre> <p>It will ensure that <code>extra.tags</code> is treated as JSON.</p> <p><code>filter_text</code></p> <p>(optional, string) Only process the lines containing or not containing specified text. It is expected to be used in conjunction with <code>filter_type</code>.</p> <p><code>filter_type</code></p> <p>(optional, string) Allowed values: <code>whitelist</code> or <code>blacklist</code>. When <code>whitelist</code> is used, only lines containing the text specified in <code>filter_text</code> option will be processed. When <code>blacklist</code> is used, only lines NOT containing the text will be processed.</p> <p>Example (processing ipset format files):</p> <pre><code>filter_text: 'ipset add '\nfilter_type: whitelist\ncolumns:\n  - __IGNORE__\n  - __IGNORE__\n  - __IGNORE__\n  - source.ip\n</code></pre> <p><code>type_translation</code></p> <p>(optional, object) If the source does have a field with information for <code>classification.type</code>, but it does not correspond to IntelMQ's types, you can map them to the correct ones. The <code>type_translation</code> field can hold a dictionary, or a string with a JSON dictionary which maps the feed's values to IntelMQ's.</p> <p>Example:</p> <pre><code>type_translation:\n  malware_download: \"malware-distribution\"\n</code></pre> <p><code>columns_required</code></p> <p>(optional, array of booleans) An array of true/false for each column. By default, it is true for every column.</p>"},{"location":"user/bots/#github-feed","title":"Github Feed","text":"<p>Parses data publicly available on GitHub (should receive from <code>github_api</code> collector).</p> <p>Module: <code>intelmq.bots.parsers.github_feed.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#have-i-been-pwned-callback","title":"Have I Been Pwned Callback","text":"<p>Parsers data from the callback of Have I Been Pwned Enterprise Subscription.</p> <p>Parses breaches and pastes and creates one event per e-mail address. The e-mail address is stored in <code>source.account</code> . <code>classification.type</code> is <code>leak</code> and <code>classification.identifier</code> is <code>breach</code> or <code>paste</code>.</p> <p>Module: <code>intelmq.bots.parsers.hibp.parser_callback</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#html-table","title":"HTML Table","text":"<p>Parses tables in HTML documents.</p> <p>Module: <code>intelmq.bots.parsers.html_table.parser</code></p> <p>Parameters:</p> <p>(required, string/array of strings) A list of strings or a string of comma-separated values with field names. The names must match the IntelMQ Data Format field names. Empty column specifications and columns named <code>__IGNORE__</code> are ignored. E.g.</p> <pre><code>columns:\n  - \"source.ip\"\n  - \"source.fqdn\"\n  - \"extra.http_host_header\"\n  - \"__IGNORE__\"\n</code></pre> <p>is equivalent to:</p> <pre><code>columns: \"source.ip,source.fqdn,extra.http_host_header,__IGNORE__\"\n</code></pre> <p>The fourth column is not used in this example.</p> <p>It is possible to specify multiple columns using the <code>|</code> character. E.g.</p> <pre><code>columns:\n  - \"source.url|source.fqdn|source.ip\"\n  - \"source.fqdn\"\n  - \"extra.http_host_header\"\n  - \"__IGNORE__\"\n</code></pre> <p>First, the bot will try to parse the value as URL, if it fails, it will try to parse it as FQDN, if that fails, it will try to parse it as IP, if that fails, an error will be raised. Some use cases:</p> <ul> <li>Mixed data set, e.g. URL/FQDN/IP/NETMASK:</li> </ul> <pre><code>columns:\n  - \"source.url|source.fqdn|source.ip|source.network\"\n</code></pre> <ul> <li>Parse a value and ignore if it fails:</li> </ul> <pre><code>columns:\n  - \"source.url|__IGNORE__\"\n</code></pre> <p><code>ignore_values</code></p> <p>(optional, string/array of strings) A list of strings or a string of comma-separated values which are ignored when encountered.</p> <p>Example:</p> <pre><code>ignore_values:\n  - \"\"\n  - \"unknown\"\n  - \"Not listed\"\n</code></pre> <p>The following configuration will lead to assigning all values to <code>malware.name</code> and <code>extra.SBL</code> except <code>unknown</code> and <code>Not listed</code> respectively.</p> <pre><code>columns:\n  - source.url\n  - malware.name\n  - extra.SBL\nignore_values:\n  - ''\n  - unknown\n  - Not listed\n</code></pre> <p>Parameters <code>columns</code> and <code>ignore_values</code> must have same length!</p> <p><code>attribute_name</code></p> <p>(optional, string) Filtering table with table attributes. To be used in conjunction with <code>attribute_value</code>. E.g. <code>class</code>, <code>id</code>, <code>style</code>.</p> <p><code>attribute_value</code></p> <p>(optional, string) To filter all tables with attribute <code>class='details'</code> use</p> <pre><code>attribute_name: \"class\"\nattribute_value: \"details\"\n</code></pre> <p><code>table_index</code></p> <p>(optional, integer) Index of the table if multiple tables present. If <code>attribute_name</code> and <code>attribute_value</code> given, index according to tables remaining after filtering with table attribute. Defaults to 0.</p> <p><code>split_column</code></p> <p>(optional, ) Padded column to be split to get values, to be used in conjunction with <code>split_separator</code> and <code>split_index</code>, optional.</p> <p><code>split_separator</code></p> <p>(optional, string) Delimiter string for padded column.</p> <p><code>split_index</code></p> <p>(optional, integer) Index of unpadded string in returned list from splitting <code>split_column</code> with <code>split_separator</code> as delimiter string. Defaults to 0.</p> <p>Example:</p> <pre><code>split_column: \"source.fqdn\"\nsplit_separator: \" \"\nsplit_index: 1\n</code></pre> <p>With above configuration, column corresponding to <code>source.fqdn</code> with value <code>D lingvaworld.ru</code> will be assigned as <code>source.fqdn: lingvaworld.ru</code>.</p> <p><code>skip_table_head</code></p> <p>(optional, boolean) Skip the first row of the table. Defaults to true.</p> <p><code>default_url_protocol</code></p> <p>(optional, string) For URLs you can give a default protocol which will be pretended to the data. Defaults to <code>http://</code>.</p> <p><code>time_format</code></p> <p>(optional, string) Allowed values: <code>timestamp</code>, <code>windows_nt</code> or <code>epoch_millis</code>. When <code>null</code> then fuzzy time parsing is used. Defaults to null.</p> <p><code>html_parser</code></p> <p>(optional, string) The HTML parser to use. Allowed values: <code>html.parser</code> or <code>lxml</code> (see also https://www.crummy.com/software/BeautifulSoup/bs4/doc/). Defaults to <code>html.parser</code>.</p>"},{"location":"user/bots/#json-todo","title":"JSON (TODO)","text":"<p>TODO</p> <p>Module: <code>intelmq.bots.parsers.json.parser</code></p>"},{"location":"user/bots/#keyvalue-parser","title":"Key=Value Parser","text":"<p>Parses text lines in key=value format, for example FortiGate firewall logs.</p> <p>Parsing limitations</p> <p>The input must not have (quoted) occurrences of the separator in the values. For example, this is not parsable (with space as separator):</p> <pre><code>key=\"long value\" key2=\"other value\"\n</code></pre> <p>In firewall logs like FortiGate, this does not occur. These logs usually look like:</p> <pre><code>srcip=192.0.2.1 srcmac=\"00:00:5e:00:17:17\"\n</code></pre> <p>Module: <code>intelmq.bots.parsers.key_value.parser</code></p> <p>Parameters:</p> <p><code>pair_separator</code></p> <p>(optional, string) String separating key=value pairs. Defaults to space.</p> <p><code>kv_separator</code></p> <p>(optional, string) String separating the key and the value. Defaults to <code>=</code>.</p> <p><code>keys</code></p> <p>(optional, object) Mapping of original key names to IntelMQ Data Format.</p> <p>Example:</p> <pre><code>keys:\n  srcip: source.ip\n  dstip: destination.ip\n</code></pre> <p>The value mapped to <code>time.source</code> is parsed. If the value is numeric, it is interpreted. Otherwise, or if it fails, it is parsed fuzzy with dateutil. If the value cannot be parsed, a warning is logged per line.</p> <p><code>strip_quotes</code></p> <p>(optional, boolean) Whether to remove opening and closing quotes from values. Defaults to true.</p>"},{"location":"user/bots/#malwarepatrol","title":"MalwarePatrol","text":"<p>Parses data from MalwarePatrol feed.</p> <p>Module: <code>intelmq.bots.parsers.malwarepatrol.parser_dansguardian</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#malwareurl","title":"MalwareURL","text":"<p>Parses data from MalwareURL feed.</p> <p>Module: <code>intelmq.bots.parsers.malwareurl.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#mcafee-advanced-threat-defense-file","title":"McAfee Advanced Threat Defense File","text":"<p>Parse IoCs from McAfee Advanced Threat Defense reports (hash, IP, URL).</p> <p>Module: <code>intelmq.bots.parsers.mcafee.parser_atd</code></p> <p>Parameters:</p> <p><code>verdict_severity</code></p> <p>(optional, integer) Minimum report severity to parse. Defaults to 4.</p>"},{"location":"user/bots/#microsoft-ctip","title":"Microsoft CTIP","text":"<p>Parses data from the Microsoft CTIP feed.</p> <p>Can parse the JSON format provided by the Interflow interface (lists of dictionaries) as well as the format provided by the Azure interface (one dictionary per line). The provided data differs between the two formats/providers.</p> <p>The parser is capable of parsing both feeds:</p> <ul> <li><code>ctip-c2</code></li> <li><code>ctip-infected-summary</code> The feeds only differ by a few fields, not in the format.</li> </ul> <p>The feeds contain a field called <code>Payload</code> which is nearly always a base64 encoded JSON structure. If decoding works, the contained fields are saved as <code>extra.payload.*</code>, otherwise the field is saved as <code>extra.payload.text</code>.</p> <p>Module: <code>intelmq.bots.parsers.microsoft.parser_ctip</code></p> <p>Parameters:</p> <p><code>overwrite</code></p> <p>(optional, boolean) Overwrite an existing field <code>feed.name</code> with <code>DataFeed</code> of the source. Defaults to false.</p>"},{"location":"user/bots/#misp","title":"MISP","text":"<p>Parses MISP events.</p> <p>MISP events collected by the MISPCollectorBot are passed to this parser for processing. Supported MISP event categories and attribute types are defined in the <code>SUPPORTED_MISP_CATEGORIES</code> and <code>MISP_TYPE_MAPPING</code> class constants.</p> <p>Module: <code>intelmq.bots.parsers.misp.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#n6","title":"N6","text":"<p>Parses n6 data into IntelMQ format.</p> <p>Test messages are ignored, this is logged with debug logging level. Also contains a mapping for the classification ( results in taxonomy, type and identifier). The <code>name</code> field is normally used as <code>malware.name</code>, if that fails due to disallowed characters, these characters are removed and the original value is saved as <code>event_description.text</code>. This can happen for names like <code>further iocs: text with invalid ' char</code>.</p> <p>If a n6 message contains multiple IP addresses, multiple events are generated, resulting in events only differing in the address information.</p> <p>Module: <code>intelmq.bots.parsers.n6.parser_n6stomp</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#openphish-free","title":"OpenPhish Free","text":"<p>Parses data from OpenPhish Free feed.</p> <p>Module: <code>intelmq.bots.parsers.openphish.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#openphish-premium","title":"OpenPhish Premium","text":"<p>Parses data from OpenPhish Premium feed (JSON).</p> <p>Module: <code>intelmq.bots.parsers.openphish.parser_commercial</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#phishtank","title":"Phishtank","text":"<p>Parses data from Phishtank feed.</p> <p>Module: <code>intelmq.bots.parsers.phishtank.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#shadowserver","title":"Shadowserver","text":"<p>The Shadowserver parser operates on CSV formatted data.</p> <p>How this bot works?</p> <p>There are two possibilities for the bot to determine which report type the data belongs to in order to determine the correct mapping of the columns:</p> <ol> <li> <p>Automatic report type detection</p> <p>Since IntelMQ version 2.1 the parser can detect the feed based on metadata provided by the collector.</p> <p>When processing a report, this bot takes <code>extra.file_name</code> from the report and looks in <code>config.py</code> how the report should be parsed. If this lookup is not possible, and the <code>feedname</code> is not given as parameter, the feed cannot be parsed.</p> <p>The field <code>extra.file_name</code> has the following structure: <code>%Y-%m-%d-${report_name}[-suffix].csv</code> where the optional suffix can be something like <code>country-geo</code>. For example, some possible filenames are <code>2019-01-01-scan_http-country-geo.csv</code> or <code>2019-01-01-scan_tftp.csv</code>. The important part is the <code>report_name</code>, between the date and the suffix. Since version 2.1.2 the date in the filename is optional, so filenames like <code>scan_tftp.csv</code> are also detected.</p> </li> <li> <p>Fixed report type</p> <p>If the method above is not possible and for upgraded instances, the report type can be set with the <code>feedname</code> parameter. Report type is derived from the subject of Shadowserver e-mails. A list of possible values of the <code>feedname</code> parameter can be found in the table below in the column \"Report Type\".</p> </li> </ol> <p>Module:</p> <p><code>intelmq.bots.parsers.shadowserver.parser</code></p> <p>Parameters:</p> <p><code>feedname</code></p> <p>(optional, string) Name of the Shadowserver report. The value for each report type can be found in the schema <code>feed_name</code> field.</p> <p>For example using <code>curl -s https://interchange.shadowserver.org/intelmq/v1/schema | jq .[].feed_name</code>.</p> <p><code>overwrite</code></p> <p>(optional, boolean) If an existing <code>feed.name</code> should be overwritten.</p> <p>** <code>auto_update</code>**</p> <p>(optional, boolean) Enable automatic schema download.</p> <p>Supported reports:</p> <p>The report configuration is stored in a <code>shadowserver-schema.json</code> file downloaded from https://interchange.shadowserver.org/intelmq/v1/schema.</p> <p>The parser will attempt to download a schema update on startup when the auto_update option is enabled.</p> <p>Schema downloads can also be scheduled as a cron job for the <code>intelmq</code> user:</p> <pre><code>  02  01 *   *   *     intelmq.bots.parsers.shadowserver.parser --update-schema\n</code></pre> <p>For air-gapped systems automation will be required to download and copy the file to VAR_STATE_PATH/shadowserver-schema.json.</p> <p>The parser will automatically reload the configuration when the file changes.</p> <p>Schema contract</p> <p>Once set in the schema, the <code>classification.identifier</code>, <code>classification.taxonomy</code>, and <code>classification.type</code> fields will remain static for a specific report.</p> <p>The schema revision history is maintained at https://github.com/The-Shadowserver-Foundation/report_schema/.</p> <p>Sample configuration</p> <pre><code>  shadowserver-parser:\n    bot_id: shadowserver-parser\n    name: Shadowserver Parser\n    enabled: true\n    group: Parser\n    groupname: parsers\n    module: intelmq.bots.parsers.shadowserver.parser\n    parameters:\n      destination_queues:\n        _default: [file-output-queue]\n      auto_update: true\n    run_mode: continuous\n</code></pre>"},{"location":"user/bots/#shodan","title":"Shodan","text":"<p>Parses data from Shodan (search, stream etc).</p> <p>The parser is by far not complete as there are a lot of fields in a big nested structure. There is a minimal mode available which only parses the important/most useful fields and also saves everything in <code>extra.shodan</code> keeping the original structure. When not using the minimal mode if may be useful to ignore errors as many parsing errors can happen with the incomplete mapping.</p> <p>Module: <code>intelmq.bots.parsers.shodan.parser</code></p> <p>Parameters:</p> <p><code>ignore_errors</code></p> <p>(optional, boolean) Defaults to true.</p> <p><code>minimal_mode</code></p> <p>(optional, boolean) Defaults to false.</p>"},{"location":"user/bots/#spamhaus-drop","title":"Spamhaus DROP","text":"<p>Parses data from Spamhaus DROP feed.</p> <p>Module: <code>intelmq.bots.parsers.spamhaus.parser_drop</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#spamhaus-cert","title":"Spamhaus CERT","text":"<p>Parses data from Spamhaus CERT feed.</p> <p>Module: <code>intelmq.bots.parsers.spamhaus.parser_cert</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#surbl","title":"Surbl","text":"<p>Parses data from surbl feed.</p> <p>Module: <code>intelmq.bots.parsers.surbl.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#threatminer","title":"Threatminer","text":"<p>Parses data from Threatminer feed.</p> <p>Module: <code>intelmq.bots.parsers.threatminer.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#turris","title":"Turris","text":"<p>Parses data from Turris Greylist feed.</p> <p>Module: <code>intelmq.bots.parsers.turris.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#twitter","title":"Twitter","text":"<p>Extracts URLs from text, fuzzy, aimed at parsing tweets.</p> <p>Module: <code>intelmq.bots.parsers.twitter.parser</code></p> <p>Parameters:</p> <p><code>domain_whitelist</code></p> <p>(optional, array of strings) domains to be filtered out</p> <p><code>substitutions</code></p> <p>(optional, string) Semicolon delimited list of even length of pairs of substitutions (for example: <code>.;.;,;.</code> substitutes <code>.</code> for <code>.</code> and <code>,</code> for <code>.</code>).</p> <p><code>classification_type</code></p> <p>(optional, string) Statically set <code>classification.type</code>.</p> <p><code>default_scheme</code></p> <p>(optional, string) Default scheme for URLs if not given. See also the next section.</p> <p>Default scheme</p> <p>The dependency <code>url-normalize</code> changed it's behavior in version 1.4.0 from using <code>http://</code> as default scheme to <code>https://</code>. Version 1.4.1 added the possibility to specify it. Thus you can only use the <code>default_scheme</code> parameter with a current version of this library &gt;= 1.4.1, with 1.4.0 you will always get <code>https://</code> as default scheme and for older versions &lt; 1.4.0 <code>http://</code> is used.</p> <p>This does not affect URLs which already include the scheme.</p>"},{"location":"user/bots/#vxvault","title":"VxVault","text":"<p>Parses data from VxVault feed.</p> <p>Module: <code>intelmq.bots.parsers.vxvault.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#zoneh","title":"ZoneH","text":"<p>Parses data from ZoneH.</p> <p>This bot is designed to consume defacement reports from zone-h.org. It expects fields normally present in CSV files distributed by email.</p> <p>Module: <code>intelmq.bots.parsers.zoneh.parser</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#expert-bots","title":"Expert Bots","text":"<p>Expert bots are used for enriching, filtering and/or other data manipulation.</p>"},{"location":"user/bots/#abusix","title":"Abusix","text":"<p>This bot adds <code>source.abuse_contact</code> and <code>destination.abuse_contact</code> e-mail addresses. They are obtained via DNS TXT queries to Abusix servers.</p> <p>Requirements</p> <p>This bot can optionally use the python module querycontacts by Abusix itself: https://pypi.org/project/querycontacts/</p> <pre><code>pip3 install querycontacts\n</code></pre> <p>If the package is not installed, our own routines are used.</p> <p>Module: <code>intelmq.bots.experts.abusix.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p>No additional parameters.</p>"},{"location":"user/bots/#aggregate","title":"Aggregate","text":"<p>Aggregates events based upon given fields &amp; timespan.</p> <p>Define specific fields to filter incoming events and aggregate them. Also set the timespan you want the events to get aggregated.</p> <p>The \"cleanup\" procedure, sends out the aggregated events or drops them based upon the given threshold value. It is called on every incoming message and on the bot's initialization. If you're potentially running on low traffic ( no incoming events within the given timestamp ) it is recommended to reload or restart the bot via cronjob each 30 minutes (adapt to your configured timespan). Otherwise you might loose information.</p> <p>I. e.:</p> <pre><code>crontab -e\n\n0,30 * * * * intelmqctl reload my-aggregate-bot\n</code></pre> <p>For reloading/restarting please check the <code>intelmqctl</code> documentation.</p> <p>Module: <code>intelmq.bots.experts.aggregate.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p>Warning</p> <p><code>redis_cache_ttl</code> is not used at it would result in data loss.</p> <p><code>fields</code></p> <p>(required, string) Given fields which are used to aggregate like <code>classification.type</code>, <code>classification.identifier</code>.</p> <p><code>threshold</code></p> <p>(required, integer) If the aggregated event is lower than the given threshold after the timespan, the event will get dropped.</p> <p><code>timespan</code></p> <p>(required, string) Timespan to aggregate events during the given time. I. e. <code>1 hour</code></p>"},{"location":"user/bots/#asn-lookup","title":"ASN Lookup","text":"<p>This bot uses an offline database to add <code>source.asn</code> and <code>destination.asn</code> based on the respective IP address.</p> <p>Requirements</p> <p>Install <code>pyasn</code> module.</p> <pre><code>pip3 install pyasn\n</code></pre> <p>Module: <code>intelmq.bots.experts.asn_lookup.expert</code></p> <p>Parameters:</p> <p><code>database</code></p> <p>(required, string) Path to the downloaded database.</p> <p>Database</p> <p>Use this command to create/update the database and reload the bot:</p> <pre><code>intelmq.bots.experts.asn_lookup.expert --update-database\n</code></pre> <p>The database is fetched from routeviews.org and licensed under the Creative Commons Attribution 4.0 International license (see the routeviews FAQ).</p>"},{"location":"user/bots/#csv-converter","title":"CSV Converter","text":"<p>Converts an event to CSV format, saved in the <code>output</code> field.</p> <p>To use the CSV-converted data in an output bot - for example in a file output, use the configuration parameter <code>single_key</code> of the output bot and set it to <code>output</code>.</p> <p>Module: <code>intelmq.bots.experts.csv_converter.expert</code></p> <p>Parameters:</p> <p><code>delimiter</code></p> <p>(optional, string) Defaults to <code>,</code>.</p> <p><code>fieldnames</code></p> <p>(required, string) Comma-separated list of field names, e.g. <code>\"time.source,classification.type,source.ip\"</code>.</p>"},{"location":"user/bots/#team-cymru-whois","title":"Team Cymru Whois","text":"<p>This bot adds geolocation, ASN and BGP prefix based on IP address.</p> <p>Public documentation: https://www.team-cymru.com/IP-ASN-mapping.html#dns</p> <p>Module: <code>intelmq.bots.experts.cymru_whois.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to true.</p>"},{"location":"user/bots/#remove-affix","title":"Remove Affix","text":"<p>Remove part of string from string fields, example: <code>www.</code> from <code>source.fqdn</code>.</p> <p>Module: <code>intelmq.bots.experts.remove_affix.expert</code></p> <p>Parameters:</p> <p><code>remove_prefix</code></p> <p>(optional, boolean) True - cut from start, False - cut from end. Defaults to true.</p> <p><code>affix</code></p> <p>(required, string) example 'www.'</p> <p><code>field</code></p> <p>(required, string) Which field to modify. 'source.fqdn'</p>"},{"location":"user/bots/#domain-suffix","title":"Domain Suffix","text":"<p>This bots uses an offline database to add the public suffix to the event, derived by a domain. See or information on the public suffix list: https://publicsuffix.org/list/. Only rules for ICANN domains are processed. The list can (and should) contain Unicode data, punycode conversion is done during reading.</p> <p>Note that the public suffix is not the same as the top level domain (TLD). E.g. <code>co.uk</code> is a public suffix, but the TLD is <code>uk</code>. Privately registered suffixes (such as <code>blogspot.co.at</code>) which are part of the public suffix list too, are ignored.</p> <p>Rule processing</p> <p>A short summary how the rules are processed:</p> <p>The simple ones:</p> <pre><code>com\nat\ngv.at\n</code></pre> <p><code>example.com</code> leads to <code>com</code>, <code>example.gv.at</code> leads to <code>gv.at</code>.</p> <p>Wildcards:</p> <pre><code>*.example.com\n</code></pre> <p><code>www.example.com</code> leads to <code>www.example.com</code>.</p> <p>And additionally the exceptions, together with the above wildcard rule:</p> <pre><code>!www.example.com\n</code></pre> <p><code>www.example.com</code> does now not lead to <code>www.example.com</code>, but to <code>example.com</code>.</p> <p>Module: <code>intelmq.bots.experts.domain_suffix.expert</code></p> <p>Parameters:</p> <p><code>field</code></p> <p>(required, string) Allowed values: <code>fqdn</code> or <code>reverse_dns</code>.</p> <p><code>suffix_file</code></p> <p>(required, string) path to the suffix file</p> <p>Database</p> <p>Use this command to create/update the database and reload the bot:</p> <pre><code>intelmq.bots.experts.domain_suffix.expert --update-database\n</code></pre>"},{"location":"user/bots/#domain-valid","title":"Domain Valid","text":"<p>Checks if a domain is valid by performing multiple validity checks (see below).</p> <p>If the field given in <code>domain_field</code> does not exist in the event, the event is dropped. If the domain contains underscores (<code>_</code>), the event is dropped. If the domain is not valid according to the validators library, the event is dropped. If the domain's last part (the TLD) is not in the TLD-list configured by parameter <code>tlds_domains_list</code>, the field is dropped. Latest TLD list: https://data.iana.org/TLD/</p> <p>Module: <code>intelmq.bots.experts.domain_valid.expert</code></p> <p>Parameters:</p> <p><code>domain_field</code></p> <p>(required, string) The name of the field to be validated.</p> <p><code>tlds_domains_list</code></p> <p>(required, string) Path to a local file with all valid TLDs. Defaults to <code>/opt/intelmq/var/lib/bots/domain_valid/tlds-alpha-by-domain.txt</code></p>"},{"location":"user/bots/#deduplicator","title":"Deduplicator","text":"<p>Bot responsible for dropping duplicate events. Deduplication can be performed based on an arbitrary set of fields.</p> <p>Module: <code>intelmq.bots.experts.deduplicator.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p><code>bypass</code></p> <p>(optional, boolean) Whether to bypass the deduplicator or not. When set to true, messages will not be deduplicated. Defaults to false.</p> <p><code>filter_type</code></p> <p>(optional, string) Allowed values: <code>blacklist</code> or <code>whitelist</code>. The filter type will be used to define how Deduplicator bot will interpret the parameter <code>filter_keys</code> in order to decide whether an event has already been seen or not, i.e., duplicated event or a completely new event.</p> <ul> <li><code>whitelist</code> configuration: only the keys listed in <code>filter_keys</code> will be considered to verify if an event is   duplicated or not.</li> <li><code>blacklist</code> configuration: all keys except those in <code>filter_keys</code> will be considered to verify if an event is   duplicated or not.</li> </ul> <p><code>filter_keys</code></p> <p>(optional, string) string with multiple keys separated by comma. Please note that <code>time.observation</code> key will not be considered even if defined, because the system always ignore that key.</p> <p>When using a whitelist field pattern and a small number of fields (keys), it becomes more important, that these fields exist in the events themselves. If a field does not exist, but is part of the hashing/deduplication, this field will be ignored. If such events should not get deduplicated, you need to filter them out before the deduplication process, e.g. using a sieve expert. See also this discussion thread on the mailing-list.</p> <p>Configuration Example</p> <p>Example 1</p> <p>The bot with this configuration will detect duplication only based on <code>source.ip</code> and <code>destination.ip</code> keys.</p> <pre><code>parameters:\n  redis_cache_db: 6\n  redis_cache_host: \"127.0.0.1\"\n  redis_cache_password: null\n  redis_cache_port: 6379\n  redis_cache_ttl: 86400\n  filter_type: \"whitelist\"\n  filter_keys: \"source.ip,destination.ip\"\n</code></pre> <p>Example 2</p> <p>The bot with this configuration will detect duplication based on all keys, except <code>source.ip</code> and <code>destination.ip</code> keys.</p> <pre><code>parameters:\n  redis_cache_db: 6\n  redis_cache_host: \"127.0.0.1\"\n  redis_cache_password: null\n  redis_cache_port: 6379\n  redis_cache_ttl: 86400\n  filter_type: \"blacklist\"\n  filter_keys: \"source.ip,destination.ip\"\n</code></pre> <p>Flushing the cache</p> <p>To flush the deduplicator's cache, you can use the <code>redis-cli</code> tool. Enter the database used by the bot and submit the <code>flushdb</code> command:</p> <pre><code>redis-cli -n 6\nflushdb\n</code></pre>"},{"location":"user/bots/#do-portal","title":"DO Portal","text":"<p>The DO portal retrieves the contact information from a DO portal instance: http://github.com/certat/do-portal/</p> <p>Module: <code>intelmq.bots.experts.do_portal.expert</code></p> <p>Parameters:</p> <p><code>mode</code></p> <p>(required, string) Allowed values: <code>replace</code> or <code>append</code>. How to handle new abuse contacts in case there are existing ones.</p> <p><code>portal_url</code></p> <p>(required, string) The URL to the portal, without the API-path. The used URL is <code>$portal_url + '/api/1.0/ripe/contact?cidr=%s'</code>.</p> <p><code>portal_api_key</code></p> <p>(required, string) The API key of the user to be used. Must have sufficient privileges.</p>"},{"location":"user/bots/#field-reducer","title":"Field Reducer","text":"<p>The field reducer bot is capable of removing fields from events.</p> <p>Module: <code>intelmq.bots.experts.field_reducer.expert</code></p> <p>Parameters:</p> <p><code>type</code></p> <p>(required, string) Allowed values: <code>whitelist</code> or <code>blacklist</code>. When <code>whitelist</code> is set, tnly the fields in <code>keys</code> will passed along. When <code>blacklist</code> is set then the fields in <code>keys</code> will be removed from events.</p> <p><code>keys</code></p> <p>(required, array of strings) Can be an array of field names or a string with a comma-separated list of field names.</p>"},{"location":"user/bots/#filter","title":"Filter","text":"<p>The filter bot is capable of filtering specific events.</p> <p>A simple filter for messages (drop or pass) based on a exact string comparison or regular expression.</p> <p>Module: <code>intelmq.bots.experts.filter.expert</code></p> <p>Parameters:</p> <p>Parameters for filtering with key/value attributes</p> <p><code>filter_key</code></p> <p>() - key from data format</p> <p><code>filter_value</code></p> <p>() - value for the key</p> <p><code>filter_action</code></p> <p>() - action when a message match to the criteria (possible actions: keep/drop)</p> <p><code>filter_regex</code></p> <p>() - attribute determines if the <code>filter_value</code> shall be treated as regular expression or not.</p> <p>If this attribute is not empty (can be <code>true</code>, <code>yes</code> or whatever), the bot uses python's <code>`re.search</code> &lt;https://docs.python.org/3/library/re.html#re.search&gt;`_ function to evaluate the filter with regular expressions. If this attribute is empty or evaluates to false, an exact string comparison is performed. A check on string * inequality can be achieved with the usage of Paths* described below.</p> <p>Parameters for time based filtering</p> <p><code>not_before</code></p> <p>(optional, string) Events before this time will be dropped. Example: <code>1 week</code>.</p> <p><code>not_after</code></p> <p>(optional, string) - Events after this time will be dropped.</p> <p>Both parameters accept string values describing absolute or relative time:</p> <ul> <li>absolute</li> <li>basically anything parseable by datetime parser, eg.</li> </ul> <pre><code>2015-09-12T06:22:11+00:00\n</code></pre> <p><code>time.source</code></p> <p>(optional, string) Taken from the event will be compared to this value to decide the filter behavior.</p> <ul> <li>relative</li> <li>accepted string formatted like this \" \", where epoch could be any of following strings (could   optionally end with trailing 's'): hour, day, week, month, year <li>time.source taken from the event will be compared to the value (now - relative) to decide the filter behavior</li> <p>Examples of time filter definition</p> <ul> <li><code>not_before: \"2015-09-12T06:22:11+00:00\"</code> - events older than the specified time will be dropped</li> <li><code>not_after: \"6 months\"</code> - just events older than 6 months will be passed through the pipeline</li> </ul> <p>Possible paths</p> <ul> <li><code>_default</code>: default path, according to the configuration</li> <li><code>action_other</code>: Negation of the default path</li> <li><code>filter_match</code>: For all events the filter matched on</li> <li><code>filter_no_match</code>: For all events the filter does not match</li> </ul> action match _default action_other filter_match filter_no_match keep \u2713 \u2713 \u2717 \u2713 \u2717 keep \u2717 \u2717 \u2713 \u2717 \u2713 drop \u2713 \u2717 \u2713 \u2713 \u2717 drop \u2717 \u2713 \u2717 \u2717 \u2713 <p>In <code>DEBUG</code> logging level, one can see that the message is sent to both matching paths, also if one of the paths is not configured. Of course the message is only delivered to the configured paths.</p>"},{"location":"user/bots/#format-field","title":"Format Field","text":"<p>String method operations on column values.</p> <p>Module: <code>intelmq.bots.experts.format_field.expert</code></p> <p>Parameters:</p> <p>Parameters for stripping chars</p> <p><code>strip_columns</code> (optional, string/array of strings) A list of strings or a string of comma-separated values with field names. The names must match the IntelMQ Data Format field names.</p> <p>For example:</p> <pre><code>columns:\n  - malware.name\n  - extra.tags\n</code></pre> <p>is equivalent to:</p> <pre><code>columns: \"malware.name,extra.tags\"\n</code></pre> <p><code>strip_chars</code></p> <p>(optional, string) Set of characters to remove as leading/trailing characters. Defaults to space.</p> <p>Parameters for replacing chars</p> <p><code>replace_column</code></p> <p>() key from data format</p> <p><code>old_value</code></p> <p>() the string to search for</p> <p><code>new_value</code></p> <p>() the string to replace the old value with</p> <p><code>replace_count</code> () number specifying how many occurrences of the old value you want to replace(default: [1])</p> <p>Parameters for splitting string to list of string</p> <p><code>split_column</code></p> <p>() key from data format</p> <p><code>split_separator</code></p> <p>() specifies the separator to use when splitting the string(default: <code>,</code>)</p> <p>Order of operation: <code>strip -&gt; replace -&gt; split</code>. These three methods can be combined such as first strip and then split.</p>"},{"location":"user/bots/#generic-db-lookup","title":"Generic DB Lookup","text":"<p>This bot is capable for enriching intelmq events by lookups to a database. Currently only PostgreSQL and SQLite are supported.</p> <p>If more than one result is returned, a ValueError is raised.</p> <p>Module: <code>intelmq.bots.experts.generic_db_lookup.expert</code></p> <p>Parameters:</p> <p>Connection</p> <p><code>engine</code></p> <p>(required, string) Allowed values: <code>postgresql</code> or <code>sqlite</code>.</p> <p><code>database</code></p> <p>(optional, string) Database name or the SQLite filename. Defaults to <code>intelmq</code>.</p> <p><code>table</code></p> <p>(optional, string) Name of the table. Defaults to <code>contacts</code>.</p> <p>PostgreSQL specific parameters</p> <p><code>host</code></p> <p>(optional, string) Hostname of the PostgreSQL server. Defaults to <code>localhost</code>.</p> <p><code>port</code></p> <p>(optional, integer) Port of the PostgreSQL server. Defaults to 5432.</p> <p><code>user</code></p> <p>(optional, string) Username for accessing PostgreSQL. Defaults to <code>intelmq</code>.</p> <p><code>password</code></p> <p>(optional, string) Password for accessing PostgreSQL. Defaults to ?.</p> <p><code>sslmode</code></p> <p>(optional, string) Type of TLS mode to use. Defaults to <code>require</code>.</p> <p>Lookup</p> <p><code>match_fields</code></p> <p>(optional, object) The value is a key-value mapping an arbitrary number IntelMQ field names to table column names. The values are compared with <code>=</code> only. Defaults to <code>source.asn: \"asn\"</code>.</p> <p>Replace fields</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to false.</p> <p><code>replace_fields</code></p> <p>(optional, object) Key-value mapping an arbitrary number of table column names to IntelMQ field names. Defaults to <code>{\"contact\": \"source.abuse_contact\"}</code>.</p>"},{"location":"user/bots/#gethostbyname","title":"Gethostbyname","text":"<p>This bot resolves to IP address (<code>source.ip</code> and <code>destination.ip</code>). Can possibly use also the <code>source.url</code> and <code>destination.url</code> for extracting FQDN.</p> <p>This bot resolves the DNS name (<code>source.fqdn</code> and <code>destination.fqdn</code>) using the <code>gethostbyname</code> syscall to an IP address (<code>source.ip</code> and <code>destination.ip</code>). The following gaierror resolution errors are ignored and treated as if the hostname cannot be resolved:</p> <ul> <li><code>-2</code>/<code>EAI_NONAME</code>: NAME or SERVICE is unknown</li> <li><code>-4</code>/<code>EAI_FAIL</code>: Non-recoverable failure in name res.</li> <li><code>-5</code>/<code>EAI_NODATA</code>: No address associated with NAME.</li> <li><code>-8</code>/<code>EAI_SERVICE</code>: SERVICE not supported for `ai_socktype'.</li> <li><code>-11</code>/<code>EAI_SYSTEM</code>: System error returned in `errno'.</li> </ul> <p>Other errors result in an exception if not ignored by the parameter <code>gaierrors_to_ignore</code>. All gaierrors can be found here: http://www.castaglia.org/proftpd/doc/devel-guide/src/lib/glibc-gai_strerror.c.html</p> <p>Module: <code>intelmq.bots.experts.gethostbyname.expert</code></p> <p>Parameters:</p> <p><code>fallback_to_url</code></p> <p>(optional, boolean) When true and no <code>source.fqdn</code> present, use <code>source.url</code> instead for producing <code>source.ip</code>.</p> <p><code>gaierrors_to_ignore</code></p> <p>(optional, array of integers) Gaierror codes to ignore, e.g. <code>-3</code> for EAI_AGAIN (Temporary failure in name resolution). Only accepts the integer values, not the names.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing <code>source.ip</code> and/or <code>source.destination</code> fields. Defaults to false.</p>"},{"location":"user/bots/#http-status","title":"HTTP Status","text":"<p>The bot fetches the HTTP status for a given URL and saves it in the event.</p> <p>Module: <code>intelmq.bots.experts.http.expert_status</code></p> <p>Parameters:</p> <p><code>field</code></p> <p>(required, string) The name of the field containing the URL to be checked.</p> <p><code>success_status_codes</code></p> <p>(optional, array of integers) An array of success status codes. If this parameter is omitted or the list is empty, successful status codes are the ones between 200 and 400.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing <code>status</code> field. Defaults to false.</p>"},{"location":"user/bots/#http-content","title":"HTTP Content","text":"<p>Fetches an HTTP resource and checks if it contains a specific string.</p> <p>The bot fetches an HTTP resource and checks if it contains a specific string.</p> <p>Module: <code>intelmq.bots.experts.http.expert_content</code></p> <p>Parameters:</p> <p><code>field</code></p> <p>(optional, string) The name of the field containing the URL to be checked. Defaults to <code>source.url</code>.</p> <p><code>needle</code></p> <p>(optional, string) The string that the content available on URL is checked for.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing <code>status</code> field. Defaults to false.</p>"},{"location":"user/bots/#idea-converter","title":"IDEA Converter","text":"<p>Converts the event to IDEA format and saves it as JSON in the field <code>output</code>. All other fields are not modified.</p> <p>Documentation about IDEA: https://idea.cesnet.cz/en/index</p> <p>Module: <code>intelmq.bots.experts.idea.expert</code></p> <p>Parameters:</p> <p><code>test_mode</code></p> <p>(optional, boolean) Adds <code>Test</code> category to mark all outgoing IDEA events as informal (meant to simplify setting up and debugging new IDEA producers). Defaults to true.</p>"},{"location":"user/bots/#jinja2-template","title":"Jinja2 Template","text":"<p>This bot lets you modify the content of your IntelMQ message fields using Jinja2 templates.</p> <p>Documentation about Jinja2 templating language: https://jinja.palletsprojects.com/</p> <p>Module: <code>intelmq.bots.experts.jinja.expert</code></p> <p>Parameters:</p> <p><code>fields</code></p> <p>(required, object) a dict containing as key the name of the field where the result of the Jinja2 template should be written to and as value either a Jinja2 template or a filepath to a Jinja2 template file (starting with <code>file:///</code>). Because the experts decides if it is a filepath based on the value starting with <code>file:///</code> it is not possible to simply write values starting with <code>file:///</code> to fields. The object containing the existing message will be passed to the Jinja2 template with the name <code>msg</code>.</p> <pre><code>fields:\n  output: The provider is {{ msg['feed.provider'] }}!\n  feed.url: \"{{ msg['feed.url'] | upper }}\"\n  extra.somejinjaoutput: file:///etc/intelmq/somejinjatemplate.j2\n</code></pre>"},{"location":"user/bots/#lookyloo","title":"Lookyloo","text":"<p>Lookyloo is a website screenshotting and analysis tool. For more information and installation instructions visit https://www.lookyloo.eu/</p> <p>The bot sends a request for <code>source.url</code> to the configured Lookyloo instance and saves the retrieved website screenshot link in the field <code>screenshot_url</code>. Lookyloo only queues the website for screenshotting, therefore the screenshot may not be directly ready after the bot requested it. The <code>pylookyloo</code> library is required for this bot. The <code>http_user_agent</code> parameter is passed on, but not other HTTP-related parameter like proxies.</p> <p>Events without <code>source.url</code> are ignored.</p> <p>Module: <code>intelmq.bots.experts.lookyloo.expert</code></p> <p>Parameters:</p> <p><code>instance_url</code></p> <p>(required, string) LookyLoo instance to connect to.</p>"},{"location":"user/bots/#maxmind-geoip","title":"MaxMind GeoIP","text":"<p>This bot uses an offline database for adding geolocation information based on the IP address (<code>source.ip</code> and <code>destination.ip</code>).</p> <p>Requirements</p> <p>The bot requires the MaxMind's <code>geoip2</code> Python library, version 2.2.0 has been tested.</p> <p>To download the database a free license key is required. More information can be found at https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases/.</p> <p>Module: <code>intelmq.bots.experts.maxmind_geoip.expert</code></p> <p>Parameters:</p> <p><code>database</code></p> <p>(required, string) Path to the local database file.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to true.</p> <p><code>use_registered</code></p> <p>(optional, boolean) MaxMind has two country ISO codes: One for the physical location of the address and one for the registered location. See also https://github.com/certtools/intelmq/pull/1344 for a short explanation. Defaults to <code>false</code> (backwards-compatibility).</p> <p><code>license_key</code></p> <p>(required, string) MaxMind license key is necessary for downloading the GeoLite2 database.</p> <p>Database</p> <p>Use this command to create/update the database and reload the bot:</p> <pre><code>intelmq.bots.experts.maxmind_geoip.expert --update-database\n</code></pre>"},{"location":"user/bots/#misp_1","title":"MISP","text":"<p>Queries a MISP instance for the <code>source.ip</code> and adds the MISP Attribute UUID and MISP Event ID of the newest attribute found.</p> <p>Module: <code>intelmq.bots.experts.misp.expert</code></p> <p>Parameters:</p> <p><code>misp_key</code></p> <p>(required, string) MISP Authkey.</p> <p><code>misp_url</code></p> <p>(required, string) URL of MISP server (with trailing '/')</p> <p><code>http_verify_cert</code></p> <p>(optional, boolean) Verify the TLS certificate of the server. Default to <code>true</code>.</p>"},{"location":"user/bots/#mcafee-active-response-lookup","title":"McAfee Active Response Lookup","text":"<p>Queries DXL bus for hashes, IP addresses or FQDNs.</p> <p>Module: <code>intelmq.bots.experts.mcafee.expert_mar</code></p> <p>Parameters:</p> <p><code>dxl_config_file</code></p> <p>(required, string) Location of the file containing required information to connect to DXL bus.</p> <p><code>lookup_type</code></p> <p>(required, string) Allowed values:</p> <ul> <li><code>Hash</code> - Looks up <code>malware.hash.md5</code>, <code>malware.hash.sha1</code> and <code>malware.hash.sha256</code>.</li> <li><code>DestSocket</code> - Looks up <code>destination.ip</code> and <code>destination.port</code>.</li> <li><code>DestIP</code> - Looks up <code>destination.ip</code>.</li> <li><code>DestFQDN</code> - Looks up in <code>destination.fqdn</code>.</li> </ul>"},{"location":"user/bots/#modify","title":"Modify","text":"<p>This bots allows you to change arbitrary field values of events using a configuration file.</p> <p>Module: <code>intelmq.bots.experts.modify.expert</code></p> <p>Parameters:</p> <p><code>configuration_path</code></p> <p>(required, string) Location of the configuration file.</p> <p><code>case_sensitive</code></p> <p>(optional, boolean) Defaults to true.</p> <p><code>maximum_matches</code></p> <p>(optional, boolean) Maximum number of matches. Processing stops after the limit is reached. Defaults to null (no limit).</p> <p><code>overwrite</code></p> <p>(optional, boolean) Overwrite any existing fields by matching rules. Defaults to false.</p> <p>Configuration File</p> <p>The modify expert bot allows you to change arbitrary field values of events just using a configuration file. Thus it is possible to adapt certain values or adding new ones only by changing JSON-files without touching the code of many other bots.</p> <p>The configuration is called <code>modify.conf</code> and looks like this:</p> <pre><code>[\n  {\n    \"rulename\": \"Standard Protocols http\",\n    \"if\": {\n      \"source.port\": \"^(80|443)$\"\n    },\n    \"then\": {\n      \"protocol.application\": \"http\"\n    }\n  },\n  {\n    \"rulename\": \"Spamhaus Cert conficker\",\n    \"if\": {\n      \"malware.name\": \"^conficker(ab)?$\"\n    },\n    \"then\": {\n      \"classification.identifier\": \"conficker\"\n    }\n  },\n  {\n    \"rulename\": \"bitdefender\",\n    \"if\": {\n      \"malware.name\": \"bitdefender-(.*)$\"\n    },\n    \"then\": {\n      \"malware.name\": \"{matches[malware.name][1]}\"\n    }\n  },\n  {\n    \"rulename\": \"urlzone\",\n    \"if\": {\n      \"malware.name\": \"^urlzone2?$\"\n    },\n    \"then\": {\n      \"classification.identifier\": \"urlzone\"\n    }\n  },\n  {\n    \"rulename\": \"default\",\n    \"if\": {\n      \"feed.name\": \"^Spamhaus Cert$\"\n    },\n    \"then\": {\n      \"classification.identifier\": \"{msg[malware.name]}\"\n    }\n  }\n]\n</code></pre> <p>In our example above we have five groups labeled <code>Standard Protocols http</code>, <code>Spamhaus Cert conficker</code>, <code>bitdefender</code>, <code>urlzone</code> and <code>default</code>. All sections will be considered, in the given order (from top to bottom).</p> <p>Each rule consists of conditions and actions. Conditions and actions are dictionaries holding the field names of events and regular expressions to match values (selection) or set values (action). All matching rules will be applied in the given order. The actions are only performed if all selections apply.</p> <p>If the value for a condition is an empty string, the bot checks if the field does not exist. This is useful to apply default values for empty fields.</p> <p>Actions</p> <p>You can set the value of the field to a string literal or number.</p> <p>In addition you can use the standard Python string format syntax to access the values from the processed event as <code>msg</code> and the match groups of the conditions as <code>matches</code>, see the bitdefender example above. Group 0 ([<code>0</code>]) contains the full matching string. See also the documentation on re.Match.group.</p> <p>Note that <code>matches</code> will also contain the match groups from the default conditions if there were any.</p> <p>Examples</p> <p>We have an event with <code>feed.name = Spamhaus Cert</code> and <code>malware.name = confickerab</code>. The expert loops over all sections in the file and eventually enters section <code>Spamhaus Cert</code>. First, the default condition is checked, it matches! OK, going on. Otherwise the expert would have selected a different section that has not yet been considered. Now, go through the rules, until we hit the rule <code>conficker</code>. We combine the conditions of this rule with the default conditions, and both rules match! So we can apply the action: <code>classification.identifier</code> is set to <code>conficker</code>, the trivial name.</p> <p>Assume we have an event with <code>feed.name = Spamhaus Cert</code> and <code>malware.name = feodo</code>. The default condition matches, but no others. So the default action is applied. The value for <code>classification.identifier</code> will be set to <code>feodo</code> by <code>{msg[malware.name]}</code>.</p> <p>Types</p> <p>If the rule is a string, a regular expression search is performed, also for numeric values (<code>str()</code> is called on them). If the rule is numeric for numeric values, a simple comparison is done. If other types are mixed, a warning will be thrown.</p> <p>For boolean values, the comparison value needs to be <code>true</code> or <code>false</code> as in JSON they are written all-lowercase.</p>"},{"location":"user/bots/#national-cert-contact-lookup-by-certat","title":"National CERT Contact Lookup by CERT.AT","text":"<p>https://contacts.cert.at offers an IP address to national CERT contact (and cc) mapping.</p> <p>Module: <code>intelmq.bots.experts.national_cert_contact_certat.expert</code></p> <p>Parameters:</p> <p><code>filter</code></p> <p>(optional, boolean) Whether to act as a filter for AT.</p> <p><code>overwrite_cc</code></p> <p>(optional, boolean) Set to true if you want to overwrite any potentially existing cc fields in the event. Defaults to false.</p>"},{"location":"user/bots/#rdap","title":"RDAP","text":"<p>This bot queries RDAP servers for additional information about a domain.</p> <p>Module: <code>intelmq.bots.experts.rdap.expert</code></p> <p>Parameters:</p> <p><code>rdap_order</code></p> <p>(optional, array of strings) Search order of contacts with these roles. Defaults to <code>[\"abuse\", \"technical\"]</code>.</p> <p><code>rdap_bootstrapped_servers</code></p> <p>(optional, object) Customized RDAP servers. Do not forget the trailing slash. For example:</p> <pre><code>{\n  \"at\": {\n    \"url\": \"rdap.server.at/v1/\",\n    \"auth\": {\n      \"type\": \"jwt\",\n      \"token\": \"ey...\"\n    }\n  },\n  \"de\": \"rdap.service:1337/v1/\"\n}\n</code></pre>"},{"location":"user/bots/#recordedfuture-ip-risk","title":"RecordedFuture IP Risk","text":"<p>This bot tags events with the score found in RecordedFuture large IP risklist.</p> <p>Record risk score associated to source and destination IP if they are present. Assigns 0 to IP addresses not in the RF list.</p> <p>For both <code>source.ip</code> and <code>destination.ip</code> the corresponding risk score is fetched from a local database created from RecordedFuture's API. The score is recorded in <code>extra.rf_iprisk.source</code> and <code>extra.rf_iprisk.destination</code>. If a lookup for an IP fails a score of 0 is recorded.</p> <p>See https://www.recordedfuture.com/products/api/ and speak with your RecordedFuture representative for more information.</p> <p>The list is obtained from recorded future API and needs a valid API TOKEN The large list contains all IP's with a risk score of 25 or more. If IP's are not present in the database a risk score of 0 is given.</p> <p>Module: <code>intelmq.bots.experts.recordedfuture_iprisk.expert</code></p> <p>Parameters:</p> <p><code>database</code></p> <p>(required, string) Path to the local database file.</p> <p><code>api_token</code></p> <p>(required, string) This needs to contain valid API token to download the latest database data.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to false.</p> <p>Database</p> <p>Use this command to create/update the database and reload the bot:</p> <pre><code>intelmq.bots.experts.recordedfuture_iprisk.expert --update-database\n</code></pre>"},{"location":"user/bots/#reverse-dns","title":"Reverse DNS","text":"<p>For both <code>source.ip</code> and <code>destination.ip</code> the PTR record is fetched and the first valid result is used for <code>source.reverse_dns</code> or <code>destination.reverse_dns</code>.</p> <p>Module: <code>intelmq.bots.experts.reverse_dns.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p><code>cache_ttl_invalid_response</code></p> <p>(required, integer) The TTL for cached invalid responses.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to false.</p>"},{"location":"user/bots/#rfc1918","title":"RFC1918","text":"<p>Several RFCs define ASNs, IP Addresses and Hostnames (and TLDs) reserved for documentation. Events or fields of events can be dropped if they match the criteria of either being reserved for documentation (e.g. AS 64496, Domain <code>example.com</code>) or belonging to a local area network (e.g. <code>192.168.0.0/24</code>). These checks can applied to URLs, IP Addresses, FQDNs and ASNs.</p> <p>It is configurable if the whole event should be dropped (\"policies\") or just the field removed, as well as which fields should be checked.</p> <p>Sources:</p> <ul> <li><code>1918</code></li> <li><code>2606</code></li> <li><code>3849</code></li> <li><code>4291</code></li> <li><code>5737</code></li> <li>https://en.wikipedia.org/wiki/IPv4</li> <li>https://en.wikipedia.org/wiki/Autonomous_system_(Internet)</li> </ul> <p>Module: <code>intelmq.bots.experts.rfc1918.expert</code></p> <p>Parameters:</p> <p><code>fields</code></p> <p>(required, string) Comma-separated list of fields. Allowed values:</p> <ul> <li><code>destination.asn</code> &amp; <code>source.asn</code></li> <li><code>destination.fqdn</code> &amp; <code>source.fqdn</code></li> <li><code>destination.ip</code> &amp; <code>source.ip</code></li> <li><code>destination.url</code> &amp; <code>source.url</code></li> </ul> <p><code>policy</code></p> <p>(required, string) Comma-separated list of policies. Allowed values:</p> <ul> <li><code>drop</code> - the entire events is dropped</li> <li><code>del</code> - the affected field is removed</li> </ul> <p>With the example parameter values given above, this means that:</p> <ul> <li>If a <code>destination.ip</code> value is part of a reserved network block, the field will be removed (policy <code>del</code>).</li> <li>If a <code>source.asn</code> value is in the range of reserved AS numbers, the event will be removed altogether (policy <code>drop</code>).</li> <li>If a <code>source.url</code> value contains a host with either an IP address part of a reserved network block, or a reserved   domain name (or with a reserved TLD), the event will be dropped (policy <code>drop</code>).</li> </ul>"},{"location":"user/bots/#ripe","title":"RIPE","text":"<p>Online RIPE Abuse Contact and Geolocation Finder for IP addresses and Autonomous Systems.</p> <p>Module: <code>intelmq.bots.experts.ripe.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p><code>mode</code></p> <p>(optional, string) Allowed values: <code>append</code> or <code>replace</code>. Defaults to <code>append</code>.</p> <p><code>query_ripe_db_asn</code></p> <p>(optional, boolean) Query for IPs at <code>http://rest.db.ripe.net/abuse-contact/%s.json</code>. Defaults to true.</p> <p><code>query_ripe_db_ip</code></p> <p>(optional, boolean) Query for ASNs at <code>http://rest.db.ripe.net/abuse-contact/as%s.json</code>. Defaults to true.</p> <p><code>query_ripe_stat_asn</code></p> <p>(optional, boolean) Query for ASNs at <code>https://stat.ripe.net/data/abuse-contact-finder/data.json?resource=%s</code>. Defaults to true.</p> <p><code>query_ripe_stat_ip</code></p> <p>(optional, boolean) Query for IPs at <code>https://stat.ripe.net/data/abuse-contact-finder/data.json?resource=%s</code>. Defaults to true.</p> <p><code>query_ripe_stat_geolocation</code></p> <p>(optional, boolean) Query for IPs at <code>https://stat.ripe.net/data/maxmind-geo-lite/data.json?resource=%s</code>. Defaults to true.</p>"},{"location":"user/bots/#sieve","title":"Sieve","text":"<p>This bot is used to filter and/or modify events based on a set of rules. The rules are specified in an external configuration file and with a syntax similar to the Sieve language used for mail filtering.</p> <p>Each rule defines a set of matching conditions on received events. Events can be matched based on keys and values in the event. Conditions can be combined using parenthesis and the boolean operators <code>&amp;&amp;</code> and <code>||</code>. If the processed event matches a rule's conditions, the corresponding actions are performed. Actions can specify whether the event should be kept or dropped in the pipeline (filtering actions) or if keys and values should be changed (modification actions).</p> <p>Requirements</p> <p>To use this bot, you need to install the required dependencies:</p> <pre><code>pip3 install -r intelmq/bots/experts/sieve/REQUIREMENTS.txt\n</code></pre> <p>Module: <code>intelmq.bots.experts.sieve.expert</code></p> <p>Parameters:</p> <p><code>file</code></p> <p>(required, string) Path to sieve file. Syntax can be validated with <code>intelmq_sieve_expert_validator</code>.</p> <p>Examples</p> <p>The following excerpts illustrate some of the basic features of the sieve file format:</p> <pre><code>if :exists source.fqdn {\n keep // aborts processing of subsequent rules and forwards the event.\n}\n\n\nif :notexists source.abuse_contact || source.abuse_contact =~ '.*@example.com' {\n drop // aborts processing of subsequent rules and drops the event.\n}\n\nif source.ip &lt;&lt; '192.0.0.0/24' {\n add! comment = 'bogon' // sets the field comment to this value and overwrites existing values\n path 'other-path' // the message is sent to the given path\n}\n\nif classification.type :in ['phishing', 'malware-distribution'] &amp;&amp; source.fqdn =~ '.*.(ch|li)$' {\n add! comment = 'domainabuse'\n keep\n} elif classification.type == 'scanner' {\n add! comment = 'ignore'\n drop\n} else {\n remove comment\n}\n</code></pre> <p>Reference</p> <p>Sieve File Structure</p> <p>The sieve file contains an arbitrary number of rules of the form:</p> <pre><code>if EXPRESSION {\n ACTIONS\n} elif EXPRESSION {\n ACTIONS\n} else {\n ACTIONS\n}\n</code></pre> <p>Nested if-statements and mixed if statements and rules in the same scope are possible.</p> <p>Expressions</p> <p>Each rule specifies on or more expressions to match an event based on its keys and values. Event keys are specified as strings without quotes. String values must be enclosed in single quotes. Numeric values can be specified as integers or floats and are unquoted. IP addresses and network ranges (IPv4 and IPv6) are specified with quotes. List values for use with list/set operators are specified as string, float, int, bool and string literals separated by commas and enclosed in square brackets. Expression statements can be combined and chained using parentheses and the boolean operators <code>&amp;&amp;</code> and <code>||</code>. The following operators may be used to match events:</p> <ul> <li><code>:exists</code> and <code>:notexists</code> match if a given key exists, for example:</li> </ul> <pre><code>if :exists source.fqdn { ... }\n</code></pre> <ul> <li><code>==</code> and <code>!=</code> match for equality of strings, numbers, and booleans, for example:</li> </ul> <pre><code>if feed.name != 'acme-security' || feed.accuracy == 100 || extra.false_positive == false { ... }\n</code></pre> <ul> <li> <p><code>:contains</code> matches on substrings.</p> </li> <li> <p><code>=~</code> matches strings based on the given regular expression. <code>!~</code> is the inverse regular expression match.</p> </li> <li> <p>Numerical comparisons are evaluated with <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>.</p> </li> <li> <p><code>&lt;&lt;</code> matches if an IP address is contained in the specified network range:</p> </li> </ul> <pre><code>if source.ip &lt;&lt; '10.0.0.0/8' { ... }\n</code></pre> <ul> <li>String values to match against can also be specified as lists of strings, which have separate operators. For example:</li> </ul> <pre><code>if source.ip :in ['8.8.8.8', '8.8.4.4'] { ... }\n</code></pre> <p>In this case, the event will match if it contains a key <code>source.ip</code> with either value <code>8.8.8.8</code> or <code>8.8.4.4</code>.</p> <p>There are also <code>:containsany</code> to match at least one of a list of substrings, and <code>:regexin</code> to match at least one of a list of regular expressions, similar to the <code>:contains</code> and <code>=~</code> operators.</p> <ul> <li>Lists of numeric values support <code>:in</code> to check for inclusion in a list of numbers:</li> </ul> <pre><code>if source.port :in [80, 443] { ... }\n</code></pre> <ul> <li><code>:equals</code> tests for equality between lists, including order. Example for checking a hostname-port pair:</li> </ul> <pre><code>if extra.host_tuple :equals ['dns.google', 53] { ... }\n</code></pre> <ul> <li><code>:setequals</code> tests for set-based equality (ignoring duplicates and value order) between a list of given values.   Example for checking for the first nameserver of two domains, regardless of the order they are given in the list:</li> </ul> <pre><code>if extra.hostnames :setequals ['ns1.example.com', 'ns1.example.mx'] { ... }\n</code></pre> <ul> <li><code>:overlaps</code> tests if there is at least one element in common between the list specified by a key and a list of values.   Example for checking if at least one of the ICS, database or vulnerable tags is given:</li> </ul> <pre><code>if extra.tags :overlaps ['ics', 'database', 'vulnerable'] { ... }\n</code></pre> <ul> <li><code>:subsetof</code> tests if the list of values from the given key only contains values from a set of values specified as the   argument. Example for checking for a host that has only ns1.example.com and/or ns2.* as its apparent hostname:</li> </ul> <pre><code>if extra.hostnames :subsetof ['ns1.example.com', 'ns2.example.com'] { ... }\n</code></pre> <ul> <li><code>:supersetof</code> tests if the list of values from the given key is a superset of the values specified as the argument.   Example for matching hosts with at least the IoT and vulnerable tags:</li> </ul> <pre><code>if extra.tags :supersetof ['iot', 'vulnerable'] { ... }\n</code></pre> <ul> <li><code>:before</code> tests if the date value occurred before given time ago. The time might be absolute (basically anything parseable by pendulum parser, eg. \u201c2015-09-12T06:22:11+00:00\u201d) or relative (accepted string formatted like this \u201c \u201d, where epoch could be any of following strings (could optionally end with trailing \u2018s\u2019): hour, day, week, month, year) <pre><code>if time.observation :before '1 week' { ... }\n</code></pre> <ul> <li><code>:after</code>  tests if the date value occurred after given time ago; see <code>:before</code></li> </ul> <pre><code>if time.observation :after '2015-09-12' { ... }  # happened after midnight the 12th Sep\n</code></pre> <ul> <li>Boolean values can be matched with <code>==</code> or <code>!=</code> followed by <code>true</code> or <code>false</code>. Example:</li> </ul> <pre><code>if extra.has_known_vulns == true { ... }\n</code></pre> <ul> <li>The combination of multiple expressions can be done using parenthesis and boolean operators:</li> </ul> <pre><code>if (source.ip == '127.0.0.1') &amp;&amp; (comment == 'add field' || classification.taxonomy == 'vulnerable') { ... }\n</code></pre> <ul> <li>Any single expression or a parenthesised group of expressions can be negated using <code>!</code>:</li> </ul> <pre><code>if ! source.ip :contains '127.0.0.' || ! ( source.ip == '172.16.0.5' &amp;&amp; source.port == 25 ) { ... }\n</code></pre> <p>!!! note Since 3.0.0, list-based operators are used on list values, such as <code>foo :in [1, 2, 3]</code> instead of <code>foo == [1, 2, 3]</code> and <code>foo :regexin ['.mx', '.zz']</code> rather than <code>foo =~ ['.mx', '.zz']</code>, and similarly for <code>:containsany</code> vs <code>:contains</code>. Besides that, <code>:notcontains</code> has been removed, with e.g <code>foo :notcontains ['.mx', '.zz']</code> now being represented using negation as <code>! foo :contains ['.mx', '.zz']</code>.</p> <p>Actions</p> <p>If part of a rule matches the given conditions, the actions enclosed in <code>{</code> and <code>}</code> are applied. By default, all events that are matched or not matched by rules in the sieve file will be forwarded to the next bot in the pipeline, unless the <code>drop</code> action is applied.</p> <ul> <li><code>add</code> adds a key value pair to the event. It can be a string, number, or boolean. This action only applies if the key   is not yet defined in the event. If the key is already defined, the action is ignored. Example:</li> </ul> <pre><code>add comment = 'hello, world'\n</code></pre> <p>Some basic mathematical expressions are possible, but currently support only relative time specifications objects are supported. For example:</p> <pre><code>add time.observation += '1 hour'\nadd time.observation -= '10 hours'\n</code></pre> <ul> <li> <p><code>add!</code> same as above, but will force overwrite the key in the event.</p> </li> <li> <p><code>update</code> modifies an existing value for a key. Only applies if the key is already defined. If the key is not defined   in the event, this action is ignored. This supports mathematical expressions like above. Example:</p> </li> </ul> <pre><code>update feed.accuracy = 50\n</code></pre> <p>Some basic mathematical expressions are possible, but currently support only relative time specifications objects are supported. For example:</p> <pre><code>update time.observation += '1 hour'\nupdate time.observation -= '10 hours'\n</code></pre> <ul> <li><code>remove</code> removes a key/value from the event. Action is ignored if the key is not defined in the event. Example:</li> </ul> <pre><code>remove extra.comments\n</code></pre> <ul> <li> <p><code>keep</code> sends the message to the next bot in the pipeline (same as the default behaviour), and stops sieve rules   processing.</p> </li> <li> <p><code>path</code> sets the path (named queue) the message should be sent to (implicitly or with the command <code>keep</code>. The named   queue needs to configured in the pipeline, see the User Guide for more information.</p> </li> </ul> <pre><code>path 'named-queue'\n</code></pre> <p>You can as well set multiple destination paths with the same syntax as for value lists:</p> <pre><code>path ['one', 'two']\n</code></pre> <p>This will result in two identical message, one sent to the path <code>one</code> and the other sent to the path <code>two</code>.</p> <p>If the path is not configured, the error looks like:</p> <pre><code>File \"/path/to/intelmq/intelmq/lib/pipeline.py\", line 353, in send for destination_queue in self.destination_queues path]: KeyError: 'one'\n</code></pre> <ul> <li><code>drop</code> marks the event to be dropped. The event will not be forwarded to the next bot in the pipeline. The sieve file   processing is interrupted upon reaching this action. No other actions may be specified besides the <code>drop</code> action   within <code>{</code> and <code>}</code>.</li> </ul> <p>Comments</p> <p>Comments may be used in the sieve file: all characters after <code>//</code> and until the end of the line will be ignored.</p>"},{"location":"user/bots/#splunk-saved-search-lookup","title":"Splunk Saved Search Lookup","text":"<p>Runs a saved search in Splunk using fields in an event, adding fields from the search result into the event.</p> <p>Splunk documentation on saved searches: https://docs.splunk.com/Documentation/Splunk/latest/Report/Createandeditreports</p> <p>The saved search should take parameters according to the <code>search_parameters</code> configuration and deliver results according to <code>result_fields</code>. The examples above match a saved search of this format:</p> <pre><code>index=\"dhcp\" ipv4address=\"$ip$\" | ... | fields _time username ether\n</code></pre> <p>The time window used is the one saved with the search.</p> <p>Waits for Splunk to return an answer for each message, so slow searches will delay the entire botnet. If you anticipate a load of more than one search every few seconds, consider running multiple load-balanced copies of this bot.</p> <p>Module: <code>intelmq.bots.experts.splunk_saved_search.expert</code></p> <p>Parameters (also expects HTTP parameters):</p> <p><code>auth_token</code></p> <p>(required, string) Splunk API authentication token.</p> <p><code>url</code></p> <p>(required, string) base URL of the Splunk REST API.</p> <p><code>retry_interval</code></p> <p>(optional, integer) Number of seconds to wait between polling for search results to be available. Defaults to 5.</p> <p><code>saved_search</code></p> <p>(required, string) Name of Splunk saved search to run.</p> <p><code>search_parameters</code></p> <p>(optional, object) Mapping of IntelMQ event fields containing the data to search for to parameters of the Splunk saved search. Defaults to <code>{}</code>. Example:</p> <pre><code>search_parameters:\n  source.ip: ip\n</code></pre> <p><code>result_fields</code></p> <p>(optional, object) Mapping of Splunk saved search result fields to IntelMQ event fields to store the results in. Defaults to <code>{}</code>. Example:</p> <pre><code>result_fields:\n  username: source.account\n</code></pre> <p><code>not_found</code></p> <p>(optional, array of strings) How to handle empty search results. Allowed values:</p> <ul> <li><code>warn</code> - log a warning message</li> <li><code>send</code> - send the event on unmodified</li> <li><code>drop</code> - drop the message</li> <li><code>send</code> - and <code>drop</code> are mutually exclusive</li> </ul> <p>All specified actions are performed. Defaults to <code>[ \"warn\", \"send\" ]</code>.</p> <p><code>multiple_result_handling</code></p> <p>(optional, array of strings) How to handle more than one search result. Allowed values:</p> <ul> <li><code>limit</code> - limit the search so that duplicates are impossible</li> <li><code>warn</code> - log a warning message</li> <li><code>use_first</code> - use the first search result</li> <li><code>ignore</code> - do not modify the event</li> <li><code>send</code> - send the event on</li> <li><code>drop</code> - drop the message</li> <li><code>limit</code> cannot be combined with any other value</li> <li><code>send</code> and <code>drop</code> are mutually exclusive</li> <li><code>ignore</code> and <code>use_first</code> are mutually exclusive</li> </ul> <p>All specified actions are performed. Defaults to <code>[\"warn\", \"use_first\", \"send\" ]</code>.</p> <p><code>overwrite</code></p> <p>(optional, boolean/null) Whether search results overwrite values already in the message or not. If null, attempting to add a field that already exists throws an exception. Defaults to null.</p>"},{"location":"user/bots/#taxonomy","title":"Taxonomy","text":"<p>This bot adds the <code>classification.taxonomy</code> field according to the RSIT taxonomy.</p> <p>Please note that there is a slight mismatch of IntelMQ's taxonomy to the upstream taxonomy. See also this issue.</p> <p>Information on the \"Reference Security Incident Taxonomy\" can be found here: https://github.com/enisaeu/Reference-Security-Incident-Taxonomy-Task-Force</p> <p>For brevity, \"type\" means <code>classification.type</code> and \"taxonomy\" means <code>classification.taxonomy</code>.</p> <ul> <li>If taxonomy is missing, and type is given, the according taxonomy is set.</li> <li>If neither taxonomy, not type is given, taxonomy is set to \"other\" and type to \"unknown\".</li> <li>If taxonomy is given, but type is not, type is set to \"unknown\".</li> </ul> <p>Module: <code>intelmq.bots.experts.taxonomy.expert</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#threshold","title":"Threshold","text":"<p>Check if the number of similar messages during a specified time interval exceeds a set value.</p> <p>Limitations</p> <p>This bot has certain limitations and is not a true threshold filter (yet). It works like this:</p> <ol> <li>Every incoming message is hashed according to the <code>filter_*</code> parameters.</li> <li>The hash is looked up in the cache and the count is incremented by 1, and the TTL of the key is (re-)set to the    timeout.</li> <li>If the new count matches the threshold exactly, the message is forwarded. Otherwise it is dropped.</li> </ol> <p>Note</p> <p>Even if a message is sent, any further identical messages are dropped, if the time difference to the last message is less than the timeout! The counter is not reset if the threshold is reached.</p> <p>Module: <code>intelmq.bots.experts.threshold.expert</code></p> <p>Parameters (also expects cache parameters):</p> <p><code>filter_keys</code></p> <p>(required, string/array of strings) Array or comma-separated list of field names to consider or ignore when determining which messages are similar.</p> <p><code>filter_type</code></p> <p>(required, string) Allowed values: <code>whitelist</code> or <code>blacklist</code>. When <code>whitelist</code> is used, only lines containing the text specified in <code>filter_text</code> option will be processed. When <code>blacklist</code> is used, only lines NOT containing the text will be processed.</p> <p><code>threshold</code></p> <p>(required, integer) Number of messages required before propagating one. In forwarded messages, the threshold is saved in the message as <code>extra.count</code>.</p> <p><code>add_keys</code></p> <p>(optional, object) List of keys and their respective values to add to the propagated messages. Example:</p> <pre><code>add_keys:\n  classification.type: \"spam\"\n  comment: \"Started more than 10 SMTP connections\"\n</code></pre>"},{"location":"user/bots/#tor-exit-node","title":"Tor Exit Node","text":"<p>This bot uses an offline database to determine whether the host is a Tor exit node.</p> <p>Module: <code>intelmq.bots.experts.tor_nodes.expert</code></p> <p>Parameters:</p> <p><code>database</code></p> <p>(required, string) Path to the database file.</p> <p>Database</p> <p>Use this command to create/update the database and reload the bot:</p> <pre><code>intelmq.bots.experts.tor_nodes.expert --update-database\n</code></pre>"},{"location":"user/bots/#trusted-introducer-lookup","title":"Trusted Introducer Lookup","text":"<p>Lookups data from Trusted Introducer public teams list.</p> <p>Module: <code>intelmq.bots.experts.trusted_introducer_lookup.expert</code></p> <p>Parameters:</p> <p><code>order</code></p> <p>(required, string) Allowed values: <code>domain</code> and <code>asn</code>. You can set multiple values, so first match wins.</p> <ul> <li>When <code>domain</code> is set, it will lookup the <code>source.fqdn</code> field. It will go from high-order to low-order, i.e.   <code>1337.super.example.com -&gt; super.example.com -&gt; example.com -&gt; .com</code></li> <li>If <code>asn</code> is set, it will lookup <code>source.asn</code>.</li> </ul> <p>After a match, the abuse contact will be fetched from the trusted introducer teams list and will be stored in the event as <code>source.abuse_contact</code>. If there is no match, the event will not be enriched and will be sent to the next configured step.</p>"},{"location":"user/bots/#tuency","title":"Tuency","text":"<p>Queries the IntelMQ API of a Tuency Contact Database instance.</p> <p>Tuency is a contact management database addressing the needs of CERTs. Users of tuency can configure contact addresses and delivery settings for IP objects (addresses, netblocks), Autonomous Systems, and (sub-)domains. This expert queries the information for <code>source.ip</code> and <code>source.fqdn</code> using the following other fields:</p> <ul> <li><code>classification.taxonomy</code></li> <li><code>classification.type</code></li> <li><code>feed.provider</code></li> <li><code>feed.name</code></li> </ul> <p>These fields therefore need to exist, otherwise the message is skipped.</p> <p>The API parameter \"feed_status\" is currently set to \"production\" constantly, until IntelMQ supports this field.</p> <p>The API answer is processed as following. For the notification interval:</p> <ul> <li>If suppress is true, then <code>extra.notify</code> is set to false.</li> <li>Otherwise:</li> <li>If the interval is immediate, then <code>extra.ttl</code> is set to 0.</li> <li>Otherwise the interval is converted into seconds and saved in   <code>extra.ttl</code>.</li> </ul> <p>For the contact lookup: For both fields ip and domain, the destinations objects are iterated and its email fields concatenated to a comma-separated list in <code>source.abuse_contact</code>.</p> <p>The IntelMQ fields used by this bot may change in the next IntelMQ release, as soon as better suited fields are available.</p> <p>Module: <code>intelmq.bots.experts.tuency.expert</code></p> <p>Parameters:</p> <p><code>url</code></p> <p>(required, string) Tuency instance URL. Without the API path.</p> <p><code>authentication_token</code></p> <p>(required, string) The Bearer authentication token. Without the <code>Bearer</code> prefix.</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether the existing data in <code>source.abuse_contact</code> should be overwritten. Defaults to true.</p>"},{"location":"user/bots/#truncate-by-delimiter","title":"Truncate By Delimiter","text":"<p>Cut string if length is bigger than maximum length.</p> <p>Module: <code>intelmq.bots.experts.truncate_by_delimiter.expert</code></p> <p>Parameters:</p> <p><code>delimiter</code></p> <p>(required, string) The delimiter to be used for truncating. Defaults to <code>.</code>.</p> <p><code>max_length</code></p> <p>(required, integer) The maximum string length.</p> <p><code>field</code></p> <p>(required, string) The field to be truncated, e.g. <code>source.fqdn</code>. The given field is truncated step-by-step using the delimiter from the beginning, until the field is shorter than <code>max_length</code>.</p> <p>Example: Cut through a long domain with a dot. The string is truncated until the domain does not exceed the configured maximum length.</p> <ul> <li>Input domain (e.g. <code>source.fqdn</code>): <code>www.subdomain.web.secondsubomain.test.domain.com</code></li> <li><code>delimiter</code>: <code>.</code></li> <li><code>max_length</code>: 20</li> <li>Resulting value <code>test.domain.com</code> (length: 15 characters)</li> </ul>"},{"location":"user/bots/#url","title":"URL","text":"<p>This bot extracts additional information from <code>source.url</code> and <code>destination.url</code> fields. It can fill the following fields:</p> <ul> <li><code>source.fqdn</code></li> <li><code>source.ip</code></li> <li><code>source.port</code></li> <li><code>source.urlpath</code></li> <li><code>source.account</code></li> <li><code>destination.fqdn</code></li> <li><code>destination.ip</code></li> <li><code>destination.port</code></li> <li><code>destination.urlpath</code></li> <li><code>destination.account</code></li> <li><code>protocol.application</code></li> <li><code>protocol.transport</code></li> </ul> <p>Module: <code>intelmq.bots.experts.url.expert</code></p> <p>Parameters:</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to false.</p> <p><code>skip_fields</code></p> <p>(optional, array of string) An array of field names that shouldn't be extracted from the URL.</p>"},{"location":"user/bots/#url2fqdn","title":"Url2FQDN","text":"<p>This bot is deprecated and will be removed in version 4.0. Use URL Expert bot instead.</p> <p>This bot extracts the Host from the <code>source.url</code> and <code>destination.url</code> fields and writes it to <code>source.fqdn</code> or <code>destination.fqdn</code> if it is a hostname, or <code>source.ip</code> or <code>destination.ip</code> if it is an IP address.</p> <p>Module: <code>intelmq.bots.experts.url2fqdn.expert</code></p> <p>Parameters:</p> <p><code>overwrite</code></p> <p>(optional, boolean) Whether to overwrite existing fields. Defaults to false.</p>"},{"location":"user/bots/#uwhoisd","title":"uWhoisd","text":"<p>uWhoisd is a universal Whois server that supports caching and stores whois entries for historical purposes.</p> <p>The bot sends a request for <code>source.url</code>, <code>source.fqdn</code>, <code>source.ip</code> or <code>source.asn</code> to the configured uWhoisd instance and saves the retrieved whois entry:</p> <ul> <li>If both <code>source.url</code> and <code>source.fqdn</code> are present, it will only do a request for <code>source.fqdn</code>, as the hostname of <code>source.url</code> should be the same as <code>source.fqdn</code>. The whois entry will be saved in <code>extra.whois.fqdn</code>.</li> <li>If <code>source.ip</code> is present, the whois entry will be saved in <code>extra.whois.ip</code>.</li> <li>If <code>source.asn</code> is present, he whois entry will be saved in <code>extra.whois.asn</code>.</li> </ul> <p>Events without <code>source.url</code>, <code>source.fqdn</code>, <code>source.ip</code>, or <code>source.asn</code>, are ignored.</p> <p>Note</p> <p>Requesting a whois entry for a fully qualified domain name (FQDN) only works if the request only contains the domain. uWhoisd will automatically strip the subdomain part if it is present in the request.</p> <p>Example: <code>https://www.theguardian.co.uk</code></p> <ul> <li>TLD: <code>co.uk</code> (uWhoisd uses the Mozilla public suffix list as a reference)</li> <li>Domain: <code>theguardian.co.uk</code></li> <li>Subdomain: <code>www</code></li> </ul> <p>The whois request will be for <code>theguardian.co.uk</code></p> <p>Module: <code>intelmq.bots.experts.uwhoisd.expert</code></p> <p>Parameters:</p> <p><code>server</code></p> <p>(optional, string) Hostname of the uWhoisd server. Defaults to localhost.</p> <p><code>port</code></p> <p>(optional, integer) Port of the uWhoisd server. Defaults to 4243.</p>"},{"location":"user/bots/#wait","title":"Wait","text":"<p>Waits for a some time or until a queue size is lower than a given number.</p> <p>Only one of the two modes is possible. If a queue name is given, the queue mode is active. If the sleep_time is a number, sleep mode is active. Otherwise the dummy mode is active, the events are just passed without an additional delay.</p> <p>Note that SIGHUPs and reloads interrupt the sleeping.</p> <p>Module: <code>intelmq.bots.experts.wait.expert</code></p> <p>Parameters:</p> <p><code>queue_db</code></p> <p>(optional, integer) Database number of the database. Defaults to 2.</p> <p><code>queue_host</code></p> <p>(optional, string) Hostname of the database. Defaults to localhost.</p> <p><code>queue_name</code></p> <p>(optional, string) Name of the queue to be watched. This is not the name of a bot but the queue's name. Defaults to null.</p> <p><code>queue_password</code></p> <p>(optional, string) Password for the database. Defaults to null.</p> <p><code>queue_polling_interval</code></p> <p>(required, float) Interval to poll the list length in seconds. Defaults to ?.</p> <p><code>queue_port</code></p> <p>(optional, integer) Port of the database. Defaults to 6379.</p> <p><code>queue_size</code></p> <p>(optional, integer) Maximum size of the queue. Defaults to 0.</p> <p><code>sleep_time</code></p> <p>(optional, integer) Time to sleep before sending the event. Defaults to null.</p>"},{"location":"user/bots/#output-bots","title":"Output Bots","text":""},{"location":"user/bots/#amqp-topic","title":"AMQP Topic","text":"<p>Sends the event to a specified topic of an AMQP server</p> <p>Sends data to an AMQP Server See https://www.rabbitmq.com/tutorials/amqp-concepts.html for more details on amqp topic exchange.</p> <p>Requires the pika python library.</p> <p>Module: <code>intelmq.bots.outputs.amqptopic.output</code></p> <p>Parameters:</p> <p><code>connection_attempts</code></p> <p>(optional, integer) The number of connection attempts to defined server. Defaults to 3.</p> <p><code>connection_heartbeat</code></p> <p>(optional, integer) Heartbeat to server (in seconds). Defaults to 3600.</p> <p><code>connection_host</code></p> <p>(optional, string) Hostname of the AMQP server. Defaults to 127.0.0.1.</p> <p><code>connection_port</code></p> <p>(optional, integer) Port of the AMQP server. Defaults to 5672.</p> <p><code>connection_vhost</code></p> <p>(optional, string) Virtual host to connect, on an http(s) connection would be <code>http://IP/&lt;your virtual host&gt;</code>.</p> <p><code>content_type</code></p> <p>(optional, string) Content type to deliver to AMQP server. Currently only supports <code>application/json</code>.</p> <p><code>delivery_mode</code></p> <p>(optional, integer) Allowed values:</p> <ul> <li><code>1</code> - Non-persistent delivery.</li> <li><code>2</code> - Persistent delivery. Messages are delivered to 'durable' queues and will be saved to disk.</li> </ul> <p><code>exchange_durable</code></p> <p>(optional, boolean) When set to true, the exchange will survive broker restart, otherwise will be a transient exchange.</p> <p><code>exchange_name</code></p> <p>(optional, string) The name of the exchange to use.</p> <p><code>exchange_type</code></p> <p>(optional, string) Type of the exchange, e.g. <code>topic</code>, <code>fanout</code> etc.</p> <p><code>keep_raw_field</code></p> <p>(optional, boolean) Whether to keep the <code>raw</code> field or not. Defaults to false.</p> <p><code>password</code></p> <p>(optional, boolean) Password for authentication on your AMQP server. Leave empty if authentication is not required.</p> <p><code>require_confirmation</code></p> <p>(optional, boolean) If set to True, an exception will be raised if a confirmation error is received.</p> <p><code>routing_key</code></p> <p>(required, string) The routing key for your amqptopic.</p> <p><code>single_key</code></p> <p>(optional, boolean) Only send the field instead of the full event (expecting a field name as string). Defaults to false.</p> <p><code>username</code></p> <p>(required, string) Username for authentication on your AMQP server.</p> <p><code>use_ssl</code></p> <p>(optional, boolean) Use ssl for the connection, make sure to also set the correct port, usually 5671. Defaults to false.</p> <p><code>message_hierarchical_output</code></p> <p>(optional, boolean) Convert the message to hierarchical JSON. Defaults to false.</p> <p><code>message_with_type</code></p> <p>(optional, boolean) Whether to include the type in the sent message. Defaults to false.</p> <p><code>message_jsondict_as_string</code></p> <p>(optional, boolean) Whether to convert JSON fields (<code>extra</code>) to string. Defaults to false.</p> <p>Examples of usage</p> <ul> <li>Useful to send events to a RabbitMQ exchange topic to be further processed in other platforms.</li> </ul> <p>Confirmation</p> <p>If routing key or exchange name are invalid or non existent, the message is accepted by the server but we receive no confirmation. If parameter require_confirmation is True and no confirmation is received, an error is raised.</p> <p>Common errors</p> <p>Unroutable messages / Undefined destination queue</p> <p>The destination exchange and queue need to exist beforehand, with your preferred settings (e.g. durable, lazy queue. If the error message says that the message is \"unroutable\", the queue doesn't exist.</p>"},{"location":"user/bots/#blackhole","title":"Blackhole","text":"<p>This bot discards all incoming messages.</p> <p>Module: <code>intelmq.bots.outputs.blackhole.output</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#bro-file","title":"Bro File","text":"<p>This bot outputs to BRO (zeek) file.</p> <p>File example:</p> <pre><code>#fields indicator indicator_type meta.desc meta.cif_confidence meta.source xxx.xxx.xxx.xxx Intel::ADDR phishing 100 MISP XXX www.testdomain.com Intel::DOMAIN apt 85 CERT\n</code></pre> <p>Module: <code>intelmq.bots.outputs.bro_file.output</code></p> <p>No additional parameters.</p>"},{"location":"user/bots/#cifv3-api","title":"CIFv3 API","text":"<p>This bot outputs to a CIFv3 API instance and adds new indicator if not there already.</p> <p>By default, CIFv3 does an upsert check and will only insert entirely new indicators. Otherwise, upsert matches will have their count increased by 1. By default, the CIF3 output bot will batch indicators up to 500 at a time prior to doing a single bulk send. If the output bot doesn't receive a full 500 indicators within 5 seconds of the first received indicator, it will send what it has so far.</p> <p>CIFv3 should be able to process indicators as fast as IntelMQ can send them.</p> <p>Module: <code>intelmq.bots.outputs.cif3.output</code></p> <p>Parameters:</p> <p><code>add_feed_provider_as_tag</code></p> <p>(required, boolean) Use <code>false</code> when in doubt.</p> <p><code>cif3_additional_tags</code></p> <p>(required, array of strings) An array of tags to set on submitted indicator(s).</p> <p><code>cif3_feed_confidence</code></p> <p>(required, float) Used when mapping a feed's confidence fails or if static confidence parameter is true.</p> <p><code>cif3_static_confidence</code></p> <p>(required, boolean) Whether to always use <code>cif3_feed_confidence</code> value as confidence rather than dynamically interpret feed value (use <code>false</code> when in doubt).</p> <p><code>cif3_token</code></p> <p>(required, string) Token key for accessing CIFv3 API.</p> <p><code>cif3_url</code></p> <p>(required, string) URL of the CIFv3 instance.</p> <p><code>fireball</code></p> <p>(required, integer) Used to batch events before submitting to a CIFv3 instance, use 0 to disable batch and send each event as received. Defaults to 500.</p> <p><code>http_verify_cert</code></p> <p>(optional, boolean) Verify the TLS certificate of the server. Defaults to true.</p>"},{"location":"user/bots/#elasticsearch","title":"Elasticsearch","text":"<p>This bot outputs to Elasticsearch.</p> <p>Module: <code>intelmq.bots.outputs.elasticsearch.output</code></p> <ul> <li><code>lookup</code>: yes</li> <li><code>public</code>: yes</li> <li><code>cache</code>: no</li> <li><code>description</code>: Output Bot that sends events to Elasticsearch</li> </ul> <p>Only ElasticSearch version 7 supported.</p> <p>It is also possible to feed data into ElasticSearch using ELK-Stack via Redis and Logstash, see <code>ELK-Stack</code> {.interpreted-text role=\"doc\"} for more information. This methods supports various different versions of ElasticSearch.</p> <p>Parameters:</p> <p><code>elastic_host</code></p> <p>(optional, string) Name/IP for the Elasticsearch server. Defaults to 127.0.0.1.</p> <p><code>elastic_port</code></p> <p>(optional, int) Port for the Elasticsearch server. Defaults to 9200.</p> <p><code>elastic_index</code></p> <p>(optional, string) Index for the Elasticsearch output. Defaults to intelmq.</p> <p><code>rotate_index</code></p> <p>(optional, string) Allowed values: <code>never</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code> or <code>yearly</code>. If set, will index events using the date information associated with the event. Defaults to never.</p> <p>Using 'intelmq' as the <code>elastic_index</code>, the following are examples of the generated index names:</p> <pre><code>'never' --&gt; intelmq\n'daily' --&gt; intelmq-2018-02-02\n'weekly' --&gt; intelmq-2018-42\n'monthly' --&gt; intelmq-2018-02\n'yearly' --&gt; intelmq-2018\n</code></pre> <p><code>http_username</code></p> <p>(optional, string) HTTP basic authentication username.</p> <p><code>http_password</code></p> <p>(optional, string) HTTP basic authentication password.</p> <p><code>use_ssl</code></p> <p>(optional, boolean) Whether to use SSL/TLS when connecting to Elasticsearch. Defaults to false.</p> <p><code>http_verify_cert</code></p> <p>(optional, boolean) Whether to require verification of the server's certificate. Defaults to false.</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) Path to trusted CA certificate.</p> <p><code>ssl_show_warnings</code></p> <p>(optional, boolean) Whether to show warnings if the server's certificate cannot be verified. Defaults to true.</p> <p><code>replacement_char</code></p> <p>(optional, string) If set, dots ('.') in field names will be replaced with this character prior to indexing. This is for backward compatibility with ES 2.X. Defaults to null. Recommended for Elasticsearch 2.X: <code>_</code></p> <p><code>flatten_fields</code></p> <p>(optional, array of strings) In ES, some query and aggregations work better if the fields are flat and not JSON. Here you can provide a list of fields to convert. Defaults to <code>['extra']</code>.</p> <p>Can be a list of strings (fieldnames) or a string with field names separated by a comma (,). eg <code>extra,field2</code> or <code>['extra', 'field2']</code>.</p> <p>See <code>contrib/elasticsearch/elasticmapper</code> for a utility for creating Elasticsearch mappings and templates.</p> <p>If using <code>rotate_index</code>, the resulting index name will be of the form <code>elastic_index</code>-<code>event date</code>. To query all intelmq indices at once, use an alias (https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html), or a multi-index query.</p> <p>The data in ES can be retrieved with the HTTP-Interface:</p> <pre><code> curl -XGET 'http://localhost:9200/intelmq/events/_search?pretty=True'\n</code></pre>"},{"location":"user/bots/#file_1","title":"File","text":"<p>This bot outputs messages (reports or events) to a file.</p> <p>Multihreading is disabled for this bot, as this would lead to corrupted files.</p> <p>Module: <code>intelmq.bots.outputs.file.output</code></p> <p>Parameters:</p> <p><code>encoding_errors_mode</code></p> <p>(optional, string) See for more details and options: https://docs.python.org/3/library/functions.html#open For example with <code>backslashreplace</code> all characters which cannot be properly encoded will be written escaped with backslashes. Defaults to <code>strict</code>.</p> <p><code>file</code></p> <p>(optional, string) Path to the output file. Missing directories will be created if possible with the mode 755. Defaults to <code>/opt/intelmq/var/lib/bots/file-output/events.txt</code>.</p> <p><code>format_filename</code></p> <p>(optional, boolean) Whether the file name should be formatted. Defaults to false.</p> <p>Uses Python formatted strings. See: https://docs.python.org/3/library/string.html#formatstrings</p> <p>Example:</p> <ul> <li>The filename <code>.../{event[source.abuse_contact]}.txt</code> will be (for example) <code>.../abuse@example.com.txt</code>.</li> <li><code>.../{event[time.source]:%Y-%m-%d}</code> results in the date of the event used as filename.</li> </ul> <p>If the field used in the format string is not defined, <code>None</code> will be used as fallback.</p> <p><code>hierarchical_output</code></p> <p>(optional, boolean) Whether the resulting dictionary should be hierarchical (field names split by a dot). Defaults to false.</p> <p><code>single_key</code></p> <p>(optional, string) Output only a single specified key. In case of <code>raw</code> key the data is base64 decoded. Defaults to null (output the whole message).</p>"},{"location":"user/bots/#files","title":"Files","text":"<p>This bot outputs each message to a separate file.</p> <p>Module: <code>intelmq.bots.outputs.files.output</code></p> <p>Parameters:</p> <p><code>dir</code></p> <p>(optional, string) Path to the output directory. Defaults to <code>/opt/intelmq/var/lib/bots/files-output/incoming</code>.</p> <p><code>tmp</code></p> <p>(optional, string) Temporary directory to use (must reside on the same filesystem as <code>dir</code>). Defaults to <code>/opt/intelmq/var/lib/bots/files-output/tmp</code>.</p> <p><code>suffix</code></p> <p>(optional, strings) Extension of created files. Defaults to .json.</p> <p><code>hierarchical_output</code></p> <p>(optional, boolean) Whether the resulting dictionary should be hierarchical (field names split by a dot). Defaults to false.</p> <p><code>single_key</code></p> <p>(optional, string) Output only a single specified key. In case of <code>raw</code> key the data is base64 decoded. Defaults to null (output the whole message).</p>"},{"location":"user/bots/#mcafee-enterprise-security-manager","title":"McAfee Enterprise Security Manager","text":"<p>This bot outputs messages to McAfee Enterprise Security Manager watchlist.</p> <p>Module: <code>intelmq.bots.outputs.mcafee.output_esm_ip</code></p> <p>Parameters:</p> <ul> <li>Feed parameters (see above)</li> </ul> <p><code>esm_ip</code></p> <p>(optional, string) Hostname of the ESM server. Defaults to 1.2.3.4.</p> <p><code>esm_user</code></p> <p>(optional, string) Username of user entitled to write to watchlist. Defaults to NGCP.</p> <p><code>esm_pw</code></p> <p>(required, string) Password of user entitled to write to watchlist.</p> <p><code>esm_watchlist</code></p> <p>(required, string) Name of the watchlist to write to.</p> <p><code>field</code></p> <p>(optional, string) Name of the IntelMQ field to be written to ESM. Defaults to source.ip.</p>"},{"location":"user/bots/#misp-feed","title":"MISP Feed","text":"<p>Create a directory layout in the MISP Feed format.</p> <p>The PyMISP library &gt;= 2.4.119.1 is required, see REQUIREMENTS.txt.</p> <p>Module: <code>intelmq.bots.outputs.misp.output_feed</code></p> <p>Parameters:</p> <ul> <li>Feed parameters (see above)</li> </ul> <p><code>misp_org_name</code></p> <p>() Org name which creates the event, string</p> <p><code>misp_org_uuid</code></p> <p>() Org UUID which creates the event, string</p> <p><code>output_dir</code></p> <p>() Output directory path, e.g. [/opt/intelmq/var/lib/bots/mispfeed-output]. Will be created if it does not exist and possible.</p> <p><code>interval_event</code></p> <p>() The output bot creates one event per each interval, all data in this time frame is part of this event. Default \"1 hour\", string.</p> <p>Usage in MISP</p> <p>Configure the destination directory of this feed as feed in MISP, either as local location, or served via a web server. See the MISP documentation on Feeds for more information</p>"},{"location":"user/bots/#misp-api","title":"MISP API","text":"<p>Module: <code>intelmq.bots.outputs.misp.output_api</code></p> <p>Connect to a MISP instance and add event as MISPObject if not there already.</p> <p>The PyMISP library &gt;= 2.4.120 is required, see REQUIREMENTS.txt.</p> <p>Parameters:</p> <ul> <li>Feed parameters (see above)</li> </ul> <p><code>add_feed_provider_as_tag</code></p> <p>() boolean (use [true] when in doubt)</p> <p><code>add_feed_name_as_tag</code></p> <p>() boolean (use [true] when in doubt)</p> <p><code>misp_additional_correlation_fields</code></p> <p>() list of fields for which the correlation flags will be enabled (in addition to those which are in significant_fields)</p> <p><code>misp_additional_tags</code></p> <p>() list of tags to set not be searched for when looking for duplicates</p> <p><code>misp_key</code></p> <p>() string, API key for accessing MISP</p> <p><code>misp_publish</code></p> <p>() boolean, if a new MISP event should be set to \"publish\".</p> <p>Expert setting as MISP may really make it \"public\"! (Use [false] when in doubt.)</p> <p><code>misp_tag_for_bot</code></p> <p>() string, used to mark MISP events</p> <p><code>misp_to_ids_fields</code></p> <p>() list of fields for which the [to_ids] flags will be set</p> <p><code>misp_url</code></p> <p>() string, URL of the MISP server</p> <p><code>significant_fields</code></p> <p>() list of intelmq field names</p> <p>The <code>significant_fields</code> values will be searched for in all MISP attribute values and if all values are found in the same MISP event, no new MISP event will be created. Instead if the existing MISP events have the same feed.provider and match closely, their timestamp will be updated.</p> <p>If a new MISP event is inserted the <code>significant_fields</code> and the <code>misp_additional_correlation_fields</code> will be the attributes where correlation is enabled.</p> <p>Make sure to build the IntelMQ Botnet in a way the rate of incoming events is what MISP can handle, as IntelMQ can process many more events faster than MISP (which is by design as MISP is for manual handling). Also remove the fields of the IntelMQ events with an expert bot that you do not want to be inserted into MISP.</p> <p>(More details can be found in the docstring of output_api.py.</p>"},{"location":"user/bots/#mongodb","title":"MongoDB","text":"<p>MongoDB is the bot responsible to send events to a MongoDB database</p> <p>Saves events in a MongoDB either as hierarchical structure or flat with full key names. <code>time.observation</code> and <code>time.source</code> are saved as datetime objects, not as ISO formatted string.</p> <p>Module: <code>intelmq.bots.outputs.mongodb.output</code></p> <p>Requirements</p> <pre><code>pip3 install pymongo&gt;=2.7.1\n</code></pre> <p>The bot has been tested with pymongo versions 2.7.1, 3.4 and 3.10.1 (server versions 2.6.10 and 3.6.8).</p> <p>Parameters:</p> <p><code>host</code></p> <p>(optional, string) Hostname of the MongoDB server. Defaults to localhost.</p> <p><code>port</code></p> <p>(optional, integer) Port of the MongoDB server. Defaults to 27017.</p> <p><code>database</code></p> <p>(required, string) Name of the MongoDB database to use.</p> <p><code>db_user</code></p> <p>(optional, string) User that should be used if authentication is required.</p> <p><code>db_pass</code></p> <p>(optional, string) Password.</p> <p><code>collection</code></p> <p>(required, string) Name of the MongoDB collection to use.</p> <p><code>hierarchical_output</code></p> <p>(optional, boolean) MongoDB does not allow saving keys with dots, we split the dictionary in sub-dictionaries. Defaults to true.</p> <p><code>replacement_char</code></p> <p>(optional, string) Replacement character for replacing the dots in key names if hierarchical output is not used. Defaults to <code>_</code>.</p>"},{"location":"user/bots/#redis","title":"Redis","text":"<p>This bot outputs events to a remote Redis server/queue.</p> <p>Examples of usage</p> <ul> <li>Can be used to send events to be processed in another system. E.g.: send events to Logstash.</li> <li>In a multi tenant installation can be used to send events to external/remote IntelMQ instance. Any expert bot queue   can receive the events.</li> <li>In a complex configuration can be used to create logical sets in IntelMQ-Manager.</li> </ul> <p>Module: <code>intelmq.bots.outputs.redis.output</code></p> <p>Parameters:</p> <p><code>redis_server_ip</code></p> <p>(optional, string) Hostname of the Redis server. Defaults to 127.0.0.1.</p> <p><code>redis_server_port</code></p> <p>(optional, integer) Port of the Redis server. Defaults to 6379.</p> <p><code>redis_db</code></p> <p>(optional, integer) Redis database number. Defaults to 2.</p> <p><code>redis_password</code></p> <p>(optional, string) Redis server password. Defaults to null.</p> <p><code>redis_queue</code></p> <p>(required, string) Redis queue name (such as <code>remote-server-queue</code>).</p> <p><code>redis_timeout</code></p> <p>(optional, integer) Connection timeout, in milliseconds. Defaults to 5000.</p> <p><code>hierarchical_output</code></p> <p>(optional, boolean) Whether the resulting dictionary should be hierarchical (field names split by a dot). Defaults to false.</p> <p><code>with_type</code></p> <p>(optional, boolean) Whether to include <code>__type</code> field. Defaults to true.</p>"},{"location":"user/bots/#request-tracker_1","title":"Request Tracker","text":"<p>Output Bot that creates Request Tracker tickets from events.</p> <p>Module: <code>intelmq.bots.outputs.rt.output</code></p> <p>Description</p> <p>The bot creates tickets in Request Tracker and uses event fields for the ticket body text. The bot follows the workflow of the RTIR:</p> <ul> <li>create ticket in Incidents queue (or any other queue)</li> <li>all event fields are included in the ticket body,</li> <li>event attributes are assigned to tickets' CFs according to the attribute mapping,</li> <li>ticket taxonomy can be assigned according to the CF mapping. If you use taxonomy different   from ENISA RSIT, consider using some   extra attribute field and do value mapping with modify or sieve bot,</li> <li>create linked ticket in Investigations queue, if these conditions are met</li> <li>if first ticket destination was Incidents queue,</li> <li>if there is source.abuse_contact is specified,</li> <li>if description text is specified in the field appointed by configuration,</li> <li>RT/RTIR supposed to do relevant notifications by script working on condition \"On Create\",</li> <li>configuration option investigation_fields specifies which event fields has to be included in the investigation,</li> <li>Resolve Incident ticket, according to configuration (Investigation ticket status should depend on RT script   configuration),</li> </ul> <p>Take extra caution not to flood your ticketing system with enormous amount of tickets. Add extra filtering for that to pass only critical events to the RT, and/or deduplicating events.</p> <p>Parameters:</p> <p><code>rt_uri</code></p> <p>()</p> <p><code>rt_user</code></p> <p>()</p> <p><code>rt_password</code></p> <p>()</p> <p><code>verify_cert</code></p> <p>() RT API endpoint connection details, string.</p> <p><code>queue</code></p> <p>() ticket destination queue. If set to 'Incidents', 'Investigations' ticket will be created if create_investigation is set to true, string.</p> <p><code>CF_mapping</code></p> <p>(optional, object) Mapping event fields to ticket CFs. Defaults to:</p> <pre><code>classification.taxonomy: Classification\nclassification.type: Incident Type\nevent_description.text: Description\nextra.incident.importance: Importance\nextra.incident.severity: Incident Severity\nextra.organization.name: Customer\nsource.ip: IP\n</code></pre> <p><code>final_status</code></p> <p>(optional, string) The final status for the created ticket. Defaults to resolved. The linked Investigation ticket will be resolved automatically by RTIR scripts.</p> <p><code>create_investigation</code></p> <p>(optional, boolean) Whether an Investigation ticket should be created (in case of RTIR workflow). Defaults to false.</p> <p><code>investigation_fields</code></p> <p>(optional, string) Comma-separated string of attributes to include in an Investigation ticket. Defaults to <code>time.source,source.ip,source.port,source.fqdn,source.url,classification.taxonomy,classification.type,classification.identifier,event_description.url,event_description.text,malware.name,protocol.application,protocol.transport</code>.</p> <p><code>description_attr</code></p> <p>(optional, string) Event field to be used as a text message being sent to the recipient. If it is not specified or not found in the event, the Investigation ticket is not going to be created. Defaults to <code>event_decription.text</code>.</p>"},{"location":"user/bots/#rest-api","title":"REST API","text":"<p>REST API is the bot responsible to send events to a REST API listener through POST.</p> <p>Module: <code>intelmq.bots.outputs.restapi.output</code></p> <p>Parameters:</p> <p><code>host</code></p> <p>(required, host) Destination URL of the POST request.</p> <p><code>auth_type</code></p> <p>(required, string) Allowed values: <code>http_basic_auth</code> or <code>http_header</code>. Type of authentication to use.</p> <p><code>auth_token</code></p> <p>(required, string) Username or HTTP header key.</p> <p><code>auth_token_name</code></p> <p>(required, string) Password or HTTP header value.</p> <p><code>hierarchical_output</code></p> <p>(optional, boolean) Whether the resulting dictionary should be hierarchical (field names split by a dot). Defaults to false.</p> <p><code>use_json</code></p> <p>(optional, boolean) Whether to use JSON. Defaults to true.</p>"},{"location":"user/bots/#rpz-file","title":"RPZ File","text":"<p>This bot outputs events into DNS RPZ blocklist file used for \"DNS firewall\".</p> <p>The prime motivation for creating this feature was to protect users from badness on the Internet related to known-malicious global identifiers such as host names, domain names, IP addresses, or nameservers. More information: https://dnsrpz.info</p> <p>Example: <pre><code>$TTL 3600 @ SOA rpz.yourdomain.eu. hostmaster.rpz.yourdomain.eu. 2105260601 60 60 432000 60 NS localhost. ; ;\nyourdomain.eu. CERT.XX Response Policy Zones (RPZ) ; Last updated: 2021-05-26 06:01:41 (UTC) ; ; Terms Of\nUse: https://rpz.yourdomain.eu ; For questions please contact rpz [at] yourdomain.eu ; *.maliciousdomain.com CNAME\nrpz.yourdomain.eu. *.secondmaliciousdomain.com CNAME rpz.yourdomain.eu.\n</code></pre></p> <p>Module: <code>intelmq.bots.outputs.rpz_file.output</code></p> <p>Parameters:</p> <p><code>cname</code></p> <p>(optional, string) example rpz.yourdomain.eu</p> <p><code>organization_name</code></p> <p>(optional, string) Your organisation name</p> <p><code>rpz_domain</code></p> <p>(optional, string) Information website about RPZ</p> <p><code>hostmaster_rpz_domain</code></p> <p>() Technical website</p> <p><code>rpz_email</code></p> <p>() Contact email</p> <p><code>ttl</code></p> <p>() Time to live</p> <p><code>ncachttl</code></p> <p>() DNS negative cache</p> <p><code>serial</code></p> <p>() Time stamp or another numbering</p> <p><code>refresh</code></p> <p>() Refresh time</p> <p><code>retry</code></p> <p>() Retry time</p> <p><code>expire</code></p> <p>() Expiration time</p> <p><code>test_domain</code></p> <p>() For test domain, it's added in first rpz file (after header)</p>"},{"location":"user/bots/#smtp-batch","title":"SMTP Batch","text":"<p>Aggregate events by e-mail addresses in the <code>source.abuse_contact</code> field and batch send them at once as a zipped CSV file attachment in a GPG signed message.</p> <p>When the bot is run normally by IntelMQ, it just aggregates the events for later use into a custom Redis database. If run through CLI (by a cron or manually), it shows e-mail messages that are ready to be sent and let you send them to the tester's e-mail OR to abuse contact e-mails. E-mails are sent in a zipped CSV file, delimited by a comma, while keeping strings in double quotes. Note: The field \"raw\" gets base64 decoded if possible. Bytes <code>\\n</code> and <code>\\r</code> are replaced with \"\\n\" and \"\\r\" strings in order to guarantee best CSV files readability both in Microsoft Office and LibreOffice. (A multiline string may be stored in \"raw\" which completely confused Microsoft Excel.)</p> <p>Launch it like this: <pre><code>&lt;/usr/local/bin executable&gt; &lt;bot-id&gt; --cli [--tester tester's email]\n</code></pre> Example: <pre><code>intelmq.bots.outputs.smtp_batch.output smtp-batch-output --cli --tester your-email@example.com\n</code></pre></p> <p>CLI flags: <pre><code>-h, --help            show this help message and exit\n--cli                 initiate CLI interface\n--tester TESTING_TO   tester's e-mail\n--ignore-older-than-days IGNORE_OLDER_THAN_DAYS\n                      1..n skip all events with time.observation older than 1..n day; 0 disabled (allow all)\n--gpg-key GPG_KEY     fingerprint of gpg key to be used\n--limit-results LIMIT_RESULTS\n                      Just send first N mails.\n--send                Sends now, without dialog.\n</code></pre></p> <p>You can schedule the batch sending easily with a cron script, I.E. put this into <code>crontab -e</code> of the <code>intelmq</code> user:</p> <pre><code># Send the e-mails every day at 6 AM\n0 6 * * *  /usr/local/bin/intelmq.bots.outputs.smtp_batch.output smtp-batch-output-cz cli --ignore-older-than-days 4 --send &amp;&gt; /tmp/intelmq-send.log\n</code></pre> <p>Module: <code>intelmq.bots.outputs.smtp_batch.output</code></p> <p>Parameters:</p> <p><code>alternative_mails</code></p> <p>(optional, string) Path to CSV in the form <code>original@email.com,alternative@email.com</code>. Needed when some of the recipients ask you to forward their e-mails to another address. Delimit multiple recipients by the semicolon. The field is internally parsed by Envelope so pretty anything is allowed:</p> <pre><code>original@email.com,alternative@email.com\noriginal2@email.com,person1@email.com;person2@email.com\noriginal3@email.com, Mary &lt;person1@example.com&gt;; John &lt;person2@example.com&gt;\n</code></pre> <p><code>attachment_name</code></p> <p>(optional, string)  Attachment file name for the outgoing messages. May contain date formatting like this <code>%Y-%m-%d</code>. Example: \"events_%Y-%m-%d\" will appear as \"events_2022-12-01.zip\". Defaults to \"intelmq_%Y-%m-%d\".</p> <p><code>bcc</code></p> <p>(optional, array of strings) An array of e-mails to be put in the <code>Bcc</code> field for every mail.</p> <p><code>email_from</code></p> <p>(required, string) Sender's e-mail of the outgoing messages.</p> <p><code>gpg_key</code></p> <p>(optional, string) The Key or the fingerprint of a GPG key stored in ~/.gnupg keyring folder.</p> <p><code>gpg_pass</code></p> <p>(optional, string) Password for the GPG key if needed.</p> <p><code>mail_template</code></p> <p>(required, string) Path to the file containing the body of the mail for the outgoing messages.</p> <p><code>ignore_older_than_days</code></p> <p>(optional, integer) Skips events with time.observation older than now-N. (If your queue gets stuck for a reason, you do not want to send old and probably already solved events.) Defaults to 0 (allow all).</p> <p><code>limit_results</code></p> <p>(optional, integer) Intended as a debugging option, allows loading just first N e-mails from the queue.</p> <p><code>redis_cache_db</code></p> <p>(required, integer)  Redis database used for event aggregation. As the databases &lt; 10 are reserved for the IntelMQ core, recommended is a bigger number.</p> <p><code>redis_cache_host</code></p> <p>(required, string) Hostname of the Redis database.</p> <p><code>redis_cache_port</code></p> <p>(required, string)  Port of the Redis database.</p> <p><code>redis_cache_ttl</code></p> <p>(required, integer) TTL in seconds used for caching. Recommended 1728000 for 20 days.</p> <p><code>smtp_server</code></p> <p>(required, string/array/object) SMTP server information and credentials. See SMTP parameter of the envelope module.</p> <p>Examples: <pre><code>smtp_server: \"mailer\"\nsmtp_server: {\"host\": \"mailer\", \"port\": 587, \"user\": \"john\", \"password\": \"123\"}\nsmtp_server: [\"mailer\", 587, \"john\", \"password\"]\n</code></pre></p> <p><code>subject</code></p> <p>(required, string) Subject for the outgoing messages. May contain date formatting like this <code>%Y-%m-%d</code>. Example: \"IntelMQ weekly warning (%d.%m.%Y)\".</p> <p><code>testing_to</code></p> <p>(optional, string) Tester's e-mail.</p>"},{"location":"user/bots/#smtp","title":"SMTP","text":"<p>Sends a MIME Multipart message containing the text and the event as CSV for every single event.</p> <p>Module: <code>intelmq.bots.outputs.smtp.output</code></p> <p>Parameters:</p> <p><code>fieldnames</code></p> <p>(optional, string/array of strings) Array of field names (or comma-separated list) to be included in the email. If empty, no attachment is sent - this can be useful if the actual data is already in the body (parameter <code>text</code>) or the <code>subject</code>.</p> <p><code>mail_from</code></p> <p>(optional, string) Sender's e-email address. Defaults to <code>cert@localhost</code>.</p> <p><code>mail_to</code></p> <p>(required, string) Comma-separated string of recipient email addresses. Supports formatting.</p> <p><code>smtp_host</code></p> <p>(optional, string) Hostname of the SMTP server. Defaults to <code>localhost</code>.</p> <p><code>smtp_password</code></p> <p>(optional, string) Password for authentication to your SMTP server. Defaults to <code>null</code>.</p> <p><code>smtp_port</code></p> <p>(optional, integer) Port of the SMTP server. Defaults to 25.</p> <p><code>smtp_username</code></p> <p>(optional, string) Username for authentication to your SMTP server. Defaults to <code>null</code>.</p> <p><code>fail_on_errors</code></p> <p>(optional, boolean) Whether any error should cause the bot to fail (raise an exception) or otherwise rollback. If false, the bot eventually waits and re-try (e.g. re-connect) etc. to solve the issue. If true, the bot raises an exception and - depending on the IntelMQ error handling configuration - stops. Defaults to false.</p> <p><code>ssl</code></p> <p>(optional, boolean) Defaults to false.</p> <p><code>starttls</code></p> <p>(optional, boolean) Defaults to true.</p> <p><code>subject</code></p> <p>(optional, string) Subject of the e-mail message. Supports formatting. Defaults to <code>Incident in your AS {ev[source.asn]}</code>.</p> <p><code>text</code></p> <p>(optional, string) Body of the e-mail message. Supports formatting. Defaults to <pre><code>Dear network owner,\n\nWe have been informed that the following device might have security problems.\n\nYour localhost CERT\n</code></pre></p> <p>For several strings you can use values from the string using the standard Python string format syntax. Access the event's values with <code>{ev[source.ip]}</code> and similar. Any not existing fields will result in <code>None</code>. For example, to set the recipient(s) to the value given in the event's <code>source.abuse_contact</code> field, use this as <code>mail_to</code> parameter: <code>{ev[source.abuse_contact]}</code></p> <p>Authentication is optional. If both username and password are given, these mechanism are tried: CRAM-MD5, PLAIN, and LOGIN.</p> <p>Client certificates are not supported. If <code>http_verify_cert</code> is true, TLS certificates are checked.</p>"},{"location":"user/bots/#sql","title":"SQL","text":"<p>SQL is the bot responsible to send events to a PostgreSQL, SQLite, or MSSQL Database.</p> <p>Note</p> <p>When activating autocommit, transactions are not used. See: http://initd.org/psycopg/docs/connection.html#connection.autocommit</p> <p>Module: <code>intelmq.bots.outputs.sql.output</code></p> <p>Parameters:</p> <p>The parameters marked with 'PostgreSQL' will be sent to libpq via psycopg2. Check the libpq parameter documentation for the versions you are using.</p> <p><code>autocommit</code></p> <p>(optional, boolean) Psycopg's autocommit mode. Defaults to true.</p> <p><code>engine</code></p> <p>(required, string) Allowed values are <code>postgresql</code>, <code>sqlite</code>, or <code>mssql</code>.</p> <p><code>database</code></p> <p>(optional, string) Database name or SQLite database file. Defaults to intelmq-events.</p> <p><code>host</code></p> <p>(optional, string) Hostname of the database server. Defaults to localhost.</p> <p><code>jsondict_as_string</code></p> <p>(optional, boolean) Whether to save JSON fields as JSON string. Defaults to true.</p> <p><code>message_jsondict_as_string</code></p> <p>(optional, boolean) Whether to save JSON fields as JSON string. Defaults to true.</p> <p><code>port</code></p> <p>(optional, integer) Port of the database server. Defaults to 5432.</p> <p><code>user</code></p> <p>(optional, string) Username for connecting to the database system. Defaults to intelmq.</p> <p><code>password</code></p> <p>(optional, string) Password for connecting to the database system. Defaults to null.</p> <p><code>sslmode</code></p> <p>(optional, string) Database sslmode, Allowed values: <code>disable</code>, <code>allow</code>, <code>prefer</code>, <code>require</code>, <code>verify-ca</code> or <code>verify-full</code>. See: https://www.postgresql.org/docs/current/static/images/libpq-connect.html#libpq-connect-sslmode. Defaults to <code>require</code>.</p> <p><code>table</code></p> <p>(optional, string) Name of the database table to use. Defaults to events.</p> <p><code>fields</code></p> <p>(optional, array) Array of event fields to output to the database. Defaults to null (use all fields).</p> <p><code>reconnect_delay</code></p> <p>(optional, integer) Number of seconds to wait before reconnecting in case of an error. Defaults to 0.</p> <p><code>fail_on_errors</code></p> <p>(optional, boolean) Whether an error should cause the bot to fail (raise an exception) or otherwise rollback. If false, the bot eventually waits and re-try (e.g. re-connect) etc. to solve the issue. If true, the bot raises an exception and - depending on the IntelMQ error handling configuration - stops. Defaults to false.</p>"},{"location":"user/bots/#stomp_1","title":"STOMP","text":"<p>This bot pushes data to any STOMP stream. STOMP stands for Streaming Text Oriented Messaging Protocol. See: https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol</p> <p>Module: <code>intelmq.bots.outputs.stomp.output</code></p> <p>Requirements</p> <p>Install the <code>stomp.py</code> library from PyPI:</p> <pre><code>pip3 install -r intelmq/bots/outputs/stomp/REQUIREMENTS.txt\n</code></pre> <p>Alternatively, you may want to install it using your OS's native packaging tools, e.g.:</p> <pre><code>apt install python3-stomp\n</code></pre> <p>Apart from that, depending on what STOMP server you connect to, you may need to obtain, from the organization or company owning the server, one or more of the following security/authentication-related resources:</p> <ul> <li>CA certificate file;</li> <li>either: client certificate and client certificate's key files,   or: username (STOMP login) and password (STOMP passcode).</li> </ul> <p>Also, you will need to know an appropriate STOMP destination (aka exchange point), e.g. <code>/exchange/_push</code>.</p> <p>Parameters:</p> <p><code>server</code></p> <p>(optional, string) STOMP server's hostname or IP, e.g. \"n6stream.cert.pl\" or \"127.0.0.1\" (which is default)</p> <p><code>port</code></p> <p>(optional, integer) STOMP server's port number (default: 61614)</p> <p><code>exchange</code></p> <p>(optional, string) STOMP destination to push at, e.g. <code>\"/exchange/_push\"</code> (which is default)</p> <p><code>heartbeat</code></p> <p>(optional, integer) Defaults to 60000.</p> <p><code>ssl_ca_certificate</code></p> <p>(optional, string) path to CA file, or empty string to load system's default CA certificates</p> <p><code>auth_by_ssl_client_certificate</code></p> <p>(optional, boolean) default: true (note: false is needed for new n6 auth)</p> <p><code>ssl_client_certificate</code></p> <p>(optional, string) Path to client certificate to use for TLS connections.</p> <p><code>ssl_client_certificate_key</code></p> <p>(optional, string) Path to client private key to use for TLS connections.</p> <p><code>username</code></p> <p>(optional, string) STOMP login (e.g., n6 user login), used only if <code>auth_by_ssl_client_certificate</code> is false</p> <p><code>password</code></p> <p>(optional, string) STOMP passcode (e.g., n6 user API key), used only if <code>auth_by_ssl_client_certificate</code> is false</p> <p><code>message_hierarchical_output</code></p> <p>(optional, boolean) Defaults to false.</p> <p><code>message_jsondict_as_string</code></p> <p>(optional, boolean) Defaults to false.</p> <p><code>message_with_type</code></p> <p>(optional, boolean) Defaults to false.</p> <p><code>single_key</code></p> <p>(optional, string) Output only a single specified key. In case of <code>raw</code> key the data is base64 decoded. Defaults to null (output the whole message).</p>"},{"location":"user/bots/#tcp_1","title":"TCP","text":"<p>TCP is the bot responsible to send events to a TCP port (Splunk, another IntelMQ, etc..).</p> <p>Multihreading is disabled for this bot.</p> <p>Sending to an IntelMQ TCP collector</p> <p>If you intend to link two IntelMQ instance via TCP, set the parameter <code>counterpart_is_intelmq</code> to true. The bot then awaits an \"Ok\" message to be received after each message is sent. The TCP collector just sends \"Ok\" after every message it gets.</p> <p>Module: <code>intelmq.bots.outputs.tcp.output</code></p> <p>Parameters:</p> <p><code>counterpart_is_intelmq</code></p> <p>(optional, boolean) Whether the receiver is an IntelMQ TCP collector bot. Defaults to true.</p> <p><code>ip</code></p> <p>(required, string) Hostname of the destination server.</p> <p><code>hierarchical_output</code></p> <p>(optional, boolean) True for a nested JSON, false for a flat JSON (when sending to a TCP collector).</p> <p><code>port</code></p> <p>(required, integer) Port of destination server.</p> <p><code>separator</code></p> <p>(optional, string) Separator of messages, e.g. \"n\", optional. When sending to a TCP collector, parameter shouldn't be present. In that case, the output waits every message is acknowledged by \"Ok\" message the TCP collector bot implements.</p>"},{"location":"user/bots/#templated-smtp","title":"Templated SMTP","text":"<p>Sends a MIME Multipart message built from an event and static text using Jinja2 templates.</p> <p>See the Jinja2 documentation at https://jinja.palletsprojects.com/.</p> <p>Authentication is attempted only if both username and password are specified.</p> <p>Templates are in Jinja2 format with the event provided in the variable <code>event</code>. E.g.:</p> <pre><code>mail_to: \"{{ event['source.abuse_contact'] }}\"\n</code></pre> <p>As an extension to the Jinja2 environment, the function <code>from_json</code> is available for parsing JSON strings into Python structures. This is useful if you want to handle complicated structures in the <code>output</code> field of an event. In that case, you would start your template with a line like:</p> <pre><code>{%- set output = from_json(event['output']) %}\n</code></pre> <p>and can then use <code>output</code> as a regular Python object in the rest of the template.</p> <p>Attachments are templated strings, especially useful for sending structured data. E.g. to send a JSON document including <code>malware.name</code> and all other fields starting with <code>source.</code>:</p> <pre><code>attachments:\n  - content-type: application/json\n    text: |\n      {\n        \"malware\": \"{{ event['malware.name'] }}\",\n        {%- set comma = joiner(\", \") %}\n        {%- for key in event %}\n           {%- if key.startswith('source.') %}\n        {{ comma() }}\"{{ key }}\": \"{{ event[key] }}\"\n           {%- endif %}\n        {%- endfor %}\n      }\n    name: report.json\n</code></pre> <p>You are responsible for making sure that the text produced by the template is valid according to the content-type.</p> <p>If you are migrating from the SMTP output bot that produced CSV format attachments, use the following configuration to produce a matching format:</p> <pre><code>attachments:\n  - content-type: text/csv\n    text: |\n      {%- set fields = [\"classification.taxonomy\", \"classification.type\", \"classification.identifier\", \"source.ip\",\"source.asn\", \"source.port\"] %}\n      {%- set sep = joiner(\";\") %}\n      {%- for field in fields %}{{ sep() }}{{ field }}{%- endfor %}\n      {% set sep = joiner(\";\") %}\n      {%- for field in fields %}{{ sep() }}{{ event[field] }}{%- endfor %}\n    name: event.csv\n</code></pre> <p>Module: <code>intelmq.bots.outputs.templated_smtp.output</code></p> <p>Requirements</p> <p>Install the required <code>jinja2</code> library:</p> <pre><code>pip3 install -r intelmq/bots/collectors/templated_smtp/REQUIREMENTS.txt\n</code></pre> <p>Parameters:</p> <p><code>attachments</code></p> <p>(required, array of objects) Each object must have <code>content-type</code>, <code>text</code> (attachment text) and <code>name</code> (filename of the attachment) fields.</p> <pre><code>- content-type: simple string/jinja template\n  text: simple string/jinja template\n  name: simple string/jinja template\n</code></pre> <p><code>body</code></p> <p>(optional, string) Simple string or Jinja template. The default body template prints every field in the event except <code>raw</code>, in undefined order, one field per line, as \"field: value\".</p> <p><code>mail_from</code></p> <p>(optional, string) Simple string or Jinja template. Sender's address.</p> <p><code>mail_to</code></p> <p>(required, string) Simple string or Jinja template. Comma-separated array of recipient addresses.</p> <p><code>smtp_host</code></p> <p>(optional, string) Hostname of the SMTP server. Defaults to localhost.</p> <p><code>smtp_password</code></p> <p>(optional, string) Password (if any) for authenticated SMTP. Defaults to null.</p> <p><code>smtp_port</code></p> <p>(optional, integer) TCP port to connect to. Defaults to 25.</p> <p><code>smtp_username</code></p> <p>(optional, string)  Username (if any) for authenticated SMTP. Defaults to null.</p> <p><code>tls</code></p> <p>(optional, boolean) Whether to use use SMTPS. When true, also set smtp_port to the SMTPS port. Defaults to false.</p> <p><code>starttls</code></p> <p>(optional, boolean) Whether to use opportunistic STARTTLS over SMTP. Defaults to true.</p> <p><code>subject</code></p> <p>(optional, string) Simple string or Jinja template. E-mail subject line. Defaults to \"IntelMQ event\".</p> <p><code>verify_cert</code></p> <p>(optional, boolean) Whether to verify the server certificate in STARTTLS or SMTPS. Defaults to true.</p>"},{"location":"user/bots/#touch","title":"Touch","text":"<p>Touches a file for every event received. Does not output the event!</p> <p>Module: <code>intelmq.bots.outputs.touch.output</code></p> <p>Parameters:</p> <p><code>path</code></p> <p>(optional, string) Path to the file to touch.</p>"},{"location":"user/bots/#udp","title":"UDP","text":"<p>Output Bot that sends events to a remote UDP server.</p> <p>Multihreading is disabled for this bot.</p> <p>Module: <code>intelmq.bots.outputs.udp.output</code></p> <p>Parameters:</p> <p><code>format</code></p> <p>(optional, string) Allowed values: <code>json</code> or <code>delimited</code>. The JSON format outputs the event 'as-is'. Delimited will deconstruct the event and print each field:value separated by the field delimit. See examples below.</p> <p><code>field_delimiter</code></p> <p>(optional, string) If the <code>format</code> is <code>delimited</code> then this parameter is used as a delimiter between fields. Defaults to <code>|</code>.</p> <p><code>header</code></p> <p>(required, string) Header text to be sent in the UDP datagram.</p> <p><code>keep_raw_field</code></p> <p>(optional, boolean) Whether to keep <code>raw</code> field. Defaults to false.</p> <p><code>udp_host</code></p> <p>(optional, string) Hostname of the destination server.</p> <p><code>udp_port</code></p> <p>(required, integer) Port of the destination server.</p> <p>Examples of usage</p> <p>Consider the following event:</p> <pre><code>{\n  \"raw\": \"MjAxNi8wNC8yNV8xMTozOSxzY2hpenppbm8ub21hcmF0aG9uLmNvbS9na0NDSnVUSE0vRFBlQ1pFay9XdFZOSERLbC1tWFllRk5Iai8sODUuMjUuMTYwLjExNCxzdGF0aWMtaXAtODUtMjUtMTYwLTExNC5pbmFkZHIuaXAtcG9vbC5jb20uLEFuZ2xlciBFSywtLDg5NzI=\",\n  \"source.asn\": 8972,\n  \"source.ip\": \"85.25.160.114\",\n  \"source.url\": \"http://schizzino.omarathon.com/gkCCJuTHM/DPeCZEk/WtVNHDKl-mXYeFNHj/\",\n  \"source.reverse_dns\": \"static-ip-85-25-160-114.inaddr.ip-pool.com\",\n  \"classification.type\": \"malware-distribution\",\n  \"event_description.text\": \"Angler EK\",\n  \"feed.url\": \"http://www.malwaredomainlist.com/updatescsv.php\",\n  \"feed.name\": \"Malware Domain List\",\n  \"feed.accuracy\": 100,\n  \"time.observation\": \"2016-04-29T10:59:34+00:00\",\n  \"time.source\": \"2016-04-25T11:39:00+00:00\"\n}\n</code></pre> <p>With the following parameters:</p> <pre><code>format: json\nheader: header example\nkeep_raw_field: true\nip: 127.0.0.1\nport: 514\n</code></pre> <p>Resulting line in syslog:</p> <pre><code>Apr 29 11:01:29 header example {\"raw\": \"MjAxNi8wNC8yNV8xMTozOSxzY2hpenppbm8ub21hcmF0aG9uLmNvbS9na0NDSnVUSE0vRFBlQ1pFay9XdFZOSERLbC1tWFllRk5Iai8sODUuMjUuMTYwLjExNCxzdGF0aWMtaXAtODUtMjUtMTYwLTExNC5pbmFkZHIuaXAtcG9vbC5jb20uLEFuZ2xlciBFSywtLDg5NzI=\", \"source\": {\"asn\": 8972, \"ip\": \"85.25.160.114\", \"url\": \"http://schizzino.omarathon.com/gkCCJuTHM/DPeCZEk/WtVNHDKl-mXYeFNHj/\", \"reverse_dns\": \"static-ip-85-25-160-114.inaddr.ip-pool.com\"}, \"classification\": {\"type\": \"malware-distribution\"}, \"event_description\": {\"text\": \"Angler EK\"}, \"feed\": {\"url\": \"http://www.malwaredomainlist.com/updatescsv.php\", \"name\": \"Malware Domain List\", \"accuracy\": 100.0}, \"time\": {\"observation\": \"2016-04-29T10:59:34+00:00\", \"source\": \"2016-04-25T11:39:00+00:00\"}}\n</code></pre> <p>With the following Parameters:</p> <pre><code>field_delimiter: |\nformat: delimited\nheader: IntelMQ-event\nkeep_raw_field: false\nip: 127.0.0.1\nport: 514\n</code></pre> <p>Resulting line in syslog:</p> <pre><code>Apr 29 11:17:47 localhost IntelMQ-event|source.ip: 85.25.160.114|time.source:2016-04-25T11:39:00+00:00|feed.url:http://www.malwaredomainlist.com/updatescsv.php|time.observation:2016-04-29T11:17:44+00:00|source.reverse_dns:static-ip-85-25-160-114.inaddr.ip-pool.com|feed.name:Malware Domain List|event_description.text:Angler EK|source.url:http://schizzino.omarathon.com/gkCCJuTHM/DPeCZEk/WtVNHDKl-mXYeFNHj/|source.asn:8972|classification.type:malware-distribution|feed.accuracy:100.0\n</code></pre>"},{"location":"user/event/","title":"Event","text":""},{"location":"user/event/#event","title":"Event","text":"<p>An event represents individual piece of data processed by IntelMQ. It uses JSON format.</p> <p>Example Event:</p> <pre><code>{\n    \"source.geolocation.cc\": \"JO\",\n    \"malware.name\": \"qakbot\",\n    \"source.ip\": \"82.212.115.188\",\n    \"source.asn\": 47887,\n    \"classification.type\": \"c2-server\",\n    \"extra.status\": \"offline\",\n    \"source.port\": 443,\n    \"classification.taxonomy\": \"malicious-code\",\n    \"source.geolocation.latitude\": 31.9522,\n    \"feed.accuracy\": 100,\n    \"extra.last_online\": \"2023-02-16\",\n    \"time.observation\": \"2023-02-16T09:55:12+00:00\",\n    \"source.geolocation.city\": \"amman\",\n    \"source.network\": \"82.212.115.0/24\",\n    \"time.source\": \"2023-02-15T14:19:09+00:00\",\n    \"source.as_name\": \"NEU-AS\",\n    \"source.geolocation.longitude\": 35.939,\n    \"feed.name\": \"abusech-feodo-c2-tracker\"\n  }\n</code></pre>"},{"location":"user/event/#minimum-requirements","title":"Minimum Requirements","text":"<p>Below, we have enumerated the minimum recommended requirements for an actionable abuse event. These keys should be present for the abuse report to make sense for the end recipient. Please note that if you choose to anonymize your sources, you can substitute feed.name with feed.code. At least one of the fields ip, fqdn, url or account should be present. All the rest of the keys are optional. This list of required fields is not enforced by IntelMQ.</p> Field Terminology feed.name Should classification.type Should classification.taxonomy Should time.source Should time.observation Should source.ip Should* source.fqdn Should* source.url Should* source.account Should* <p>* at least one of them</p>"},{"location":"user/event/#classification","title":"Classification","text":"<p>IntelMQ classifies events using three labels: <code>classification.taxonomy</code>, <code>classification.type</code> and <code>classification.identifier</code>. This tuple of three values can be used for deduplication of events and describes what happened.</p> <p>The taxonomy can be automatically added by the taxonomy expert bot based on the given type. The following classification scheme loosely follows the Reference Security Incident Taxonomy (RSIT):</p> Classification Taxonomy Classification Type Description abusive-content harmful-speech Discreditation or discrimination of somebody, cyber stalking, racism or threats against one or more individuals. abusive-content spam Or 'Unsolicited Bulk Email', this means that the recipient has not granted verifiable permission for the message to be sent and that the message is sent as part of a larger collection of messages, all having a functionally comparable content. abusive-content violence Child pornography, glorification of violence, etc. availability ddos Distributed Denial of Service attack, e.g. SYN-Flood or UDP-based reflection/amplification attacks. availability dos Denial of Service attack, e.g. sending specially crafted requests to a web application which causes the application to crash or slow down. availability misconfiguration Software misconfiguration resulting in service availability issues, e.g. DNS server with outdated DNSSEC Root Zone KSK. availability outage Outage caused e.g. by air condition failure or natural disaster. availability sabotage Physical sabotage, e.g cutting wires or malicious arson. fraud copyright Offering or Installing copies of unlicensed commercial software or other copyright protected materials (Warez). fraud masquerade Type of attack in which one entity illegitimately impersonates the identity of another in order to benefit from it. fraud phishing Masquerading as another entity in order to persuade the user to reveal private credentials. fraud unauthorized-use-of-resources Using resources for unauthorized purposes including profit-making ventures, e.g. the use of e-mail to participate in illegal profit chain letters or pyramid schemes. information-content-security data-leak Leaked confidential information like credentials or personal data. information-content-security data-loss Loss of data, e.g. caused by harddisk failure or physical theft. information-content-security unauthorised-information-access Unauthorized access to information, e.g. by abusing stolen login credentials for a system or application, intercepting traffic or gaining access to physical documents. information-content-security unauthorised-information-modification Unauthorised modification of information, e.g. by an attacker abusing stolen login credentials for a system or application or a ransomware encrypting data. information-gathering scanner Attacks that send requests to a system to discover weaknesses. This also includes testing processes to gather information on hosts, services and accounts. Examples: fingerd, DNS querying, ICMP, SMTP (EXPN, RCPT, ...), port scanning. information-gathering sniffing Observing and recording of network traffic (wiretapping). information-gathering social-engineering Gathering information from a human being in a non-technical way (e.g. lies, tricks, bribes, or threats). This IOC refers to a resource, which has been observed to perform brute-force attacks over a given application protocol. intrusion-attempts brute-force Multiple login attempts (Guessing/cracking of passwords, brute force). intrusion-attempts exploit An attack using an unknown exploit. intrusion-attempts ids-alert IOCs based on a sensor network. This is a generic IOC denomination, should it be difficult to reliably denote the exact type of activity involved for example due to an anecdotal nature of the rule that triggered the alert. intrusions application-compromise Compromise of an application by exploiting (un)known software vulnerabilities, e.g. SQL injection. intrusions burglary Physical intrusion, e.g. into corporate building or data center. intrusions privileged-account-compromise Compromise of a system where the attacker gained administrative privileges. intrusions system-compromise Compromise of a system, e.g. unauthorised logins or commands. This includes compromising attempts on honeypot systems. intrusions unprivileged-account-compromise Compromise of a system using an unprivileged (user/service) account. malicious-code c2-server This is a command and control server in charge of a given number of botnet drones. malicious-code infected-system This is a compromised machine, which has been observed to make a connection to a command and control server. malicious-code malware-configuration This is a resource which updates botnet drones with a new configuration. malicious-code malware-distribution URI used for malware distribution, e.g. a download URL included in fake invoice malware spam. other blacklist Some sources provide blacklists, which clearly refer to abusive behavior, such as spamming, but fail to denote the exact reason why a given identity has been blacklisted. The reason may be that the justification is anecdotal or missing entirely. This type should only be used if the typing fits the definition of a blacklist, but an event specific denomination is not possible for one reason or another. Not in RSIT. other dga-domain DGA Domains are seen various families of malware that are used to periodically generate a large number of domain names that can be used as rendezvous points with their command and control servers. Not in RSIT. other other All incidents which don't fit in one of the given categories should be put into this class. other malware An IoC referring to a malware (sample) itself. Not in RSIT. other proxy This refers to the use of proxies from inside your network. Not in RSIT. test test Meant for testing. Not in RSIT. other tor This IOC refers to incidents related to TOR network infrastructure. Not in RSIT. other undetermined The categorisation of the incident is unknown/undetermined. vulnerable ddos-amplifier Publicly accessible services that can be abused for conducting DDoS reflection/amplification attacks, e.g. DNS open-resolvers or NTP servers with monlist enabled. vulnerable information-disclosure Publicly accessible services potentially disclosing sensitive information, e.g. SNMP or Redis. vulnerable potentially-unwanted-accessible Potentially unwanted publicly accessible services, e.g. Telnet, RDP or VNC. vulnerable vulnerable-system A system which is vulnerable to certain attacks. Example: misconfigured client proxy settings (example: WPAD), outdated operating system  version, etc. vulnerable weak-crypto Publicly accessible services offering weak crypto, e.g. web servers susceptible to POODLE/FREAK attacks."},{"location":"user/event/#meaning-of-source-and-destination-identities","title":"Meaning of source and destination identities","text":"<p>Meaning of source and destination identities for each <code>classification.type</code> can be different. Usually the main information is in the <code>source.*</code> fields.</p> <p>The <code>classification.identifier</code> is often a normalized malware name, grouping many variants or the affected network protocol.</p> <p>Examples of the meaning of the source and destination fields for various <code>classification.type</code> and possible identifiers are shown here.</p> Classification Type Source Destination Possible Identifiers blacklist blacklisted device brute-force attacker target c2-server (sinkholed) c&amp;c server zeus, palevo, feodo ddos attacker target dga-domain infected device dropzone server hosting stolen data exploit hosting server ids-alert triggering device infected-system infected device contacted c&amp;c server malware infected device zeus, palevo, feodo malware-configuration infected device malware-distribution server hosting malware phishing phishing website proxy server allowing policy/security bypass scanner scanning device scanned device http, modbus, wordpress spam infected device targeted server system-compromise server vulnerable-system vulnerable device heartbleed, openresolver, snmp, wpad <p>Examples:</p> <ul> <li> <p>If an event describes IP address that connects to a zeus command and control server, it's about the infected device. Therefore the <code>classification.taxonomy</code> is <code>malicious-code</code>, <code>classification.type</code> is <code>infected-system</code> and the <code>classification.identifier</code> is <code>zeus</code>.</p> </li> <li> <p>If an event describes IP address where a command and control server is running, the event's <code>classification.type</code> is <code>c2server</code>. The <code>malware.name</code> can have the full name, eg. <code>zeus_p2p</code>.</p> </li> </ul>"},{"location":"user/event/#additional-information","title":"Additional Information","text":"<p>Information that do not fit into any of the event fields should be placed in the <code>extra</code> namespace.Therefore the keys must be prefixed <code>extra.</code> string. There are no other rules on key names and values for additional information.</p>"},{"location":"user/event/#fields-reference","title":"Fields Reference","text":"<p>Here you can find detailed information about all the possible fields used in an event.</p>"},{"location":"user/event/#classificationidentifier","title":"<code>classification.identifier</code>","text":"<p>Type: String</p> <p>The lowercase identifier defines the actual software or service (e.g. <code>heartbleed</code> or <code>ntp_version</code>) or standardized malware name (e.g. <code>zeus</code>). Note that you MAY overwrite this field during processing for your individual setup. This field is not standardized across IntelMQ setups/users.</p>"},{"location":"user/event/#classificationtaxonomy","title":"<code>classification.taxonomy</code>","text":"<p>Type: ClassificationTaxonomy</p> <p>We recognize the need for the CSIRT teams to apply a static (incident) taxonomy to abuse data. With this goal in mind the type IOC will serve as a basis for this activity. Each value of the dynamic type mapping translates to a an element in the static taxonomy. The European CSIRT teams for example have decided to apply the eCSIRT.net incident classification. The value of the taxonomy key is thus a derivative of the dynamic type above. For more information about check <code>ENISA taxonomies &lt;http://www.enisa.europa.eu/activities/cert/support/incident-management/browsable/incident-handling-process/incident-taxonomy/existing-taxonomies&gt;</code>_.</p>"},{"location":"user/event/#classificationtype","title":"<code>classification.type</code>","text":"<p>Type: ClassificationType</p> <p>The abuse type IOC is one of the most crucial pieces of information for any given abuse event. The main idea of dynamic typing is to keep our ontology flexible, since we need to evolve with the evolving threatscape of abuse data. In contrast with the static taxonomy below, the dynamic typing is used to perform business decisions in the abuse handling pipeline. Furthermore, the value data set should be kept as minimal as possible to avoid type explosion, which in turn dilutes the business value of the dynamic typing. In general, we normally have two types of abuse type IOC: ones referring to a compromised resource or ones referring to pieces of the criminal infrastructure, such as a command and control servers for example.</p>"},{"location":"user/event/#comment","title":"<code>comment</code>","text":"<p>Type: String</p> <p>Free text commentary about the abuse event inserted by an analyst.</p>"},{"location":"user/event/#destinationabuse_contact","title":"<code>destination.abuse_contact</code>","text":"<p>Type: LowercaseString</p> <p>Abuse contact for destination address. A comma separated list.</p>"},{"location":"user/event/#destinationaccount","title":"<code>destination.account</code>","text":"<p>Type: String</p> <p>An account name or email address, which has been identified to relate to the destination of an abuse event.</p>"},{"location":"user/event/#destinationallocated","title":"<code>destination.allocated</code>","text":"<p>Type: DateTime</p> <p>Allocation date corresponding to BGP prefix.</p>"},{"location":"user/event/#destinationas_name","title":"<code>destination.as_name</code>","text":"<p>Type: String</p> <p>The autonomous system name to which the connection headed.</p>"},{"location":"user/event/#destinationasn","title":"<code>destination.asn</code>","text":"<p>Type: ASN</p> <p>The autonomous system number to which the connection headed.</p>"},{"location":"user/event/#destinationdomain_suffix","title":"<code>destination.domain_suffix</code>","text":"<p>Type: FQDN</p> <p>The suffix of the domain from the public suffix list.</p>"},{"location":"user/event/#destinationfqdn","title":"<code>destination.fqdn</code>","text":"<p>Type: FQDN</p> <p>A DNS name related to the host from which the connection originated. DNS allows even binary data in DNS, so we have to allow everything. A final point is stripped, string is converted to lower case characters.</p>"},{"location":"user/event/#destinationgeolocationcc","title":"<code>destination.geolocation.cc</code>","text":"<p>Type: UppercaseString</p> <p>Country-Code according to ISO3166-1 alpha-2 for the destination IP.</p>"},{"location":"user/event/#destinationgeolocationcity","title":"<code>destination.geolocation.city</code>","text":"<p>Type: String</p> <p>Some geolocation services refer to city-level geolocation.</p>"},{"location":"user/event/#destinationgeolocationcountry","title":"<code>destination.geolocation.country</code>","text":"<p>Type: String</p> <p>The country name derived from the ISO3166 country code (assigned to cc field).</p>"},{"location":"user/event/#destinationgeolocationlatitude","title":"<code>destination.geolocation.latitude</code>","text":"<p>Type: Float</p> <p>Latitude coordinates derived from a geolocation service, such as MaxMind geoip db.</p>"},{"location":"user/event/#destinationgeolocationlongitude","title":"<code>destination.geolocation.longitude</code>","text":"<p>Type: Float</p> <p>Longitude coordinates derived from a geolocation service, such as MaxMind geoip db.</p>"},{"location":"user/event/#destinationgeolocationregion","title":"<code>destination.geolocation.region</code>","text":"<p>Type: String</p> <p>Some geolocation services refer to region-level geolocation.</p>"},{"location":"user/event/#destinationgeolocationstate","title":"<code>destination.geolocation.state</code>","text":"<p>Type: String</p> <p>Some geolocation services refer to state-level geolocation.</p>"},{"location":"user/event/#destinationip","title":"<code>destination.ip</code>","text":"<p>Type: IPAddress</p> <p>The IP which is the target of the observed connections.</p>"},{"location":"user/event/#destinationlocal_hostname","title":"<code>destination.local_hostname</code>","text":"<p>Type: String</p> <p>Some sources report an internal hostname within a NAT related to the name configured for a compromised system</p>"},{"location":"user/event/#destinationlocal_ip","title":"<code>destination.local_ip</code>","text":"<p>Type: IPAddress</p> <p>Some sources report an internal (NATed) IP address related a compromised system. N.B. RFC1918 IPs are OK here.</p>"},{"location":"user/event/#destinationnetwork","title":"<code>destination.network</code>","text":"<p>Type: IPNetwork</p> <p>CIDR for an autonomous system. Also known as BGP prefix. If multiple values are possible, select the most specific.</p>"},{"location":"user/event/#destinationport","title":"<code>destination.port</code>","text":"<p>Type: Integer</p> <p>The port to which the connection headed.</p>"},{"location":"user/event/#destinationregistry","title":"<code>destination.registry</code>","text":"<p>Type: Registry</p> <p>The IP registry a given ip address is allocated by.</p>"},{"location":"user/event/#destinationreverse_dns","title":"<code>destination.reverse_dns</code>","text":"<p>Type: FQDN</p> <p>Reverse DNS name acquired through a reverse DNS query on an IP address. N.B. Record types other than PTR records may also appear in the reverse DNS tree. Furthermore, unfortunately, there is no rule prohibiting people from writing anything in a PTR record. Even JavaScript will work. A final point is stripped, string is converted to lower case characters.</p>"},{"location":"user/event/#destinationtor_node","title":"<code>destination.tor_node</code>","text":"<p>Type: Boolean</p> <p>If the destination IP was a known tor node.</p>"},{"location":"user/event/#destinationurl","title":"<code>destination.url</code>","text":"<p>Type: URL</p> <p>A URL denotes on IOC, which refers to a malicious resource, whose interpretation is defined by the abuse type. A URL with the abuse type phishing refers to a phishing resource.</p>"},{"location":"user/event/#destinationurlpath","title":"<code>destination.urlpath</code>","text":"<p>Type: String</p> <p>The path portion of an HTTP or related network request.</p>"},{"location":"user/event/#event_descriptiontarget","title":"<code>event_description.target</code>","text":"<p>Type: String</p> <p>Some sources denominate the target (organization) of a an attack.</p>"},{"location":"user/event/#event_descriptiontext","title":"<code>event_description.text</code>","text":"<p>Type: String</p> <p>A free-form textual description of an abuse event.</p>"},{"location":"user/event/#event_descriptionurl","title":"<code>event_description.url</code>","text":"<p>Type: URL</p> <p>A description URL is a link to a further description of the the abuse event in question.</p>"},{"location":"user/event/#event_hash","title":"<code>event_hash</code>","text":"<p>Type: UppercaseString</p> <p>Computed event hash with specific keys and values that identify a unique event. At present, the hash should default to using the SHA1 function. Please note that for an event hash to be able to match more than one event (deduplication) the receiver of an event should calculate it based on a minimal set of keys and values present in the event. Using for example the observation time in the calculation will most likely render the checksum useless for deduplication purposes.</p>"},{"location":"user/event/#extra","title":"<code>extra</code>","text":"<p>Type: JSONDict</p> <p>All anecdotal information, which cannot be parsed into the data harmonization elements. E.g. os.name, os.version, etc.  Note: this is only intended for mapping any fields which can not map naturally into the data harmonization. It is not intended for extending the data harmonization with your own fields.</p>"},{"location":"user/event/#feedaccuracy","title":"<code>feed.accuracy</code>","text":"<p>Type: Accuracy</p> <p>A float between 0 and 100 that represents how accurate the data in the feed is</p>"},{"location":"user/event/#feedcode","title":"<code>feed.code</code>","text":"<p>Type: String</p> <p>Code name for the feed, e.g. DFGS, HSDAG etc.</p>"},{"location":"user/event/#feeddocumentation","title":"<code>feed.documentation</code>","text":"<p>Type: String</p> <p>A URL or hint where to find the documentation of this feed.</p>"},{"location":"user/event/#feedname","title":"<code>feed.name</code>","text":"<p>Type: String</p> <p>Name for the feed, usually found in collector bot configuration.</p>"},{"location":"user/event/#feedprovider","title":"<code>feed.provider</code>","text":"<p>Type: String</p> <p>Name for the provider of the feed, usually found in collector bot configuration.</p>"},{"location":"user/event/#feedurl","title":"<code>feed.url</code>","text":"<p>Type: URL</p> <p>The URL of a given abuse feed, where applicable</p>"},{"location":"user/event/#malwarehashmd5","title":"<code>malware.hash.md5</code>","text":"<p>Type: String</p> <p>A string depicting an MD5 checksum for a file, be it a malware sample for example.</p>"},{"location":"user/event/#malwarehashsha1","title":"<code>malware.hash.sha1</code>","text":"<p>Type: String</p> <p>A string depicting a SHA1 checksum for a file, be it a malware sample for example.</p>"},{"location":"user/event/#malwarehashsha256","title":"<code>malware.hash.sha256</code>","text":"<p>Type: String</p> <p>A string depicting a SHA256 checksum for a file, be it a malware sample for example.</p>"},{"location":"user/event/#malwarename","title":"<code>malware.name</code>","text":"<p>Type: LowercaseString</p> <p>The malware name in lower case.</p>"},{"location":"user/event/#malwareversion","title":"<code>malware.version</code>","text":"<p>Type: String</p> <p>A version string for an identified artifact generation, e.g. a crime-ware kit.</p>"},{"location":"user/event/#mispattribute_uuid","title":"<code>misp.attribute_uuid</code>","text":"<p>Type: LowercaseString</p> <p>MISP - Malware Information Sharing Platform &amp; Threat Sharing UUID of an attribute.</p>"},{"location":"user/event/#mispevent_uuid","title":"<code>misp.event_uuid</code>","text":"<p>Type: LowercaseString</p> <p>MISP - Malware Information Sharing Platform &amp; Threat Sharing UUID.</p>"},{"location":"user/event/#output","title":"<code>output</code>","text":"<p>Type: JSON</p> <p>Event data converted into foreign format, intended to be exported by output plugin.</p>"},{"location":"user/event/#protocolapplication","title":"<code>protocol.application</code>","text":"<p>Type: LowercaseString</p> <p>e.g. vnc, ssh, sip, irc, http or smtp.</p>"},{"location":"user/event/#protocoltransport","title":"<code>protocol.transport</code>","text":"<p>Type: LowercaseString</p> <p>e.g. tcp, udp, icmp.</p>"},{"location":"user/event/#raw","title":"<code>raw</code>","text":"<p>Type: Base64</p> <p>The original line of the event from encoded in base64.</p>"},{"location":"user/event/#rtir_id","title":"<code>rtir_id</code>","text":"<p>Type: Integer</p> <p>Request Tracker Incident Response ticket id.</p>"},{"location":"user/event/#screenshot_url","title":"<code>screenshot_url</code>","text":"<p>Type: URL</p> <p>Some source may report URLs related to a an image generated of a resource without any metadata. Or an URL pointing to resource, which has been rendered into a webshot, e.g. a PNG image and the relevant metadata related to its retrieval/generation.</p>"},{"location":"user/event/#sourceabuse_contact","title":"<code>source.abuse_contact</code>","text":"<p>Type: LowercaseString</p> <p>Abuse contact for source address. A comma separated list.</p>"},{"location":"user/event/#sourceaccount","title":"<code>source.account</code>","text":"<p>Type: String</p> <p>An account name or email address, which has been identified to relate to the source of an abuse event.</p>"},{"location":"user/event/#sourceallocated","title":"<code>source.allocated</code>","text":"<p>Type: DateTime</p> <p>Allocation date corresponding to BGP prefix.</p>"},{"location":"user/event/#sourceas_name","title":"<code>source.as_name</code>","text":"<p>Type: String</p> <p>The autonomous system name from which the connection originated.</p>"},{"location":"user/event/#sourceasn","title":"<code>source.asn</code>","text":"<p>Type: ASN</p> <p>The autonomous system number from which originated the connection.</p>"},{"location":"user/event/#sourcedomain_suffix","title":"<code>source.domain_suffix</code>","text":"<p>Type: FQDN</p> <p>The suffix of the domain from the public suffix list.</p>"},{"location":"user/event/#sourcefqdn","title":"<code>source.fqdn</code>","text":"<p>Type: FQDN</p> <p>A DNS name related to the host from which the connection originated. DNS allows even binary data in DNS, so we have to allow everything. A final point is stripped, string is converted to lower case characters.</p>"},{"location":"user/event/#sourcegeolocationcc","title":"<code>source.geolocation.cc</code>","text":"<p>Type: UppercaseString</p> <p>Country-Code according to ISO3166-1 alpha-2 for the source IP.</p>"},{"location":"user/event/#sourcegeolocationcity","title":"<code>source.geolocation.city</code>","text":"<p>Type: String</p> <p>Some geolocation services refer to city-level geolocation.</p>"},{"location":"user/event/#sourcegeolocationcountry","title":"<code>source.geolocation.country</code>","text":"<p>Type: String</p> <p>The country name derived from the ISO3166 country code (assigned to cc field).</p>"},{"location":"user/event/#sourcegeolocationcymru_cc","title":"<code>source.geolocation.cymru_cc</code>","text":"<p>Type: UppercaseString</p> <p>The country code denoted for the ip by the Team Cymru asn to ip mapping service.</p>"},{"location":"user/event/#sourcegeolocationgeoip_cc","title":"<code>source.geolocation.geoip_cc</code>","text":"<p>Type: UppercaseString</p> <p>MaxMind Country Code (ISO3166-1 alpha-2).</p>"},{"location":"user/event/#sourcegeolocationlatitude","title":"<code>source.geolocation.latitude</code>","text":"<p>Type: Float</p> <p>Latitude coordinates derived from a geolocation service, such as MaxMind geoip db.</p>"},{"location":"user/event/#sourcegeolocationlongitude","title":"<code>source.geolocation.longitude</code>","text":"<p>Type: Float</p> <p>Longitude coordinates derived from a geolocation service, such as MaxMind geoip db.</p>"},{"location":"user/event/#sourcegeolocationregion","title":"<code>source.geolocation.region</code>","text":"<p>Type: String</p> <p>Some geolocation services refer to region-level geolocation.</p>"},{"location":"user/event/#sourcegeolocationstate","title":"<code>source.geolocation.state</code>","text":"<p>Type: String</p> <p>Some geolocation services refer to state-level geolocation.</p>"},{"location":"user/event/#sourceip","title":"<code>source.ip</code>","text":"<p>Type: IPAddress</p> <p>The ip observed to initiate the connection</p>"},{"location":"user/event/#sourcelocal_hostname","title":"<code>source.local_hostname</code>","text":"<p>Type: String</p> <p>Some sources report a internal hostname within a NAT related to the name configured for a compromised system</p>"},{"location":"user/event/#sourcelocal_ip","title":"<code>source.local_ip</code>","text":"<p>Type: IPAddress</p> <p>Some sources report a internal (NATed) IP address related a compromised system. N.B. RFC1918 IPs are OK here.</p>"},{"location":"user/event/#sourcenetwork","title":"<code>source.network</code>","text":"<p>Type: IPNetwork</p> <p>CIDR for an autonomous system. Also known as BGP prefix. If multiple values are possible, select the most specific.</p>"},{"location":"user/event/#sourceport","title":"<code>source.port</code>","text":"<p>Type: Integer</p> <p>The port from which the connection originated.</p>"},{"location":"user/event/#sourceregistry","title":"<code>source.registry</code>","text":"<p>Type: Registry</p> <p>The IP registry a given ip address is allocated by.</p>"},{"location":"user/event/#sourcereverse_dns","title":"<code>source.reverse_dns</code>","text":"<p>Type: FQDN</p> <p>Reverse DNS name acquired through a reverse DNS query on an IP address. N.B. Record types other than PTR records may also appear in the reverse DNS tree. Furthermore, unfortunately, there is no rule prohibiting people from writing anything in a PTR record. Even JavaScript will work. A final point is stripped, string is converted to lower case characters.</p>"},{"location":"user/event/#sourcetor_node","title":"<code>source.tor_node</code>","text":"<p>Type: Boolean</p> <p>If the source IP was a known tor node.</p>"},{"location":"user/event/#sourceurl","title":"<code>source.url</code>","text":"<p>Type: URL</p> <p>A URL denotes an IOC, which refers to a malicious resource, whose interpretation is defined by the abuse type. A URL with the abuse type phishing refers to a phishing resource.</p>"},{"location":"user/event/#sourceurlpath","title":"<code>source.urlpath</code>","text":"<p>Type: String</p> <p>The path portion of an HTTP or related network request.</p>"},{"location":"user/event/#status","title":"<code>status</code>","text":"<p>Type: String</p> <p>Status of the malicious resource (phishing, dropzone, etc), e.g. online, offline.</p>"},{"location":"user/event/#timeobservation","title":"<code>time.observation</code>","text":"<p>Type: DateTime</p> <p>The time the collector of the local instance processed (observed) the event.</p>"},{"location":"user/event/#timesource","title":"<code>time.source</code>","text":"<p>Type: DateTime</p> <p>The time of occurrence of the event as reported the feed (source).</p>"},{"location":"user/event/#tlp","title":"<code>tlp</code>","text":"<p>Type: TLP</p> <p>Traffic Light Protocol level of the event.</p>"},{"location":"user/feeds/","title":"Feeds","text":""},{"location":"user/feeds/#feeds","title":"Feeds","text":"<p>The available feeds are grouped by the provider of the feeds. For each feed the collector and parser that can be used is documented as well as any feed-specific parameters. To add feeds to this file add them to <code>intelmq/etc/feeds.yaml</code> and then rebuild the documentation.</p>"},{"location":"user/feeds/#abusech","title":"Abuse.ch","text":""},{"location":"user/feeds/#feodo-tracker","title":"Feodo Tracker","text":"<p>List of botnet Command &amp; Control servers (C&amp;Cs) tracked by Feodo Tracker, associated with Dridex and Emotet (aka Heodo).</p> <p>Public: yes</p> <p>Revision: 2022-11-15</p> <p>Documentation: https://feodotracker.abuse.ch/</p> <p>Additional Information: The data in the column Last Online is used for <code>time.source</code> if available, with 00:00 as time. Otherwise first_seen is used as <code>time.source</code>.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://feodotracker.abuse.ch/downloads/ipblocklist.json\n  name: Feodo Tracker\n  provider: Abuse.ch\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.abusech.parser_feodotracker\n</code></pre>"},{"location":"user/feeds/#urlhaus","title":"URLhaus","text":"<p>URLhaus is a project from abuse.ch with the goal of sharing malicious URLs that are being used for malware distribution. URLhaus offers a country, ASN (AS number) and Top Level Domain (TLD) feed for network operators / Internet Service Providers (ISPs), Computer Emergency Response Teams (CERTs) and domain registries.</p> <p>Public: yes</p> <p>Revision: 2020-07-07</p> <p>Documentation: https://urlhaus.abuse.ch/feeds/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://urlhaus.abuse.ch/feeds/tld/&lt;TLD&gt;/, https://urlhaus.abuse.ch/feeds/country/&lt;CC&gt;/, or https://urlhaus.abuse.ch/feeds/asn/&lt;ASN&gt;/\n  name: URLhaus\n  provider: Abuse.ch\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.generic.parser_csv\nparameters:\n  columns: [\"time.source\", \"source.url\", \"status\", \"classification.type|__IGNORE__\", \"source.fqdn|__IGNORE__\", \"source.ip\", \"source.asn\", \"source.geolocation.cc\"]\n  default_url_protocol: http://\n  delimiter: ,\n  skip_header: False\n  type_translation: [{\"malware_download\": \"malware-distribution\"}]\n</code></pre>"},{"location":"user/feeds/#alienvault","title":"AlienVault","text":""},{"location":"user/feeds/#otx","title":"OTX","text":"<p>AlienVault OTX Collector is the bot responsible to get the report through the API. Report could vary according to subscriptions.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://otx.alienvault.com/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.alienvault_otx.collector\nparameters:\n  api_key: {{ your API key }}\n  name: OTX\n  provider: AlienVault\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.alienvault.parser_otx\n</code></pre>"},{"location":"user/feeds/#reputation-list","title":"Reputation List","text":"<p>List of malicious IPs.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://reputation.alienvault.com/reputation.data\n  name: Reputation List\n  provider: AlienVault\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.alienvault.parser\n</code></pre>"},{"location":"user/feeds/#anubisnetworks","title":"AnubisNetworks","text":""},{"location":"user/feeds/#cyberfeed-stream","title":"Cyberfeed Stream","text":"<p>Fetches and parsers the Cyberfeed data stream.</p> <p>Public: no</p> <p>Revision: 2020-06-15</p> <p>Documentation: https://www.anubisnetworks.com/ https://www.bitsight.com/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http_stream\nparameters:\n  http_url: https://prod.cyberfeed.net/stream?key={{ your API key }}\n  name: Cyberfeed Stream\n  provider: AnubisNetworks\n  strip_lines: true\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.anubisnetworks.parser\nparameters:\n  use_malware_familiy_as_classification_identifier: True\n</code></pre>"},{"location":"user/feeds/#bambenek","title":"Bambenek","text":""},{"location":"user/feeds/#c2-domains","title":"C2 Domains","text":"<p>Master Feed of known, active and non-sinkholed C&amp;Cs domain names. Requires access credentials.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://osint.bambenekconsulting.com/feeds/</p> <p>Additional Information: License: https://osint.bambenekconsulting.com/license.txt</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_password: __PASSWORD__\n  http_url: https://faf.bambenekconsulting.com/feeds/c2-dommasterlist.txt\n  http_username: __USERNAME__\n  name: C2 Domains\n  provider: Bambenek\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.bambenek.parser\n</code></pre>"},{"location":"user/feeds/#c2-ips","title":"C2 IPs","text":"<p>Master Feed of known, active and non-sinkholed C&amp;Cs IP addresses. Requires access credentials.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://osint.bambenekconsulting.com/feeds/</p> <p>Additional Information: License: https://osint.bambenekconsulting.com/license.txt</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_password: __PASSWORD__\n  http_url: https://faf.bambenekconsulting.com/feeds/c2-ipmasterlist.txt\n  http_username: __USERNAME__\n  name: C2 IPs\n  provider: Bambenek\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.bambenek.parser\n</code></pre>"},{"location":"user/feeds/#dga-domains","title":"DGA Domains","text":"<p>Domain feed of known DGA domains from -2 to +3 days</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://osint.bambenekconsulting.com/feeds/</p> <p>Additional Information: License: https://osint.bambenekconsulting.com/license.txt</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://faf.bambenekconsulting.com/feeds/dga-feed.txt\n  name: DGA Domains\n  provider: Bambenek\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.bambenek.parser\n</code></pre>"},{"location":"user/feeds/#benkow","title":"Benkow","text":""},{"location":"user/feeds/#malware-panels-tracker","title":"Malware Panels Tracker","text":"<p>Benkow Panels tracker is a list of fresh panel from various malware. The feed is available on the webpage: http://benkow.cc/passwords.php</p> <p>Public: yes</p> <p>Revision: 2022-11-16</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: http://benkow.cc/export.php\n  name: Malware Panels Tracker\n  provider: Benkow\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.generic.parser_csv\nparameters:\n  columns: [\"__IGNORE__\", \"malware.name\", \"source.url\", \"source.fqdn|source.ip\", \"time.source\"]\n  columns_required: [false, true, true, false, true]\n  defaults_fields: {'classification.type': 'c2-server'}\n  delimiter: ;\n  skip_header: True\n</code></pre>"},{"location":"user/feeds/#blocklistde","title":"Blocklist.de","text":""},{"location":"user/feeds/#apache","title":"Apache","text":"<p>Blocklist.DE Apache Collector is the bot responsible to get the report from source of information. All IP addresses which have been reported within the last 48 hours as having run attacks on the service Apache, Apache-DDOS, RFI-Attacks.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/apache.txt\n  name: Apache\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#bots","title":"Bots","text":"<p>Blocklist.DE Bots Collector is the bot responsible to get the report from source of information. All IP addresses which have been reported within the last 48 hours as having run attacks attacks on the RFI-Attacks, REG-Bots, IRC-Bots or BadBots (BadBots = he has posted a Spam-Comment on a open Forum or Wiki).</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/bots.txt\n  name: Bots\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#brute-force-logins","title":"Brute-force Logins","text":"<p>Blocklist.DE Brute-force Login Collector is the bot responsible to get the report from source of information. All IPs which attacks Joomlas, Wordpress and other Web-Logins with Brute-Force Logins.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/bruteforcelogin.txt\n  name: Brute-force Logins\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#ftp","title":"FTP","text":"<p>Blocklist.DE FTP Collector is the bot responsible to get the report from source of information. All IP addresses which have been reported within the last 48 hours for attacks on the Service FTP.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/ftp.txt\n  name: FTP\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#imap","title":"IMAP","text":"<p>Blocklist.DE IMAP Collector is the bot responsible to get the report from source of information. All IP addresses which have been reported within the last 48 hours for attacks on the service like IMAP, SASL, POP3, etc.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/imap.txt\n  name: IMAP\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#irc-bots","title":"IRC Bots","text":"<p>No description provided by feed provider.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/ircbot.txt\n  name: IRC Bots\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#mail","title":"Mail","text":"<p>Blocklist.DE Mail Collector is the bot responsible to get the report from source of information. All IP addresses which have been reported within the last 48 hours as having run attacks on the service Mail, Postfix.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/mail.txt\n  name: Mail\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#sip","title":"SIP","text":"<p>Blocklist.DE SIP Collector is the bot responsible to get the report from source of information. All IP addresses that tried to login in a SIP-, VOIP- or Asterisk-Server and are included in the IPs-List from http://www.infiltrated.net/ (Twitter).</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/sip.txt\n  name: SIP\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#ssh","title":"SSH","text":"<p>Blocklist.DE SSH Collector is the bot responsible to get the report from source of information. All IP addresses which have been reported within the last 48 hours as having run attacks on the service SSH.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/ssh.txt\n  name: SSH\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#strong-ips","title":"Strong IPs","text":"<p>Blocklist.DE Strong IPs Collector is the bot responsible to get the report from source of information. All IPs which are older then 2 month and have more then 5.000 attacks.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://www.blocklist.de/en/export.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.blocklist.de/lists/strongips.txt\n  name: Strong IPs\n  provider: Blocklist.de\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blocklistde.parser\n</code></pre>"},{"location":"user/feeds/#blueliv","title":"Blueliv","text":""},{"location":"user/feeds/#crimeserver","title":"CrimeServer","text":"<p>Blueliv Crimeserver Collector is the bot responsible to get the report through the API.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.blueliv.com/</p> <p>Additional Information: The service uses a different API for free users and paying subscribers. In 'CrimeServer' feed the difference lies in the data points present in the feed. The non-free API available from Blueliv contains, for this specific feed, following extra fields not present in the free API; \"_id\" - Internal unique ID \"subType\" - Subtype of the Crime Server \"countryName\" - Country name where the Crime Server is located, in English \"city\" - City where the Crime Server is located \"domain\" - Domain of the Crime Server \"host\" - Host of the Crime Server \"createdAt\" - Date when the Crime Server was added to Blueliv CrimeServer database \"asnCidr\" - Range of IPs that belong to an ISP (registered via Autonomous System Number (ASN)) \"asnId\" - Identifier of an ISP registered via ASN \"asnDesc\" Description of the ISP registered via ASN</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.blueliv.collector_crimeserver\nparameters:\n  api_key: __APIKEY__\n  name: CrimeServer\n  provider: Blueliv\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.blueliv.parser_crimeserver\n</code></pre>"},{"location":"user/feeds/#cert-bund","title":"CERT-Bund","text":""},{"location":"user/feeds/#cb-report-malware-infections-via-imap","title":"CB-Report Malware infections via IMAP","text":"<p>CERT-Bund sends reports for the malware-infected hosts.</p> <p>Public: no</p> <p>Revision: 2020-08-20</p> <p>Additional Information: Traffic from malware related hosts contacting command-and-control servers is caught and sent to national CERT teams. There are two e-mail feeds with identical CSV structure -- one reports on general malware infections, the other on the Avalanche botnet.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.mail.collector_mail_attach\nparameters:\n  attach_regex: events.csv\n  extract_files: False\n  folder: INBOX\n  mail_host: __HOST__\n  mail_password: __PASSWORD__\n  mail_ssl: True\n  mail_user: __USERNAME__\n  name: CB-Report Malware infections via IMAP\n  provider: CERT-Bund\n  rate_limit: 86400\n  subject_regex: ^\\\\[CB-Report#.* Malware infections (\\\\(Avalanche\\\\) )?in country\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.generic.parser_csv\nparameters:\n  columns: [\"source.asn\", \"source.ip\", \"time.source\", \"classification.type\", \"malware.name\", \"source.port\", \"destination.ip\", \"destination.port\", \"destination.fqdn\", \"protocol.transport\"]\n  default_url_protocol: http://\n  defaults_fields: {'classification.type': 'infected-system'}\n  delimiter: ,\n  skip_header: True\n  time_format: from_format|%Y-%m-%d %H:%M:%S\n</code></pre>"},{"location":"user/feeds/#certpl","title":"CERT.PL","text":""},{"location":"user/feeds/#n6-stomp-stream","title":"N6 Stomp Stream","text":"<p>N6 Collector - CERT.pl's n6 Stream API feed (via STOMP interface). Note that 'rate_limit' does not apply to this bot, as it is waiting for messages on a stream.</p> <p>Public: no</p> <p>Revision: 2023-10-08</p> <p>Documentation: https://n6.readthedocs.io/usage/streamapi/</p> <p>Additional Information: Contact CERT.pl to get access to the feed. Note that the configuration parameter values suggested here are suitable for the new n6 Stream API variant (with authentication based on 'username' and 'password'); for this variant, typically you can leave the 'ssl_ca_certificate' parameter's value empty - then the system's default CA certificates will be used; however, if that does not work, you need to set 'ssl_ca_certificate' to the path to a file containing CA certificates eligible to verify \".cert.pl\" server certificates (to be found among the publicly available CA certs distributed with modern web browsers/OSes). Also, note that the 'server' parameter's value (for the new API variant) suggested here, \"n6stream-new.cert.pl\", is a temporary domain; ultimately, it will be changed back to \"stream.cert.pl\". When it comes to the old API variant (turned off in November 2023!), you need to have the 'server' parameter set to the name \"n6stream.cert.pl\", 'auth_by_ssl_client_certificate' set to true, 'ssl_ca_certificate' set to the path to a file containing the n6's legacy self-signed CA certificate (which is stored in file \"intelmq/bots/collectors/stomp/ca.pem\"), and the parameters 'ssl_client_certificate' and 'ssl_client_certificate_key' set to the paths to your-n6*-client-specific certificate and key files (note that the 'username' and 'password' parameters are then irrelevant and can be omitted).</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.stomp.collector\nparameters:\n  auth_by_ssl_client_certificate: False\n  exchange: {insert your STOMP *destination* to subscribe to, as given by CERT.pl, e.g. /exchange/my.example.org/*.*.*.*}\n  name: N6 Stomp Stream\n  password: {insert your *n6* API key}\n  port: 61614\n  provider: CERT.PL\n  server: n6stream-new.cert.pl\n  ssl_ca_certificate:\n  username: {insert your *n6* login, e.g. someuser@my.example.org}\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.n6.parser_n6stomp\n</code></pre>"},{"location":"user/feeds/#cins-army","title":"CINS Army","text":""},{"location":"user/feeds/#cins-army-list","title":"CINS Army List","text":"<p>The CINS Army (CIArmy.com) list is a subset of the CINS Active Threat Intelligence ruleset, and consists of IP addresses that meet one of two basic criteria: 1) The IP's recent Rogue Packet score factor is very poor, or 2) The IP has tripped a designated number of 'trusted' alerts across a given number of our Sentinels deployed around the world.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://cinsscore.com/#list</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: http://cinsscore.com/list/ci-badguys.txt\n  name: CINS Army List\n  provider: CINS Army\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.ci_army.parser\n</code></pre>"},{"location":"user/feeds/#cznic","title":"CZ.NIC","text":""},{"location":"user/feeds/#haas","title":"HaaS","text":"<p>SSH attackers against HaaS (Honeypot as a Service) provided by CZ.NIC, z.s.p.o. The dump is published once a day.</p> <p>Public: yes</p> <p>Revision: 2020-07-22</p> <p>Documentation: https://haas.nic.cz/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  extract_files: True\n  http_url: https://haas.nic.cz/stats/export/{time[%Y/%m/%Y-%m-%d]}.json.gz\n  http_url_formatting: {'days': -1}\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cznic.parser_haas\n</code></pre>"},{"location":"user/feeds/#proki","title":"Proki","text":"<p>Aggregation of various sources on malicious IP addresses (malware spreaders or C&amp;C servers).</p> <p>Public: no</p> <p>Revision: 2020-08-17</p> <p>Documentation: https://csirt.cz/en/proki/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://proki.csirt.cz/api/1/__APIKEY__/data/day/{time[%Y/%m/%d]}\n  http_url_formatting: {'days': -1}\n  name: Proki\n  provider: CZ.NIC\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cznic.parser_proki\n</code></pre>"},{"location":"user/feeds/#calidog","title":"Calidog","text":""},{"location":"user/feeds/#certstream","title":"CertStream","text":"<p>HTTP Websocket Stream from certstream.calidog.io providing data from Certificate Transparency Logs.</p> <p>Public: yes</p> <p>Revision: 2018-06-15</p> <p>Documentation: https://medium.com/cali-dog-security/introducing-certstream-3fc13bb98067</p> <p>Additional Information: Be aware that this feed provides a lot of data and may overload your system quickly.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.calidog.collector_certstream\nparameters:\n  name: CertStream\n  provider: Calidog\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.calidog.parser_certstream\n</code></pre>"},{"location":"user/feeds/#cleanmx","title":"CleanMX","text":""},{"location":"user/feeds/#phishing","title":"Phishing","text":"<p>In order to download the CleanMX feed you need to use a custom user agent and register that user agent.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://clean-mx.de/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_timeout_sec: 120\n  http_url: http://support.clean-mx.de/clean-mx/xmlphishing?response=alive&amp;domain=\n  http_user_agent: {{ your user agent }}\n  name: Phishing\n  provider: CleanMX\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cleanmx.parser\n</code></pre>"},{"location":"user/feeds/#virus","title":"Virus","text":"<p>In order to download the CleanMX feed you need to use a custom user agent and register that user agent.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://clean-mx.de/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_timeout_sec: 120\n  http_url: http://support.clean-mx.de/clean-mx/xmlviruses?response=alive&amp;domain=\n  http_user_agent: {{ your user agent }}\n  name: Virus\n  provider: CleanMX\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cleanmx.parser\n</code></pre>"},{"location":"user/feeds/#cybercrime-tracker","title":"CyberCrime Tracker","text":""},{"location":"user/feeds/#latest","title":"Latest","text":"<p>C2 servers</p> <p>Public: yes</p> <p>Revision: 2019-03-19</p> <p>Documentation: https://cybercrime-tracker.net/index.php</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://cybercrime-tracker.net/index.php\n  name: Latest\n  provider: CyberCrime Tracker\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.html_table.parser\nparameters:\n  columns: [\"time.source\", \"source.url\", \"source.ip\", \"malware.name\", \"__IGNORE__\"]\n  default_url_protocol: http://\n  defaults_fields: {'classification.type': 'c2-server'}\n  skip_table_head: True\n</code></pre>"},{"location":"user/feeds/#dshield","title":"DShield","text":""},{"location":"user/feeds/#as-details","title":"AS Details","text":"<p>No description provided by feed provider.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.dshield.org/reports.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dshield.org/asdetailsascii.html?as={{ AS Number }}\n  name: AS Details\n  provider: DShield\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dshield.parser_asn\n</code></pre>"},{"location":"user/feeds/#block","title":"Block","text":"<p>This list summarizes the top 20 attacking class C (/24) subnets over the last three days. The number of 'attacks' indicates the number of targets reporting scans from this subnet.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.dshield.org/reports.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.dshield.org/block.txt\n  name: Block\n  provider: DShield\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dshield.parser_block\n</code></pre>"},{"location":"user/feeds/#danger-rulez","title":"Danger Rulez","text":""},{"location":"user/feeds/#bruteforce-blocker","title":"Bruteforce Blocker","text":"<p>Its main purpose is to block SSH bruteforce attacks via firewall.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://danger.rulez.sk/index.php/bruteforceblocker/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: http://danger.rulez.sk/projects/bruteforceblocker/blist.php\n  name: Bruteforce Blocker\n  provider: Danger Rulez\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.danger_rulez.parser\n</code></pre>"},{"location":"user/feeds/#dataplane","title":"Dataplane","text":""},{"location":"user/feeds/#dns-recursion-desired","title":"DNS Recursion Desired","text":"<p>Entries consist of fields with identifying characteristics of a source IP address that has been seen performing a DNS recursion desired query to a remote host. This report lists hosts that are suspicious of more than just port scanning. The host may be DNS server cataloging or searching for hosts to use for DNS-based DDoS amplification.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/dnsrd.txt\n  name: DNS Recursion Desired\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#dns-recursion-desired-any","title":"DNS Recursion Desired ANY","text":"<p>Entries consist of fields with identifying characteristics of a source IP address that has been seen performing a DNS recursion desired IN ANY query to a remote host. This report lists hosts that are suspicious of more than just port scanning. The host may be DNS server cataloging or searching for hosts to use for DNS-based DDoS amplification.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/dnsrdany.txt\n  name: DNS Recursion Desired ANY\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#dns-version","title":"DNS Version","text":"<p>Entries consist of fields with identifying characteristics of a source IP address that has been seen performing a DNS CH TXT version.bind query to a remote host. This report lists hosts that are suspicious of more than just port scanning. The host may be DNS server cataloging or searching for vulnerable DNS servers.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/dnsversion.txt\n  name: DNS Version\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#protocol-41","title":"Protocol 41","text":"<p>Entries consist of fields with identifying characteristics of a host that has been detected to offer open IPv6 over IPv4 tunneling. This could allow for the host to be used a public proxy against IPv6 hosts.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/proto41.txt\n  name: Protocol 41\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#sip-query","title":"SIP Query","text":"<p>Entries consist of fields with identifying characteristics of a source IP address that has been seen initiating a SIP OPTIONS query to a remote host. This report lists hosts that are suspicious of more than just port scanning. The hosts may be SIP server cataloging or conducting various forms of telephony abuse. Report is updated hourly.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/sipquery.txt\n  name: SIP Query\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#sip-registration","title":"SIP Registration","text":"<p>Entries consist of fields with identifying characteristics of a source IP address that has been seen initiating a SIP REGISTER operation to a remote host. This report lists hosts that are suspicious of more than just port scanning. The hosts may be SIP client cataloging or conducting various forms of telephony abuse. Report is updated hourly.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/sipregistration.txt\n  name: SIP Registration\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#smtp-data","title":"SMTP Data","text":"<p>Entries consist of fields with identifying characteristics of a host that has been seen initiating a SMTP DATA operation to a remote host. The source report lists hosts that are suspicious of more than just port scanning. The host may be SMTP server cataloging or conducting various forms of email abuse.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/smtpdata.txt\n  name: SMTP Data\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#smtp-greet","title":"SMTP Greet","text":"<p>Entries consist of fields with identifying characteristics of a host that has been seen initiating a SMTP HELO/EHLO operation to a remote host. The source report lists hosts that are suspicious of more than just port scanning. The host may be SMTP server cataloging or conducting various forms of email abuse.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/smtpgreet.txt\n  name: SMTP Greet\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#ssh-client-connection","title":"SSH Client Connection","text":"<p>Entries below consist of fields with identifying characteristics of a source IP address that has been seen initiating an SSH connection to a remote host. This report lists hosts that are suspicious of more than just port scanning. The hosts may be SSH server cataloging or conducting authentication attack attempts. Report is updated hourly.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/sshclient.txt\n  name: SSH Client Connection\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#ssh-password-authentication","title":"SSH Password Authentication","text":"<p>Entries below consist of fields with identifying characteristics of a source IP address that has been seen attempting to remotely login to a host using SSH password authentication. The report lists hosts that are highly suspicious and are likely conducting malicious SSH password authentication attacks. Report is updated hourly.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/sshpwauth.txt\n  name: SSH Password Authentication\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#telnet-login","title":"Telnet Login","text":"<p>Entries consist of fields with identifying characteristics of a host that has been seen initiating a telnet connection to a remote host. The source report lists hosts that are suspicious of more than just port scanning. The host may be telnet server cataloging or conducting authentication attack attempts.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/telnetlogin.txt\n  name: Telnet Login\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#vncrfb-login","title":"VNC/RFB Login","text":"<p>Entries consist of fields with identifying characteristics of a host that has been seen initiating a VNC remote buffer session to a remote host. The source report lists hosts that are suspicious of more than just port scanning. The host may be VNC/RFB server cataloging or conducting authentication attack attempts.</p> <p>Public: yes</p> <p>Revision: 2021-09-09</p> <p>Documentation: https://dataplane.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://dataplane.org/vncrfb.txt\n  name: VNC/RFB Login\n  provider: Dataplane\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dataplane.parser\n</code></pre>"},{"location":"user/feeds/#eset","title":"ESET","text":""},{"location":"user/feeds/#eti-domains","title":"ETI Domains","text":"<p>Domain data from ESET's TAXII API.</p> <p>Public: no</p> <p>Revision: 2020-06-30</p> <p>Documentation: https://www.eset.com/int/business/services/threat-intelligence/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.eset.collector\nparameters:\n  collection: ei.domains v2 (json)\n  endpoint: eti.eset.com\n  password: &lt;password&gt;\n  time_delta: 3600\n  username: &lt;username&gt;\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.eset.parser\n</code></pre>"},{"location":"user/feeds/#eti-urls","title":"ETI URLs","text":"<p>URL data from ESET's TAXII API.</p> <p>Public: no</p> <p>Revision: 2020-06-30</p> <p>Documentation: https://www.eset.com/int/business/services/threat-intelligence/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.eset.collector\nparameters:\n  collection: ei.urls (json)\n  endpoint: eti.eset.com\n  password: &lt;password&gt;\n  time_delta: 3600\n  username: &lt;username&gt;\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.eset.parser\n</code></pre>"},{"location":"user/feeds/#fireeye","title":"Fireeye","text":""},{"location":"user/feeds/#malware-analysis-system","title":"Malware Analysis System","text":"<p>Process data from Fireeye mail and file analysis appliances. SHA1 and MD5 malware hashes are extracted and if there is network communication, also URLs and domains.</p> <p>Public: no</p> <p>Revision: 2021-05-03</p> <p>Documentation: https://www.fireeye.com/products/malware-analysis.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.fireeye.collector_mas\nparameters:\n  host: &lt;hostname of your appliance&gt;\n  http_password: &lt;your password&gt;\n  http_username: &lt;your username&gt;\n  request_duration: &lt;how old date should be fetched eg 24_hours or 48_hours&gt;\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.fireeye.parser\n</code></pre>"},{"location":"user/feeds/#fraunhofer","title":"Fraunhofer","text":""},{"location":"user/feeds/#dga-archive","title":"DGA Archive","text":"<p>Fraunhofer DGA collector fetches data from Fraunhofer's domain generation archive.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://dgarchive.caad.fkie.fraunhofer.de/welcome/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_password: {{ your password }}\n  http_url: https://dgarchive.caad.fkie.fraunhofer.de/today\n  http_username: {{ your username }}\n  name: DGA Archive\n  provider: Fraunhofer\n  rate_limit: 10800\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.fraunhofer.parser_dga\n</code></pre>"},{"location":"user/feeds/#have-i-been-pwned","title":"Have I Been Pwned","text":""},{"location":"user/feeds/#enterprise-callback","title":"Enterprise Callback","text":"<p>With the Enterprise Subscription of 'Have I Been Pwned' you are able to provide a callback URL and any new leak data is submitted to it. It is recommended to put a webserver with Authorization check, TLS etc. in front of the API collector.</p> <p>Public: no</p> <p>Revision: 2019-09-11</p> <p>Documentation: https://haveibeenpwned.com/EnterpriseSubscriber/</p> <p>Additional Information: A minimal nginx configuration could look like: <pre><code>server {\n    listen 443 ssl http2;\n    server_name [your host name];\n    client_max_body_size 50M;\n\n    ssl_certificate [path to your key];\n    ssl_certificate_key [path to your certificate];\n\n    location /[your private url] {\n         if ($http_authorization != '[your private password]') {\n             return 403;\n         }\n         proxy_pass http://localhost:5001/intelmq/push;\n         proxy_read_timeout 30;\n         proxy_connect_timeout 30;\n     }\n}\n</code></pre></p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.api.collector_api\nparameters:\n  name: Enterprise Callback\n  port: 5001\n  provider: Have I Been Pwned\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.hibp.parser_callback\n</code></pre>"},{"location":"user/feeds/#malwarepatrol","title":"MalwarePatrol","text":""},{"location":"user/feeds/#dansguardian","title":"DansGuardian","text":"<p>Malware block list with URLs</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.malwarepatrol.net/non-commercial/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://lists.malwarepatrol.net/cgi/getfile?receipt={{ your API key }}&amp;product=8&amp;list=dansguardian\n  name: DansGuardian\n  provider: MalwarePatrol\n  rate_limit: 180000\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.malwarepatrol.parser_dansguardian\n</code></pre>"},{"location":"user/feeds/#malwareurl","title":"MalwareURL","text":""},{"location":"user/feeds/#latest-malicious-activity","title":"Latest malicious activity","text":"<p>Latest malicious domains/IPs.</p> <p>Public: yes</p> <p>Revision: 2018-02-05</p> <p>Documentation: https://www.malwareurl.com/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.malwareurl.com/\n  name: Latest malicious activity\n  provider: MalwareURL\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.malwareurl.parser\n</code></pre>"},{"location":"user/feeds/#mcafee-advanced-threat-defense","title":"McAfee Advanced Threat Defense","text":""},{"location":"user/feeds/#sandbox-reports","title":"Sandbox Reports","text":"<p>Processes reports from McAfee's sandboxing solution via the openDXL API.</p> <p>Public: no</p> <p>Revision: 2018-07-05</p> <p>Documentation: https://www.mcafee.com/enterprise/en-us/products/advanced-threat-defense.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.opendxl.collector\nparameters:\n  dxl_config_file: {{ location of dxl configuration file }}\n  dxl_topic: /mcafee/event/atd/file/report\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.mcafee.parser_atd\nparameters:\n  verdict_severity: 4\n</code></pre>"},{"location":"user/feeds/#microsoft","title":"Microsoft","text":""},{"location":"user/feeds/#bingmurls-via-interflow","title":"BingMURLs via Interflow","text":"<p>Collects Malicious URLs detected by Bing from the Interflow API. The feed is available via Microsoft\u2019s Government Security Program (GSP).</p> <p>Public: no</p> <p>Revision: 2018-05-29</p> <p>Documentation: https://docs.microsoft.com/en-us/security/gsp/informationsharingandexchange</p> <p>Additional Information: Depending on the file sizes you may need to increase the parameter 'http_timeout_sec' of the collector.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.microsoft.collector_interflow\nparameters:\n  api_key: {{ your API key }}\n  file_match: ^bingmurls_\n  http_timeout_sec: 300\n  name: BingMURLs via Interflow\n  not_older_than: 2 days\n  provider: Microsoft\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.microsoft.parser_bingmurls\n</code></pre>"},{"location":"user/feeds/#ctip-c2-via-azure","title":"CTIP C2 via Azure","text":"<p>Collects the CTIP C2 feed from a shared Azure Storage. The feed is available via Microsoft\u2019s Government Security Program (GSP).</p> <p>Public: no</p> <p>Revision: 2020-05-29</p> <p>Documentation: https://docs.microsoft.com/en-us/security/gsp/informationsharingandexchange</p> <p>Additional Information: The cache is needed for memorizing which files have already been processed, the TTL should be higher than the oldest file available in the storage (currently the last three days are available). The connection string contains endpoint as well as authentication information.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.microsoft.collector_azure\nparameters:\n  connection_string: {{ your connection string }}\n  container_name: ctip-c2\n  name: CTIP C2 via Azure\n  provider: Microsoft\n  rate_limit: 3600\n  redis_cache_db: 5\n  redis_cache_host: 127.0.0.1\n  redis_cache_port: 6379\n  redis_cache_ttl: 864000\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.microsoft.parser_ctip\n</code></pre>"},{"location":"user/feeds/#ctip-infected-via-azure","title":"CTIP Infected via Azure","text":"<p>Collects the CTIP (Sinkhole data) from a shared Azure Storage. The feed is available via Microsoft\u2019s Government Security Program (GSP).</p> <p>Public: no</p> <p>Revision: 2022-06-01</p> <p>Documentation: https://docs.microsoft.com/en-us/security/gsp/informationsharingandexchange http://www.dcuctip.com/</p> <p>Additional Information: The cache is needed for memorizing which files have already been processed, the TTL should be higher than the oldest file available in the storage (currently the last three days are available). The connection string contains endpoint as well as authentication information. As many IPs occur very often in the data, you may want to use a deduplicator specifically for the feed. More information about the feed can be found on www.dcuctip.com after login with your GSP account.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.microsoft.collector_azure\nparameters:\n  connection_string: {{ your connection string }}\n  container_name: ctip-infected-summary\n  name: CTIP Infected via Azure\n  provider: Microsoft\n  rate_limit: 3600\n  redis_cache_db: 5\n  redis_cache_host: 127.0.0.1\n  redis_cache_port: 6379\n  redis_cache_ttl: 864000\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.microsoft.parser_ctip\n</code></pre>"},{"location":"user/feeds/#ctip-infected-via-interflow","title":"CTIP Infected via Interflow","text":"<p>Collects the CTIP Infected feed (Sinkhole data for your country) files from the Interflow API.The feed is available via Microsoft\u2019s Government Security Program (GSP).</p> <p>Public: no</p> <p>Revision: 2018-03-06</p> <p>Documentation: https://docs.microsoft.com/en-us/security/gsp/informationsharingandexchange http://www.dcuctip.com/</p> <p>Additional Information: Depending on the file sizes you may need to increase the parameter 'http_timeout_sec' of the collector. As many IPs occur very often in the data, you may want to use a deduplicator specifically for the feed. More information about the feed can be found on www.dcuctip.com after login with your GSP account.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.microsoft.collector_interflow\nparameters:\n  api_key: {{ your API key }}\n  file_match: ^ctip_\n  http_timeout_sec: 300\n  name: CTIP Infected via Interflow\n  not_older_than: 2 days\n  provider: Microsoft\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.microsoft.parser_ctip\n</code></pre>"},{"location":"user/feeds/#openphish","title":"OpenPhish","text":""},{"location":"user/feeds/#premium-feed","title":"Premium Feed","text":"<p>OpenPhish is a fully automated self-contained platform for phishing intelligence. It identifies phishing sites and performs intelligence analysis in real time without human intervention and without using any external resources, such as blacklists.</p> <p>Public: no</p> <p>Revision: 2018-02-06</p> <p>Documentation: https://www.openphish.com/phishing_feeds.html</p> <p>Additional Information: Discounts available for Government and National CERTs a well as for Nonprofit and Not-for-Profit organizations.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_password: {{ your password }}\n  http_url: https://openphish.com/prvt-intell/\n  http_username: {{ your username }}\n  name: Premium Feed\n  provider: OpenPhish\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.openphish.parser_commercial\n</code></pre>"},{"location":"user/feeds/#public-feed","title":"Public feed","text":"<p>OpenPhish is a fully automated self-contained platform for phishing intelligence. It identifies phishing sites and performs intelligence analysis in real time without human intervention and without using any external resources, such as blacklists.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.openphish.com/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.openphish.com/feed.txt\n  name: Public feed\n  provider: OpenPhish\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.openphish.parser\n</code></pre>"},{"location":"user/feeds/#phishtank","title":"PhishTank","text":""},{"location":"user/feeds/#online","title":"Online","text":"<p>PhishTank is a collaborative clearing house for data and information about phishing on the Internet.</p> <p>Public: no</p> <p>Revision: 2022-11-21</p> <p>Documentation: https://www.phishtank.com/developer_info.php</p> <p>Additional Information: Updated hourly as per the documentation. Download is possible without API key, but limited to few downloads per day.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  extract_files: True\n  http_url: https://data.phishtank.com/data/{{ your API key }}/online-valid.json.gz\n  name: Online\n  provider: PhishTank\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.phishtank.parser\n</code></pre>"},{"location":"user/feeds/#precisionsec","title":"PrecisionSec","text":""},{"location":"user/feeds/#agent-tesla","title":"Agent Tesla","text":"<p>Agent Tesla IoCs, URLs where the malware is hosted.</p> <p>Public: yes</p> <p>Revision: 2019-04-02</p> <p>Documentation: https://precisionsec.com/threat-intelligence-feeds/agent-tesla/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://precisionsec.com/threat-intelligence-feeds/agent-tesla/\n  name: Agent Tesla\n  provider: PrecisionSec\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.html_table.parser\nparameters:\n  columns: [\"source.ip|source.url\", \"time.source\"]\n  default_url_protocol: http://\n  defaults_fields: {'classification.type': 'malware-distribution'}\n  skip_table_head: True\n</code></pre>"},{"location":"user/feeds/#shadowserver","title":"Shadowserver","text":""},{"location":"user/feeds/#via-api","title":"Via API","text":"<p>Shadowserver sends out a variety of reports to subscribers, see documentation.</p> <p>Public: no</p> <p>Revision: 2020-01-08</p> <p>Documentation: https://www.shadowserver.org/what-we-do/network-reporting/api-documentation/</p> <p>Additional Information: This configuration fetches user-configurable reports from the Shadowserver Reports API. For a list of reports, have a look at the Shadowserver collector and parser documentation.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.shadowserver.collector_reports_api\nparameters:\n  api_key: &lt;API key&gt;\n  country: &lt;CC&gt;\n  rate_limit: 86400\n  redis_cache_db: 12\n  redis_cache_host: 127.0.0.1\n  redis_cache_port: 6379\n  redis_cache_ttl: 864000\n  secret: &lt;API secret&gt;\n  types: &lt;single report or list of reports&gt;\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.shadowserver.parser_json\n</code></pre>"},{"location":"user/feeds/#via-imap","title":"Via IMAP","text":"<p>Shadowserver sends out a variety of reports (see https://www.shadowserver.org/wiki/pmwiki.php/Services/Reports).</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.shadowserver.org/what-we-do/network-reporting/</p> <p>Additional Information: The configuration retrieves the data from a e-mails via IMAP from the attachments.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.mail.collector_mail_attach\nparameters:\n  attach_regex: csv.zip\n  extract_files: True\n  folder: INBOX\n  mail_host: __HOST__\n  mail_password: __PASSWORD__\n  mail_ssl: True\n  mail_user: __USERNAME__\n  name: Via IMAP\n  provider: Shadowserver\n  rate_limit: 86400\n  subject_regex: __REGEX__\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.shadowserver.parser\n</code></pre>"},{"location":"user/feeds/#via-request-tracker","title":"Via Request Tracker","text":"<p>Shadowserver sends out a variety of reports (see https://www.shadowserver.org/wiki/pmwiki.php/Services/Reports).</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.shadowserver.org/what-we-do/network-reporting/</p> <p>Additional Information: The configuration retrieves the data from a RT/RTIR ticketing instance via the attachment or an download.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.rt.collector_rt\nparameters:\n  attachment_regex: \\\\.csv\\\\.zip$\n  extract_attachment: True\n  extract_download: False\n  http_password: {{ your HTTP Authentication password or null }}\n  http_username: {{ your HTTP Authentication username or null }}\n  password: __PASSWORD__\n  provider: Shadowserver\n  rate_limit: 3600\n  search_not_older_than: {{ relative time or null }}\n  search_owner: nobody\n  search_queue: Incident Reports\n  search_requestor: autoreports@shadowserver.org\n  search_status: new\n  search_subject_like: \\[__COUNTRY__\\] Shadowserver __COUNTRY__\n  set_status: open\n  take_ticket: True\n  uri: http://localhost/rt/REST/1.0\n  url_regex: https://dl.shadowserver.org/[a-zA-Z0-9?_-]*\n  user: __USERNAME__\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.shadowserver.parser\n</code></pre>"},{"location":"user/feeds/#shodan","title":"Shodan","text":""},{"location":"user/feeds/#country-stream","title":"Country Stream","text":"<p>Collects the Shodan stream for one or multiple countries from the Shodan API.</p> <p>Public: no</p> <p>Revision: 2021-03-22</p> <p>Documentation: https://developer.shodan.io/api/stream</p> <p>Additional Information: A Shodan account with streaming permissions is needed.</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.shodan.collector_stream\nparameters:\n  api_key: &lt;API key&gt;\n  countries: &lt;comma-separated list of country codes&gt;\n  error_retry_delay: 0\n  name: Country Stream\n  provider: Shodan\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.shodan.parser\nparameters:\n  error_retry_delay: 0\n  ignore_errors: False\n  minimal_mode: False\n</code></pre>"},{"location":"user/feeds/#spamhaus","title":"Spamhaus","text":""},{"location":"user/feeds/#asn-drop","title":"ASN Drop","text":"<p>ASN-DROP contains a list of Autonomous System Numbers controlled by spammers or cyber criminals, as well as \"hijacked\" ASNs. ASN-DROP can be used to filter BGP routes which are being used for malicious purposes.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.spamhaus.org/drop/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.spamhaus.org/drop/asndrop.txt\n  name: ASN Drop\n  provider: Spamhaus\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.spamhaus.parser_drop\n</code></pre>"},{"location":"user/feeds/#cert","title":"CERT","text":"<p>Spamhaus CERT Insight Portal. Access limited to CERTs and CSIRTs with national or regional responsibility. .</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.spamhaus.org/news/article/705/spamhaus-launches-cert-insight-portal</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: {{ your CERT portal URL }}\n  name: CERT\n  provider: Spamhaus\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.spamhaus.parser_cert\n</code></pre>"},{"location":"user/feeds/#drop","title":"Drop","text":"<p>The DROP list will not include any IP address space under the control of any legitimate network - even if being used by \"the spammers from hell\". DROP will only include netblocks allocated directly by an established Regional Internet Registry (RIR) or National Internet Registry (NIR) such as ARIN, RIPE, AFRINIC, APNIC, LACNIC or KRNIC or direct RIR allocations.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.spamhaus.org/drop/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.spamhaus.org/drop/drop.txt\n  name: Drop\n  provider: Spamhaus\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.spamhaus.parser_drop\n</code></pre>"},{"location":"user/feeds/#dropv6","title":"Dropv6","text":"<p>The DROPv6 list includes IPv6 ranges allocated to spammers or cyber criminals. DROPv6 will only include IPv6 netblocks allocated directly by an established Regional Internet Registry (RIR) or National Internet Registry (NIR) such as ARIN, RIPE, AFRINIC, APNIC, LACNIC or KRNIC or direct RIR allocations.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.spamhaus.org/drop/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.spamhaus.org/drop/dropv6.txt\n  name: Dropv6\n  provider: Spamhaus\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.spamhaus.parser_drop\n</code></pre>"},{"location":"user/feeds/#edrop","title":"EDrop","text":"<p>EDROP is an extension of the DROP list that includes sub-allocated netblocks controlled by spammers or cyber criminals. EDROP is meant to be used in addition to the direct allocations on the DROP list.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.spamhaus.org/drop/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.spamhaus.org/drop/edrop.txt\n  name: EDrop\n  provider: Spamhaus\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.spamhaus.parser_drop\n</code></pre>"},{"location":"user/feeds/#strangereal-intel","title":"Strangereal Intel","text":""},{"location":"user/feeds/#dailyioc","title":"DailyIOC","text":"<p>Daily IOC from tweets and articles</p> <p>Public: yes</p> <p>Revision: 2019-12-05</p> <p>Documentation: https://github.com/StrangerealIntel/DailyIOC</p> <p>Additional Information: collector's <code>extra_fields</code> parameter may be any of fields from the github <code>content API response &lt;https://developer.github.com/v3/repos/contents/&gt;</code>_</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.github_api.collector_github_contents_api\nparameters:\n  personal_access_token: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\n  regex: .*.json\n  repository: StrangerealIntel/DailyIOC\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.github_feed\n</code></pre>"},{"location":"user/feeds/#surbl","title":"Surbl","text":""},{"location":"user/feeds/#malicious-domains","title":"Malicious Domains","text":"<p>Detected malicious domains. Note that you have to opened up Sponsored Datafeed Service (SDS) access to the SURBL data via rsync for your IP address.</p> <p>Public: no</p> <p>Revision: 2018-09-04</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.rsync.collector_rsync\nparameters:\n  file: wild.surbl.org.rbldnsd\n  rsync_path: blacksync.prolocation.net::surbl-wild/\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.surbl.parser\n</code></pre>"},{"location":"user/feeds/#team-cymru","title":"Team Cymru","text":""},{"location":"user/feeds/#cap","title":"CAP","text":"<p>Team Cymru provides daily lists of compromised or abused devices for the ASNs and/or netblocks with a CSIRT's jurisdiction. This includes such information as bot infected hosts, command and control systems, open resolvers, malware urls, phishing urls, and brute force attacks</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.team-cymru.com/CSIRT-AP.html https://www.cymru.com/$certname/report_info.txt</p> <p>Additional Information: \"Two feeds types are offered:  * The new https://www.cymru.com/$certname/$certname_{time[%Y%m%d]}.txt  * and the old https://www.cymru.com/$certname/infected_{time[%Y%m%d]}.txt  Both formats are supported by the parser and the new one is recommended.  As of 2019-09-12 the old format will be retired soon.\"</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_password: {{ your password }}\n  http_url: https://www.cymru.com/$certname/$certname_{time[%Y%m%d]}.txt\n  http_url_formatting: True\n  http_username: {{ your username }}\n  name: CAP\n  provider: Team Cymru\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cymru.parser_cap_program\n</code></pre>"},{"location":"user/feeds/#full-bogons-ipv4","title":"Full Bogons IPv4","text":"<p>Fullbogons are a larger set which also includes IP space that has been allocated to an RIR, but not assigned by that RIR to an actual ISP or other end-user. IANA maintains a convenient IPv4 summary page listing allocated and reserved netblocks, and each RIR maintains a list of all prefixes that they have assigned to end-users. Our bogon reference pages include additional links and resources to assist those who wish to properly filter bogon prefixes within their networks.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.team-cymru.com/bogon-reference-http.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.team-cymru.org/Services/Bogons/fullbogons-ipv4.txt\n  name: Full Bogons IPv4\n  provider: Team Cymru\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cymru.parser_full_bogons\n</code></pre>"},{"location":"user/feeds/#full-bogons-ipv6","title":"Full Bogons IPv6","text":"<p>Fullbogons are a larger set which also includes IP space that has been allocated to an RIR, but not assigned by that RIR to an actual ISP or other end-user. IANA maintains a convenient IPv4 summary page listing allocated and reserved netblocks, and each RIR maintains a list of all prefixes that they have assigned to end-users. Our bogon reference pages include additional links and resources to assist those who wish to properly filter bogon prefixes within their networks.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://www.team-cymru.com/bogon-reference-http.html</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.team-cymru.org/Services/Bogons/fullbogons-ipv6.txt\n  name: Full Bogons IPv6\n  provider: Team Cymru\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.cymru.parser_full_bogons\n</code></pre>"},{"location":"user/feeds/#threatminer","title":"Threatminer","text":""},{"location":"user/feeds/#recent-domains","title":"Recent domains","text":"<p>Latest malicious domains.</p> <p>Public: yes</p> <p>Revision: 2018-02-06</p> <p>Documentation: https://www.threatminer.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.threatminer.org/\n  name: Recent domains\n  provider: Threatminer\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.threatminer.parser\n</code></pre>"},{"location":"user/feeds/#turris","title":"Turris","text":""},{"location":"user/feeds/#greylist","title":"Greylist","text":"<p>The data are processed and classified every week and behaviour of IP addresses that accessed a larger number of Turris routers is evaluated. The result is a list of addresses that have tried to obtain information about services on the router or tried to gain access to them. The list also contains a list of tags for each address which indicate what behaviour of the address was observed.</p> <p>Public: yes</p> <p>Revision: 2023-06-13</p> <p>Documentation: https://project.turris.cz/en/greylist</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://view.sentinel.turris.cz/greylist-data/greylist-latest.csv\n  name: Greylist\n  provider: Turris\n  rate_limit: 43200\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.turris.parser\n</code></pre>"},{"location":"user/feeds/#greylist-with-pgp-signature-verification","title":"Greylist with PGP signature verification","text":"<p>The data are processed and classified every week and behaviour of IP addresses that accessed a larger number of Turris routers is evaluated. The result is a list of addresses that have tried to obtain information about services on the router or tried to gain access to them. The list also contains a list of tags for each address which indicate what behaviour of the address was observed.</p> <p>The Turris Greylist feed provides PGP signatures for the provided files. You will need to import the public PGP key from the linked documentation page, currently available at https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0x10876666 or from below. See the URL Fetcher Collector documentation for more information on PGP signature verification.</p> <p>PGP Public key:</p> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: SKS 1.1.6\nComment: Hostname: pgp.mit.edu\n\nmQINBFRl7D8BEADaRFoDa/+r27Gtqrdn8sZL4aSYTU4Q3gDr3TfigK8H26Un/Y79a/DUL1o0\no8SRae3uwVcjJDHZ6KDnxThbqF7URfpuCcCYxOs8p/eu3dSueqEGTODHWF4ChIh2japJDc4t\n3FQHbIh2e3GHotVqJGhvxMmWqBFoZ/mlWvhjs99FFBZ87qbUNk7l1UAGEXeWeECgz9nGox40\n3YpCgEsnJJsKC53y5LD/wBf4z+z0GsLg2GMRejmPRgrkSE/d9VjF/+niifAj2ZVFoINSVjjI\n8wQFc8qLiExdzwLdgc+ggdzk5scY3ugI5IBt1zflxMIOG4BxKj/5IWsnhKMG2NLVGUYOODoG\npKhcY0gCHypw1bmkp2m+BDVyg4KM2fFPgQ554DAX3xdukMCzzZyBxR3UdT4dN7xRVhpph3Y2\nAmh1E/dpde9uwKFk1oRHkRZ3UT1XtpbXtFNY0wCiGXPt6KznJAJcomYFkeLHjJo3nMK0hISV\nGSNetVLfNWlTkeo93E1innbSaDEN70H4jPivjdVjSrLtIGfr2IudUJI84dGmvMxssWuM2qdg\nFSzoTHw9UE9KT3SltKPS+F7u9x3h1J492YaVDncATRjPZUBDhbvo6Pcezhup7XTnI3gbRQc2\noEUDb933nwuobHm3VsUcf9686v6j8TYehsbjk+zdA4BoS/IdCwARAQABtC5UdXJyaXMgR3Jl\neWxpc3QgR2VuZXJhdG9yIDxncmV5bGlzdEB0dXJyaXMuY3o+iQI4BBMBAgAiBQJUZew/AhsD\nBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRDAQrU3EIdmZoH4D/9Jo6j9RZxCAPTaQ9WZ\nWOdb1Eqd/206bObEX+xJAago+8vuy+waatHYBM9/+yxh0SIg2g5whd6J7A++7ePpt5XzX6hq\nbzdG8qGtsCRu+CpDJ40UwHep79Ck6O/A9KbZcZW1z/DhbYT3z/ZVWALy4RtgmyC67Vr+j/C7\nKNQ529bs3kP9AzvEIeBC4wdKl8dUSuZIPFbgf565zRNKLtHVgVhiuDPcxKmBEl4/PLYF30a9\n5Tgp8/PNa2qp1DV/EZjcsxvSRIZB3InGBvdKdSzvs4N/wLnKWedj1GGm7tJhSkJa4MLBSOIx\nyamhTS/3A5Cd1qoDhLkp7DGVXSdgEtpoZDC0jR7nTS6pXojcgQaF7SfJ3cjZaLI5rjsx0YLk\nG4PzonQKCAAQG1G9haCDniD8NrrkZ3eFiafoKEECRFETIG0BJHjPdSWcK9jtNCupBYb7JCiz\nQ0hwLh2wrw/wCutQezD8XfsBFFIQC18TsJAVgdHLZnGYkd5dIbV/1scOcm52w6EGIeMBBYlB\nJ2+JNukH5sJDA6zAXNl2I1H1eZsP4+FSNIfB6LdovHVPAjn7qXCw3+IonnQK8+g8YJkbbhKJ\nsPejfg+ndpe5u0zX+GvQCFBFu03muANA0Y/OOeGIQwU93d/akN0P1SRfq+bDXnkRIJQOD6XV\n0ZPKVXlNOjy/z2iN2A==\n=wjkM\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://project.turris.cz/en/greylist</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://www.turris.cz/greylist-data/greylist-latest.csv\n  name: Greylist\n  provider: Turris\n  rate_limit: 43200\n  signature_url: https://www.turris.cz/greylist-data/greylist-latest.csv.asc\n  verify_pgp_signatures: True\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.turris.parser\n</code></pre>"},{"location":"user/feeds/#university-of-toulouse","title":"University of Toulouse","text":""},{"location":"user/feeds/#blacklist","title":"Blacklist","text":"<p>Various blacklist feeds</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://dsi.ut-capitole.fr/blacklists/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  extract_files: true\n  http_url: https://dsi.ut-capitole.fr/blacklists/download/{collection name}.tar.gz\n  name: Blacklist\n  provider: University of Toulouse\n  rate_limit: 43200\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.generic.parser_csv\nparameters:\n  columns: {depends on a collection}\n  defaults_fields: {'classification.type': '{depends on a collection}'}\n  delimiter: false\n</code></pre>"},{"location":"user/feeds/#vxvault","title":"VXVault","text":""},{"location":"user/feeds/#urls","title":"URLs","text":"<p>This feed provides IP addresses hosting Malware.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://vxvault.net/ViriList.php</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: http://vxvault.net/URL_List.php\n  name: URLs\n  provider: VXVault\n  rate_limit: 3600\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.vxvault.parser\n</code></pre>"},{"location":"user/feeds/#viriback","title":"ViriBack","text":""},{"location":"user/feeds/#c2-tracker","title":"C2 Tracker","text":"<p>Latest detected C2 servers.</p> <p>Public: yes</p> <p>Revision: 2022-11-15</p> <p>Documentation: https://viriback.com/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: https://tracker.viriback.com/dump.php\n  name: C2 Tracker\n  provider: ViriBack\n  rate_limit: 86400\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.generic.csv_parser\nparameters:\n  columns: [\"malware.name\", \"source.url\", \"source.ip\", \"time.source\"]\n  defaults_fields: {'classification.type': 'malware-distribution'}\n  skip_header: True\n</code></pre>"},{"location":"user/feeds/#zoneh","title":"ZoneH","text":""},{"location":"user/feeds/#defacements","title":"Defacements","text":"<p>all the information contained in Zone-H's cybercrime archive were either collected online from public sources or directly notified anonymously to us.</p> <p>Public: no</p> <p>Revision: 2018-01-20</p> <p>Documentation: https://zone-h.org/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.mail.collector_mail_attach\nparameters:\n  attach_regex: csv\n  extract_files: False\n  folder: INBOX\n  mail_host: __HOST__\n  mail_password: __PASSWORD__\n  mail_ssl: True\n  mail_user: __USERNAME__\n  name: Defacements\n  provider: ZoneH\n  rate_limit: 3600\n  sent_from: datazh@zone-h.org\n  subject_regex: Report\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.zoneh.parser\n</code></pre>"},{"location":"user/feeds/#capture","title":"cAPTure","text":""},{"location":"user/feeds/#ponmocup-domains-cif-format","title":"Ponmocup Domains CIF Format","text":"<p>List of ponmocup malware redirection domains and infected web-servers from cAPTure. See also http://security-research.dyndns.org/pub/botnet-links.htm and http://c-apt-ure.blogspot.com/search/label/ponmocup The data in the CIF format is not equal to the Shadowserver CSV format. Reasons are unknown.</p> <p>Public: yes</p> <p>Revision: 2018-01-20</p> <p>Documentation: http://security-research.dyndns.org/pub/malware-feeds/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: http://security-research.dyndns.org/pub/malware-feeds/ponmocup-infected-domains-CIF-latest.txt\n  name: Infected Domains\n  provider: cAPTure\n  rate_limit: 10800\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.dyn.parser\n</code></pre>"},{"location":"user/feeds/#ponmocup-domains-shadowserver-format","title":"Ponmocup Domains Shadowserver Format","text":"<p>List of ponmocup malware redirection domains and infected web-servers from cAPTure. See also http://security-research.dyndns.org/pub/botnet-links.htm and http://c-apt-ure.blogspot.com/search/label/ponmocup The data in the Shadowserver CSV is not equal to the CIF format format. Reasons are unknown.</p> <p>Public: yes</p> <p>Revision: 2020-07-08</p> <p>Documentation: http://security-research.dyndns.org/pub/malware-feeds/</p> <p>Collector configuration</p> <pre><code>module: intelmq.bots.collectors.http.collector_http\nparameters:\n  http_url: http://security-research.dyndns.org/pub/malware-feeds/ponmocup-infected-domains-shadowserver.csv\n  name: Infected Domains\n  provider: cAPTure\n  rate_limit: 10800\n</code></pre> <p>Parser configuration</p> <pre><code>module: intelmq.bots.parsers.generic.parser_csv\nparameters:\n  columns: [\"time.source\", \"source.ip\", \"source.fqdn\", \"source.urlpath\", \"source.port\", \"protocol.application\", \"extra.tag\", \"extra.redirect_target\", \"extra.category\"]\n  compose_fields: {'source.url': 'http://{0}{1}'}\n  defaults_fields: {'classification.type': 'malware-distribution'}\n  delimiter: ,\n  skip_header: True\n</code></pre>"},{"location":"user/intro/","title":"Intro","text":""},{"location":"user/intro/#intro","title":"Intro","text":"<p>The User Guide provides information on how to use installed IntelMQ and it's components. Let's start with a basic not-so-technical description of how IntelMQ works and the used terminology:</p> <ul> <li>It consists of small (python) programs called bots.</li> <li>Bots communicate witch each other (using something called message broker) by passing so called events (JSON objects).</li> <li>An example event can look like this:</li> </ul> <pre><code>{\n    \"source.geolocation.cc\": \"JO\",\n    \"malware.name\": \"qakbot\",\n    \"source.ip\": \"82.212.115.188\",\n    \"source.asn\": 47887,\n    \"classification.type\": \"c2-server\",\n    \"extra.status\": \"offline\",\n    \"source.port\": 443,\n    \"classification.taxonomy\": \"malicious-code\",\n    \"source.geolocation.latitude\": 31.9522,\n    \"feed.accuracy\": 100,\n    \"extra.last_online\": \"2023-02-16\",\n    \"time.observation\": \"2023-02-16T09:55:12+00:00\",\n    \"source.geolocation.city\": \"amman\",\n    \"source.network\": \"82.212.115.0/24\",\n    \"time.source\": \"2023-02-15T14:19:09+00:00\",\n    \"source.as_name\": \"NEU-AS\",\n    \"source.geolocation.longitude\": 35.939,\n    \"feed.name\": \"abusech-feodo-c2-tracker\"\n  }\n</code></pre> <ul> <li> <p>Bots are divided into following groups:</p> <ul> <li>Collectors - bots that collect data from sources such as website, mailbox, api, etc.</li> <li>Parsers - bots that split and parse collected data into individual events.</li> <li>Experts - bots that can do additional processing of events such as enriching, filtering, etc.</li> <li>Outputs - bots that can output events to files, databases, etc.</li> </ul> </li> <li> <p>Data sources supported by IntelMQ are called feeds.</p> <ul> <li>IntelMQ provides recommended configuration of collector and parser bot combinations for selected feeds.</li> </ul> </li> <li>The collection of all configured bots and their communication paths is called pipeline (or botnet).</li> <li>Individual bots as well as the complete pipeline can be configured, managed and monitored via:<ul> <li>Web interface called IntelMQ Manager (best suited for regular users).</li> <li>Command line tool called intelmqctl (best suited for administrators).</li> <li>REST API provided by the IntelMQ API extension (best suited for other programs).</li> </ul> </li> </ul>"},{"location":"user/manager/","title":"Manager","text":""},{"location":"user/manager/#using-intelmq-manager","title":"Using IntelMQ Manager","text":"<p>IntelMQ Manager is a graphical interface to manage configurations for IntelMQ. It's goal is to provide an intuitive tool to allow non-programmers to specify the data flow in IntelMQ.</p>"},{"location":"user/manager/#configuration-pages","title":"Configuration Pages","text":""},{"location":"user/manager/#pipeline","title":"Pipeline","text":"<p>This interface lets you visually configure the whole IntelMQ pipeline and the parameters of every single bot. You will be able to see the pipeline in a graph-like visualisation similar to the following screenshot (click to enlarge):</p> <p></p>"},{"location":"user/manager/#named-queues-paths","title":"Named queues / paths","text":"<p>With IntelMQ Manager you can set the name of certain paths by double-clicking on the line which connects two bots:</p> <p></p> <p>The name is then displayed along the edge:</p> <p></p>"},{"location":"user/manager/#bots-configuration","title":"Bots Configuration","text":"<p>When you add a node or edit one you will be presented with a form with the available parameters for the bot. There you can easily change the parameters as shown in the screenshot:</p> <p></p> <p>After editing the bot's configuration and pipeline, simply click Save Configuration to automatically write the changes to the correct files. The configurations are now ready to be deployed.</p> <p>Warning</p> <p>Without saving the configuration your changes will be lost whenever you reload the web page or move between different tabs within the IntelMQ manager page.</p>"},{"location":"user/manager/#botnet-management","title":"Botnet Management","text":"<p>When you save a configuration you can go to the Management section to see what bots are running and start/stop the entire botnet, or a single bot.</p> <p></p>"},{"location":"user/manager/#botnet-monitoring","title":"Botnet Monitoring","text":"<p>You can also monitor the logs of individual bots or see the status of the queues for the entire system or for single bots.</p> <p>In this next example we can see the number of queued messages for all the queues in the system.</p> <p></p> <p>The following example we can see the status information of a single bot. Namely, the number of queued messages in the queues that are related to that bot and also the last 20 log lines of that single bot.</p> <p></p>"},{"location":"user/manager/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Any underscored letter denotes access key shortcut. The needed shortcut-keyboard is different per Browser:</p> <ul> <li>Firefox: Ctrl+Alt + Letter</li> <li>Chrome &amp; Chromium: Alt + Letter</li> </ul>"}]}