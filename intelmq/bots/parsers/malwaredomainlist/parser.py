import unicodecsv
from cStringIO import StringIO
from intelmq.lib import utils
from intelmq.lib.bot import Bot, sys
from intelmq.lib.message import Event
from intelmq.lib.harmonization import DateTime

class MalwareDomainListParserBot(Bot):

    def process(self):
        report = self.receive_message()

        if not report.contains("raw"):
            self.acknowledge_message()
            
        columns = [
                    "time.source",
                    "source.url",
                    "source.ip",
                    "source.reverse_domain_name",
                    "description.text",
                    "__IGNORE__",
                    "source.asn"
                  ]

        raw_report = utils.base64_decode(report.value("raw"))
        for row in unicodecsv.reader(StringIO(raw_report), encoding='utf-8'):
            event = Event()

            for key, value in zip(columns, row):
                
                if key is "__IGNORE__":
                    continue
                
                if key is "time.source":
                    value = value.replace('_',' ')
                    value += " UTC"
                    
                event.add(key, value, sanitize=True)

            time_observation = DateTime().generate_datetime_now()
            event.add('time.observation', time_observation, sanitize=True)
            event.add('feed.name', report.value("feed.name"))
            event.add('feed.url', report.value("feed.url"))
            event.add('classification.type', u'malware')
            event.add("raw", ",".join(row), sanitize=True)
                
            self.send_message(event)
        self.acknowledge_message()


if __name__ == "__main__":
    bot = MalwareDomainListParserBot(sys.argv[1])
    bot.start()
