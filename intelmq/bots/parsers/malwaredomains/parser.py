import datetime
from intelmq.lib import utils
from intelmq.lib.bot import Bot, sys
from intelmq.lib.message import Event
from intelmq.lib.harmonization import DateTime

def is_valid_date(strd):
    try:
        datetime.datetime.strptime(strd, '%Y%m%d')
        return True
    except Exception, e:
        return False


class MalwareDomainsParserBot(Bot):

    def process(self):
        report = self.receive_message()

        if not report.contains("raw"):
            self.acknowledge_message()

        raw_report = utils.base64_decode(report.value("raw"))

        for row in raw_report.split('\n'):

            row = row.rstrip()

            if row == "" or row == "#":
                continue

            values = row.split('\t')

            event = Event()

            event.add('source.fqdn', values[1], sanitize=True)
            event.add('description.text', values[2], sanitize=True)

            for i in xrange(3, len(values)):
                if is_valid_date(values[i]):
                    event.add('time.source', values[i], sanitize=True)
                    break

            time_observation = DateTime().generate_datetime_now()
            event.add('time.observation', time_observation, sanitize=True)
            event.add('classification.type', u'malware')
            event.add('feed.name', report.value("feed.name"))
            event.add('feed.url', report.value("feed.url"))
            event.add('raw', row, sanitize=True)

            self.send_message(event)
        self.acknowledge_message()

if __name__ == "__main__":
    bot = MalwareDomainsParserBot(sys.argv[1])
    bot.start()
